<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[《jQuery学习教程》]]></title>
      <url>http://detachment.club/2016/07/31/jQuery%20%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;网上学习JS的过程告一段落，然后就马不停蹄的开始找JS框架和库的教程（感觉知乎上很多学习课程都是不负责任推荐，有点怀疑他们本身有没有看过那些推荐的教程。当然了，也可能是那些课程仅仅是不适合我。），找了一圈下来（网易云课堂、慕课网、极客学院、codecademy、free code camp等）没有发现适合的，要么讲的太简单了，要么信息量太大了。这时候，终于想起了w3school。以下的学习内容大部分都是基于这上面的，需要更详细的内容可以上<a href="http://www.w3school.com.cn/jquery" target="_blank" rel="external">w3school</a>查看。</p>
<a id="more"></a>
<h2 id="课程章节"><a href="#课程章节" class="headerlink" title="课程章节"></a>课程章节</h2><h3 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h3><h4 id="关键词：简介、安装、语法、选择器、事件、名称冲突"><a href="#关键词：简介、安装、语法、选择器、事件、名称冲突" class="headerlink" title="关键词：简介、安装、语法、选择器、事件、名称冲突"></a>关键词：简介、安装、语法、选择器、事件、名称冲突</h4><ul>
<li><strong>简介</strong>：jQuery是一个轻量级的JavaScript库，能极大的简化JavaScript编程，宗旨是“write less, do more”；包含的功能非常多（1. HTML元素选取；2. HTML元素操作；3. CSS操作；4. HTML事件函数；5. JavaScript特效和动画；6. HTML DOM遍历和修改；7. AJAX；8. Utilities；）；</li>
<li><strong>安装</strong>：可以将jQuery库下载到本地引用，也可以直接引用Microsoft或者google的CDN；使用引用CDN的方式有一个很大的优势就是许多用户在访问其他站点的时候已经加载过jQuery，结果就是当这些人访问站点时，会直接从缓存中加载jQuery，从而减少加载时间。而且，大多数CDN都可以确保用户在请求文件时，从最近的服务器上返回响应，从而提高加载速度；</li>
<li><strong>语法</strong>：语法形式为<code>$(selector).action()</code>，其中美元符号定义了jQuery，选择符（seclector）查询出符合条件的html元素，action函数对筛选出来的元素进行操作；举个最常见的例子：<code>$(document).ready(function(){});</code>这段代码表示在整个页面加载完成后再执行其中的操作；</li>
<li><strong>选择器</strong>：常见的选择器有以下几种：<ol>
<li>元素选择器：例如<code>$(&#39;p&#39;)</code>表示选取<code>&lt;p&gt;</code>元素；<code>$(&#39;p.intro&#39;)</code>表示选择类别为intro的<code>&lt;p&gt;</code>元素；</li>
<li>属性选择器：例如<code>$(&quot;[href]&quot;)</code>表示选取所有带有href属性的元素；<code>$(&quot;[href=&#39;#&#39;]&quot;)</code>表示选择所有带有href值等于#的元素；<code>$(&quot;[href$=&#39;.jpg&#39;]&quot;)</code>表示选择所有href值以.jpg结尾的元素；</li>
<li>更多是选择器参考<a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp" target="_blank" rel="external">jQuery选择器手册</a>。</li>
</ol>
</li>
<li><strong>事件</strong>：jQuery事件处理方法是jQuery的核心函数，事件处理程序指的是当HTML中发生某些事件所调用的方法，也叫作“触发”；（通常把jQuery代码放在<code>&lt;head&gt;</code>部分的事件处理方法中；详细的事件参考<a href="http://www.w3school.com.cn/jquery/jquery_ref_events.asp" target="_blank" rel="external">jQuery事件手册</a></li>
<li><strong>名称冲突</strong>：由于其他库也可能使用<code>$</code>符号，那么就会引起冲突，jQuery中使用<code>noConflict()</code>方法来解决这个问题；</li>
<li><strong>注意</strong>：为了使代码更容易维护，以下事项需要注意：<ol>
<li>把所有的jQuery代码置于事件处理函数中；</li>
<li>把所有事件处理函数置于文档就绪事件处理器中；</li>
<li>把jQuery代码置于单独的<code>.js</code>文件中;</li>
<li>如果存在名称冲突，则重命名jQuery库；</li>
</ol>
</li>
</ul>
<h4 id="实例及代码"><a href="#实例及代码" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/akawvG/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/akawvG/" target="_blank" rel="external">jQuery01</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<blockquote>
<p>注意：由于CodePen后台提供了jQuery的链接，所以在面板上看不到引入库的这一段代码。</p>
</blockquote>
<h4 id="小测试"><a href="#小测试" class="headerlink" title="小测试"></a>小测试</h4><p>本节主要是关于jQuery的简单介绍，其中选择器及事件为重点内容，可以查看手册后挑几个练习，使得具有最基本的功能：</p>
<blockquote>
<ol>
<li>下载jQuery库后本地引用或者直接引用链接；</li>
<li>具有基本的选择器及事件函数；</li>
</ol>
</blockquote>
<hr>
<h3 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h3><h4 id="关键词：隐藏显示，淡入淡出，滑动，动画，stop-，Callback-Chaining"><a href="#关键词：隐藏显示，淡入淡出，滑动，动画，stop-，Callback-Chaining" class="headerlink" title="关键词：隐藏显示，淡入淡出，滑动，动画，stop()，Callback, Chaining"></a>关键词：隐藏显示，淡入淡出，滑动，动画，stop()，Callback, Chaining</h4><ul>
<li><strong>隐藏显示</strong>：方法为<code>hide(), show()</code>，使用语法为<code>$(selector).hide(speed, callback)</code>，其中speed可以是slow，fast或者毫秒；而callback表示的是完成这个动作之后执行的函数；除了这两个方法之外，可以用<code>toggle()</code>的方法来切换显示隐藏，效果不错；</li>
<li><strong>淡入淡出</strong>：方法为<code>fadeIn(), fadeOut(), fadeToggle(), fadeTo()</code>，使用语法为<code>$(selector).fadeIn(speed, callback)</code>，其中speed和callback的理解和上面的一样；其中<code>fadeTo()</code>方法略有不同，语法为<code>$(selector).fadeTo(speed,opacity,callback)</code>，表示的是将选择出的元素的透明度变成目标值；</li>
<li><strong>滑动</strong>：方法为<code>slideDown(), slideUp(), slideToggle()</code>使用语法为<code>$(selector).slideDown(speed, callback)</code>，其中speed和callback的解释同上；</li>
<li><strong>动画</strong>：方法为<code>animate()</code>，使用语法为<code>$(selector).animate({params}, speed, callback)</code>，其中params参数定义形成动画的css属性，speed和callback的含义解释同上；其中属性的动画值可以设置成<code>&quot;show&quot;,&quot;hide&quot;,&quot;toggle&quot;</code>，具体见实例；如果需要实现步骤有先后的动画，那么可以通过编写多个animate()方法，jQuery就会逐一运行这些代码，这种功能叫做队列功能；animate方法几乎能操作所有的CSS属性，但是需要注意的是需要使用Camel标记法来书写属性名，比如paddingLeft,marginRight等；</li>
<li><strong>stop()</strong>: 此方法用于停止动画或者效果，适用于所有jQuery效果函数，语法为<code>$(selector).stop(stopAll,goToEnd)</code>，其中可选参数stopAll规定是否应该清除动画队列，默认是false，即仅停止活动的动画，但允许队列中的其他动画执行；可选参数goToEnd表示是否立即完成当前动画，默认为false；</li>
<li><strong>Callback</strong>：此函数在当前动画100%完成之后执行；因为JS语句是逐一执行的，为了避免因为动画还没执行完成而造成动画与之后的语句之间可能产生的错误或者页面冲突，建议以参数的形式添加Callback函数；</li>
<li><strong>Chaining</strong>：Chaining允许我们在一条语句中添加多个方法，例如<code>$(&#39;p&#39;).css(&#39;color&#39;, &#39;red&#39;).slideUp(2000).slideDown(2000);</code>，这是p元素就会先改变css样式，然后收缩，最后张开；为了易读性及格式的美观，可以通过换行及空格来美化；</li>
</ul>
<h4 id="实例及代码-1"><a href="#实例及代码-1" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/EyZZQY/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/EyZZQY/" target="_blank" rel="external">jQuery02</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="小测试-1"><a href="#小测试-1" class="headerlink" title="小测试"></a>小测试</h4><p>利用这节课所学的知识点，重现具有以上功能的div。</p>
<h4 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h4><p>  既然很多方法中已经都有callback函数的可选参数来达到链式运动的目的，那么为什么jQuery还需要有链式运动的功能？</p>
<ol>
<li>callback函数可以是任意函数，函数改变的对象可以是任意对象；</li>
<li>链式运动改变的对象是同一元素，链式运动的写法更简单；</li>
<li>还有类似功能的是动画的队列功能，不过动画改变的是具体的css属性；</li>
</ol>
<hr>
<h3 id="jQuery-HTML"><a href="#jQuery-HTML" class="headerlink" title="jQuery HTML"></a>jQuery HTML</h3><h4 id="关键词：获取、设置、添加、删除、css类、css-、尺寸"><a href="#关键词：获取、设置、添加、删除、css类、css-、尺寸" class="headerlink" title="关键词：获取、设置、添加、删除、css类、css()、尺寸"></a>关键词：获取、设置、添加、删除、css类、css()、尺寸</h4><ul>
<li>获取:用于获取内容的DOM操作方法主要有三个，获取属性值的方法主要有一个，分别是：<ol>
<li>text(): 设置或返回所选元素的文本内容；</li>
<li>html(): 设置或者返回所选元素的内容（包括html标签）；</li>
<li>val(): 设置或返回表单字段的值；</li>
<li>attr(): 用于获取属性值；</li>
</ol>
</li>
<li>设置：设置内容也是用上一节提到的三个函数，不过需要在括号中加入需要设置的内容，具体方法可见例子；同时需要知道，这三个jQuery方法都拥有回调函数，函数有两个参数，分别为被选元素列表中当前元素的下标以及原始值，<a href="http://www.w3school.com.cn/jquery/jquery_dom_set.asp" target="_blank" rel="external">text()、html() 以及 val() 的回调函数</a>；利用attr()来设置属性时可以同时设置多个属性，属性之间利用逗号隔开，此方法同样具有回调函数；</li>
<li>添加：利用jQuery可以很容易的添加新元素或者新内容，方法如下：<ol>
<li>append()：在被选元素的结尾插入内容或元素；</li>
<li>prepend()：在被选元素的开头插入内容或元素；</li>
<li>after()：在被选元素之后插入内容或元素；</li>
<li>before()：在被选元素之前插入内容或元素；</li>
</ol>
</li>
<li>删除：删除元素或内容主要通过以下两个jQuery方法：<ol>
<li>remove()：删除被选元素及其子元素，括号中可添加选择器，用于删除符合选择器条件的元素及其子元素；</li>
<li>empty(): 从被选元素中删除子元素；</li>
</ol>
</li>
<li>css类：通过jQuery可以很容易对css元素进行操作，主要方法有：<ol>
<li>addClass()：向被选元素添加一个或多个类（添加多个类的时候类名称之间用空格隔开）；</li>
<li>removeClass()：从被选元素删除一个或多个类；</li>
<li>toggle()：对被选元素添加/删除类的切换操作；</li>
<li>css()：设置或返回被选元素的一个或多个样式属性，语法为<code>css(&#39;propertyName&#39;)</code>如果有多个满足被选条件，则只返回第一个元素的属性；如需设置CSS属性，则需使用语法为<code>css(&#39;propertyName&#39;, &#39;value&#39;)</code>，此时将所有满足条件的元素的样式都设置成目标样式；</li>
</ol>
</li>
<li>尺寸：通过jQuery很容易处理元素和浏览器窗口的尺寸，主要的方法如下：<ol>
<li>width()：设置或返回元素的宽度（不包括内边距、边框和外边距），如果对象为document或者window，则表示返回HTML文档或者浏览器窗口的宽度和高度；如果在括号中加入数字，则表示将对应的尺寸设置为对应的值；</li>
<li>height()：设置或返回元素的高度（不包括内边距、边框和外边距）；</li>
<li>innerWidth()：返回元素的宽度（包括内边距）；</li>
<li>innerHeight()：返回元素的高度（包括内边距）；</li>
<li>outerWidth()：返回元素的宽度（包括内边距和边框），如果括号中增加参数‘true’则表示返回包括内外边距及边框的宽度；</li>
<li>outerHeight()：返回元素的高度（包括内边距和边框），如果括号中增加参数‘true’则表示返回包括内外边距及边框的高度；</li>
</ol>
</li>
</ul>
<h4 id="实例及代码-2"><a href="#实例及代码-2" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/OXBzLX/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/OXBzLX/" target="_blank" rel="external">jQuery03</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<blockquote>
<p>本小程序具有的功能：</p>
<ol>
<li>点击第一个按钮，能在方框中添加一个list，list的内容为输入框中的内容，且添加都是从头开始添加；</li>
<li>点击第二个按钮，移除方框中的一个list，且每次移除都是移除第一个；</li>
<li>点击第三个按钮能够改变方框中list的样式，具体为改变字体、字体颜色及list的样式；</li>
<li>点击第四个按钮能够改变方框的尺寸；</li>
</ol>
</blockquote>
<h4 id="小问题-1"><a href="#小问题-1" class="headerlink" title="小问题"></a>小问题</h4><p>利用append()及after()来添加内容的话，有何不同？</p>
<blockquote>
<p>前者是在所选元素的结尾处添加内容，也就是说，并没有新增加一个节点；而后者则在所选元素的后面增加内容，很显然这时候增加了一个节点。可以通过一个很小的例子来证明，局部代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph!&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;This is a paragraph!&lt;/p&gt;</span><br><span class="line">hello!                           <span class="comment">//利用after()来添加 "Hello!"</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">This is a paragraph!</span><br><span class="line">Hello!                          <span class="comment">//利用append()来添加 "Hello!"</span></span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="小测试-2"><a href="#小测试-2" class="headerlink" title="小测试"></a>小测试</h4><p>通过本节的学习，应该已经知道了利用jQuery来控制html元素的添加与删除以及css样式的设置，那么可以从添加、删除及设置样式的方法中任选几个来制作一个和上面所示类似功能的程序。</p>
<hr>
<h3 id="jQuery遍历"><a href="#jQuery遍历" class="headerlink" title="jQuery遍历"></a>jQuery遍历</h3><h4 id="关键词：遍历、祖先、后代、同胞、过滤"><a href="#关键词：遍历、祖先、后代、同胞、过滤" class="headerlink" title="关键词：遍历、祖先、后代、同胞、过滤"></a>关键词：遍历、祖先、后代、同胞、过滤</h4><ul>
<li>遍历：用于根据其相对于其他元素的关系来查找或者选取HTML元素；</li>
<li>祖先：祖先元素包括父元素、祖父元素等等，常用的方法为：<ol>
<li>parent()：返回被选元素的直接父元素；</li>
<li>parents()：返回被选元素的所有祖先元素，其中甚至包括文档的根元素（即<html>)；</html></li>
<li>parentUntil()：返回介于两个给定元素之间的祖先元素；</li>
</ol>
</li>
<li>后代：与祖先相对的，后代指的是子、孙、曾孙等，常用的方法为：<ol>
<li>children()：返回被选元素的直接子元素；</li>
<li>find()：返回被选元素的被find的元素，包括所有后代；</li>
</ol>
</li>
<li>同胞：同胞拥有相同的父元素，常用的方法为：<ol>
<li>siblings()：返回所有被选元素的同胞元素；</li>
<li>next()：返回被选元素的下一个同胞元素；</li>
<li>nextAll()：返回被选元素的所有跟随的同胞元素；</li>
<li>nextUntil()：返回介于两个给定参数之间的所有跟随的同胞元素；</li>
<li>pre()：返回被选元素的上一个同胞元素；</li>
<li>preAll():返回被选元素的所有前面的同胞元素；</li>
<li>prevUntil()：返回介于两个给定参数之间的所有的同胞元素；</li>
</ol>
</li>
<li>过滤：缩小搜索元素的范围，常用的方位有以下几种：<ol>
<li>first()：返回被选元素的首个子元素；</li>
<li>last()：返回被选元素的最后一个元素；</li>
<li>eq()：返回被选元素中带有指定索引号的元素；</li>
<li>filter()：返回符合匹配标准的元素集合；</li>
<li>not()：返回不匹配标准的所有元素集合；</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《精通JavaScript开发》]]></title>
      <url>http://detachment.club/2016/07/02/%E5%9F%BA%E4%BA%8E%E3%80%8A%E7%B2%BE%E9%80%9AJavaScript%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BE%E7%A8%8B%E7%9A%84%E5%A4%8D%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;从5月25日开始开始学习，用了将近一个月的时间将<a href="http://study.163.com/course/courseMain.htm?courseId=224014" target="_blank" rel="external">视频课程</a>过了一遍，对比W3school及另外一套课程，这个课程给我的体验是整体进度设置很合理，Blue老师循循善诱，讲课风格非常适合新手学习。为了更好的掌握JavaScript的内容，下文将对每一章节做对应的总结与复习，并有相应的小测试来巩固复习。本文内容适合所有正在学习此课程的同学。<b>对于本课程或者本博客有任何问题，非常欢迎给我发邮件，我会尽我所能回答你的问题。</b></p>
<a id="more"></a>
<h2 id="课程章节"><a href="#课程章节" class="headerlink" title="课程章节"></a>课程章节</h2><h3 id="《初探JavaScript魅力01》"><a href="#《初探JavaScript魅力01》" class="headerlink" title="《初探JavaScript魅力01》"></a>《初探JavaScript魅力01》</h3><h4 id="关键词：JS、事件、属性、函数、重用、变量"><a href="#关键词：JS、事件、属性、函数、重用、变量" class="headerlink" title="关键词：JS、事件、属性、函数、重用、变量"></a>关键词：JS、事件、属性、函数、重用、变量</h4><ul>
<li>JavaScript：交互、功能；</li>
<li>事件：用户操作或者其他改变；</li>
<li>属性：属性是与对象相关的值；</li>
<li>函数：函数是指由事件驱动的或者当它被调用时执行的可重复使用的代码块；</li>
<li>重用：使开发效率更高，布局更简洁；</li>
<li>变量：存储信息的容器；</li>
</ul>
<h4 id="实例及代码"><a href="#实例及代码" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="277" scrolling="no" src="//codepen.io/Leon-Zhao/embed/kXwLYb/?height=277&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/kXwLYb/" target="_blank" rel="external">JavaScript-01</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h4><p>请利用这节课的知识，完成具有下面功能的区块：</p>
<blockquote>
<ol>
<li>区块大小200px*200px；背景颜色为红色；</li>
<li>鼠标移入区块大小变成300px*300px，背景颜色变成蓝色；</li>
<li>鼠标移出区块大小及颜色变成初始状态。</li>
</ol>
</blockquote>
<hr>
<h3 id="《初探JavaScript魅力02》"><a href="#《初探JavaScript魅力02》" class="headerlink" title="《初探JavaScript魅力02》"></a>《初探JavaScript魅力02》</h3><h4 id="关键词：变量、函数的定义及调用、ID、if判断、双等号、className"><a href="#关键词：变量、函数的定义及调用、ID、if判断、双等号、className" class="headerlink" title="关键词：变量、函数的定义及调用、ID、if判断、双等号、className"></a>关键词：变量、函数的定义及调用、ID、if判断、双等号、className</h4><ul>
<li>函数定义及调用：定义时只是告诉系统有这个函数，但不会执行；调用的时候函数执行；</li>
<li>ID：任何标签都可以加ID，包括link。任何标签的任何属性都可以改，而且html上怎么写，js里就怎么写（除了className）；</li>
<li>if：条件判断；</li>
<li>双等号：用于判断双等号两边是否相等；</li>
<li>className： 列别名，为js中的保留字，唯一一个在html及js中写法不同的属性；</li>
</ul>
<h4 id="实例及代码-1"><a href="#实例及代码-1" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/zBzpjv/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/zBzpjv/" target="_blank" rel="external">JavaScript-02-01</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/XKgVoX/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/XKgVoX/" target="_blank" rel="external">JavaScript-02-02</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>


<h4 id="测试题-1"><a href="#测试题-1" class="headerlink" title="测试题"></a>测试题</h4><p>请根据本节所学的知识，完成下面一个小程序：</p>
<blockquote>
<ol>
<li>新建一个按钮及div；</li>
<li>点击按钮更改div的样式（可以是背景颜色、大小或者其他）；</li>
<li>必须通过更改div的类来达到上面的效果；</li>
</ol>
</blockquote>
<hr>
<h3 id="《初探JavaScript魅力03》"><a href="#《初探JavaScript魅力03》" class="headerlink" title="《初探JavaScript魅力03》"></a>《初探JavaScript魅力03》</h3><h4 id="关键词：函数传参、操作属性方法、字符串及参数"><a href="#关键词：函数传参、操作属性方法、字符串及参数" class="headerlink" title="关键词：函数传参、操作属性方法、字符串及参数"></a>关键词：函数传参、操作属性方法、字符串及参数</h4><ul>
<li>函数传参：当函数中有参数有多个值时使用传参，参数就是占位符；</li>
<li>操作属性方法：最常用的为通过“.”，但是当属性作为参数的时候，需要用”[]”的形式来改变参数，否则无法被识别；所有用.的地方都能用[]替换，但反过来不成立；</li>
<li>字符串为常量，设定后即为定值；参数则为变量，传入时才确定；传入字符串时需要加双引号，而后者不需要；</li>
</ul>
<h4 id="实例及代码-2"><a href="#实例及代码-2" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/grRZBL/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/grRZBL/" target="_blank" rel="external">JavaScript-03</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-2"><a href="#测试题-2" class="headerlink" title="测试题"></a>测试题</h4><p>请根据本节所学的知识，完成下面一个小程序：</p>
<blockquote>
<ol>
<li>新建三个按钮及一个有字体内容的div；</li>
<li>分别点击按钮改变div中字体的大小、颜色及样式；</li>
<li>通过函数传参的方式达到上面所要求的效果。</li>
</ol>
</blockquote>
<hr>
<h3 id="《初探JavaScript魅力04》"><a href="#《初探JavaScript魅力04》" class="headerlink" title="《初探JavaScript魅力04》"></a>《初探JavaScript魅力04》</h3><h4 id="关键词：样式优先级、提取行间事件、匿名函数、window-onload、获取元素组、循环"><a href="#关键词：样式优先级、提取行间事件、匿名函数、window-onload、获取元素组、循环" class="headerlink" title="关键词：样式优先级、提取行间事件、匿名函数、window.onload、获取元素组、循环"></a>关键词：样式优先级、提取行间事件、匿名函数、window.onload、获取元素组、循环</h4><ul>
<li>样式优先级：表示样式优先执行的顺序，如右： 通配符&lt;标签&lt;class&lt;ID&lt;行间；（对于同一个元素，修改样式的时候建议在同一优先级进行修改。）</li>
<li>提取行间事件：行间事件也是一种特殊的属性；</li>
<li>匿名函数：不进行命名的函数；</li>
<li>获取元素组：利用getElementsByTagName获取;</li>
<li>循环：while（包括初始化、条件、语句和自增）；for 循环。</li>
</ul>
<h4 id="实例及代码-3"><a href="#实例及代码-3" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/zBzJAV/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/zBzJAV/" target="_blank" rel="external">JavaScript-04</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-3"><a href="#测试题-3" class="headerlink" title="测试题"></a>测试题</h4><p>请根据本节所学的知识，完成下面的一个小程序：</p>
<blockquote>
<ol>
<li>新建两个按钮及若干个div，大小及背景颜色随意；</li>
<li>点击按钮分别能改变所有div的大小或者颜色。</li>
</ol>
</blockquote>
<hr>
<h3 id="《初探JavaScript魅力05》"><a href="#《初探JavaScript魅力05》" class="headerlink" title="《初探JavaScript魅力05》"></a>《初探JavaScript魅力05》</h3><h4 id="关键词：This、innerHTML、字符串连接、数组"><a href="#关键词：This、innerHTML、字符串连接、数组" class="headerlink" title="关键词：This、innerHTML、字符串连接、数组"></a>关键词：This、innerHTML、字符串连接、数组</h4><ul>
<li>This：当前发生事件的元素（目前这么理解就行了，更多的用法后面会涉及到）；</li>
<li>innerHTML：写入到html页面中，写入的内容本身可以包含html标签；</li>
<li>字符串连接：通过了解符 <code>+</code> 来实现，注意有优先级的问题；</li>
<li>数组：一系列值的组合；</li>
</ul>
<h4 id="实例及代码-4"><a href="#实例及代码-4" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="559" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/ZOydkq/?height=559&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/ZOydkq/" target="_blank" rel="external">JavaScript-05</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-4"><a href="#测试题-4" class="headerlink" title="测试题"></a>测试题</h4><p>请根据本节所学的知识，完成下面一个小程序：</p>
<blockquote>
<ol>
<li>制作一个选项卡；</li>
<li>有四个选项，且每一项都对应不同的内容；</li>
<li>鼠标移动到不同选项卡的时候，显示不同的内容；</li>
<li>鼠标移入选项卡的时候，选项卡本身的样式也会发生一些变化。</li>
</ol>
</blockquote>
<hr>
<h3 id="《JavaScript基础01》"><a href="#《JavaScript基础01》" class="headerlink" title="《JavaScript基础01》"></a>《JavaScript基础01》</h3><h4 id="关键词：JS组成、变量类型、parseInt、NaN、作用域、闭包、命名规范"><a href="#关键词：JS组成、变量类型、parseInt、NaN、作用域、闭包、命名规范" class="headerlink" title="关键词：JS组成、变量类型、parseInt、NaN、作用域、闭包、命名规范"></a>关键词：JS组成、变量类型、parseInt、NaN、作用域、闭包、命名规范</h4><ul>
<li>JS组成：JS由ECMAScript（解释器、翻译）、DOM（操纵html）、BOM（操作浏览器，兼容性）；ECMA几乎没有兼容问题，DOM有一些操作不兼容，BOM没有兼容问题（完全不兼容）；</li>
<li>变量类型：数字、字符、对象、函数、布尔值、未定义；（一个变量最好只存一种类型的变量）；</li>
<li>parseInt：将字符转换成数字，从左到右扫描字符，一旦遇到不是数字的就直接返回，因此也可提取字符串中的数字；字符串不为数字，则返回NAN；只用于转换整数，如要转换成小数，则为parseFloat；</li>
<li>NaN：唯一一个不等于本身，isNaN用于判断是否为NaN；</li>
<li>类型转换：显示类型转换（如上面提到的）及隐式类型转换（系统自动转换），然后就涉及到<code>==</code>和<code>===</code>后者不进行隐式类型转换就开始比较；<code>+</code>运算时不会进行隐形类型转换而<code>-</code>符号则会先进行类型转换再运算；</li>
<li>作用域：变量作用范围，局部变量及全局变量；</li>
<li>闭包：子函数可使用父函数的局部变量；</li>
<li>命名规范：可读性及规范性（匈牙利命名法）；</li>
</ul>
<h4 id="实例及代码-5"><a href="#实例及代码-5" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="124" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/bZAbVk/?height=124&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/bZAbVk/" target="_blank" rel="external">JavaScript-06</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-5"><a href="#测试题-5" class="headerlink" title="测试题"></a>测试题</h4><p>请根据本节所学的知识，完成下面一个小程序：</p>
<blockquote>
<ol>
<li>制作一个加法计算器；</li>
<li>计算器形式为<code>a + b = c</code>，其中a和b为输入框中的数字，c为输出的数字；</li>
<li>计算前先判断是否为数字类型，如果不是则弹出提示；</li>
<li>能计算整数及小数；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JavaScript基础02》"><a href="#《JavaScript基础02》" class="headerlink" title="《JavaScript基础02》"></a>《JavaScript基础02》</h3><h4 id="关键词：运算符、程序流程控制、True和False、Json、Json和数组"><a href="#关键词：运算符、程序流程控制、True和False、Json、Json和数组" class="headerlink" title="关键词：运算符、程序流程控制、True和False、Json、Json和数组"></a>关键词：运算符、程序流程控制、True和False、Json、Json和数组</h4><ul>
<li>运算符：用于算数、赋值、关系、逻辑、优先级等；</li>
<li>程序流程控制：判断（if、switch、？：），循环（while、for），跳出（continue、break）</li>
<li>True和False： 表示的是计算机用于计算的真与假，true包括：true、非零数字、非空字符串、非空对象；false包括：false、0、空字符串、空对象、undefined；</li>
<li>Json：一种轻量级的数据交换格式，是基于JavaScript的一个子集；（注意Json没有length属性，使用循环的话需要for（var i in json）这种形式）；</li>
<li>Json与数组的区别：1.Json的下标为字符串，而数组为数字；2.前者无length属性而后者有；3.前者循环只能用for（var i in json）的形式，而后者两种形式都可以；</li>
</ul>
<h4 id="实例及代码-6"><a href="#实例及代码-6" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/NAvGjb/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/NAvGjb/" target="_blank" rel="external">JavaScript-07</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-6"><a href="#测试题-6" class="headerlink" title="测试题"></a>测试题</h4><p>由于本节内容多为介绍性，基本上每个程序都非常简单，可用练习下列小程序：</p>
<blockquote>
<ol>
<li>制作一个隔行变色的表格；</li>
<li>利用switch制作一个小程序；</li>
<li>利用三运算符<code>?:</code>制作一个小程序；</li>
<li>利用break或者continue制作一个小程序；</li>
<li>利用Json制作一个小程序。</li>
</ol>
</blockquote>
<hr>
<h3 id="《深入JavaScript》"><a href="#《深入JavaScript》" class="headerlink" title="《深入JavaScript》"></a>《深入JavaScript》</h3><h4 id="关键词：函数返回值、函数传参（不定参）、取非行间样式、数组、splice、concat、join、sort"><a href="#关键词：函数返回值、函数传参（不定参）、取非行间样式、数组、splice、concat、join、sort" class="headerlink" title="关键词：函数返回值、函数传参（不定参）、取非行间样式、数组、splice、concat、join、sort"></a>关键词：函数返回值、函数传参（不定参）、取非行间样式、数组、splice、concat、join、sort</h4><ul>
<li>函数返回值：即为函数的执行结果；</li>
<li>传不定参：arguments，参数的个数可变；（例子：求和、css函数）</li>
<li>取非行间样式：如果样式没有写在行间，那么应该利用currentStyle(IE)或者getComputedStyle(obj，false).name。利用if，else来进行兼容性处理；获取复合样式的属性时需要注明所取的明确样式（如获取背景颜色，需要写backgroundColor，直接写background是没有作用的）。</li>
<li>数组：使用单一变量的值存储一系列的值；数组的length属性既可读亦可写，因此可利用可写功能快速清空数组；添加：push及unshift（分别表示在尾部及头部添加）；删除：pop及shift（分别表示从尾部及头部删除）；</li>
<li>splice：splice(n1,n2)表示从数组的n1位置开始删n2个元素；splice(n1,n2,”a”,”b”,”c”…)表示在n1位置删除n2个元素，并添加后面的”a”,”b”,”c”,等等；</li>
<li>concat：数组的连接，语法:<code>a.concat(b)</code>,则数组a和b连接，a是元素在b的元素前面；</li>
<li>join：表示用给定的参数连接数组里面的值，语法为<code>arr.join(&quot;value&quot;)</code>,那么arr中的值就将会被value连接起来；</li>
<li>sort：数组的排序，语法为<code>arr.sort()</code>,其中sort()括号中可传入函数，表示排序的依据；在对数字排序的时候，因为sort属性只认字符串，所以必须传入比较函数；</li>
</ul>
<h4 id="实例及代码-7"><a href="#实例及代码-7" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/EyvXLd/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/EyvXLd/" target="_blank" rel="external">JavaScript-08</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-7"><a href="#测试题-7" class="headerlink" title="测试题"></a>测试题</h4><p>同样的，本节也主要是在讲一些非常基础的知识，没有涉及到复杂程序的练习，所以大家可选择性练习下方小程序：</p>
<blockquote>
<ol>
<li>利用不定参argument制作一个程序，如果传入的是两个参数则获取参数值；如传入三个值，则设置参数；</li>
<li>练习数组的相关属性：pop、unshift、push、shift、concat、join、sort、splice、length；</li>
</ol>
</blockquote>
<h4 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h4><blockquote>
<p>有没有什么方法能够直接修改css样式中的参数值？（由本节讲到的可直接获取样式中的参数值想到的）</p>
</blockquote>
<hr>
<h3 id="《定时器的使用01》"><a href="#《定时器的使用01》" class="headerlink" title="《定时器的使用01》"></a>《定时器的使用01》</h3><h4 id="关键词：定时器、清除定时器、Date对象、charAt"><a href="#关键词：定时器、清除定时器、Date对象、charAt" class="headerlink" title="关键词：定时器、清除定时器、Date对象、charAt()"></a>关键词：定时器、清除定时器、Date对象、charAt()</h4><ul>
<li>定时器：间隔性(setInterval)、延时性(setTimeout);</li>
<li>清除定时器：clearInterval(name),name为需要关闭的定时器的名称；对应的还有clearTimeout;</li>
<li>Date(): 包括<code>getHours(),getMinutes(),getSeconds(),getFullYear(),getMonth(),getDate(),getDay()</code>，其中getMonth()获取的月份是从0开始的；</li>
<li>charAt: 兼容低版本的获取元素的方法，比如获取str中第i位元素：<code>str[i]=str.charAt(i)</code>;</li>
</ul>
<h4 id="实例及代码-8"><a href="#实例及代码-8" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="355" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/akyxYo/?height=355&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/akyxYo/" target="_blank" rel="external">JavaScript09</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-8"><a href="#测试题-8" class="headerlink" title="测试题"></a>测试题</h4><p>本节讲到了两个例子，一个就是上面的数码时钟，另一个就是下面的延时提示框，需要满足的功能如下：</p>
<blockquote>
<ol>
<li>有一大一小两个div，左右分布；</li>
<li>当鼠标放入小div区域时，大的div显示；</li>
<li>当鼠标移出小div到别处，大div经过500ms后消失；</li>
<li>如果在这500ms内，鼠标移入大div区域，则大div不消失；</li>
<li>从大div移出时，500ms后大div消失；</li>
<li>在500ms内如果鼠标移入小div，则大div不消失；<br>（简单来说：当鼠标在可见的div范围内，div常显；当鼠标在空白处500ms后，大div消失）</li>
</ol>
</blockquote>
<hr>
<h3 id="《定时器的使用02》"><a href="#《定时器的使用02》" class="headerlink" title="《定时器的使用02》"></a>《定时器的使用02》</h3><h4 id="关键词：offsetLeft、无缝滚动、innerHTML"><a href="#关键词：offsetLeft、无缝滚动、innerHTML" class="headerlink" title="关键词：offsetLeft、无缝滚动、innerHTML"></a>关键词：offsetLeft、无缝滚动、innerHTML</h4><ul>
<li>offsetLeft：元素的水平偏移位置（包括margin）；</li>
<li>无缝滚动：结合offsetLeft及定时器的综合应用；应该包括的功能：左右都能滚动、鼠标移入暂停，移出重新滚动；</li>
<li>innerHTML: 可以用innerHTML+=innerHTML来使得某元素内的内容为两份的之前的内容；</li>
<li>在编写本节课程的时候一定不要不要忘记了加上<code>px</code>.</li>
</ul>
<h4 id="实例及代码-9"><a href="#实例及代码-9" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/NAvkQj/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/NAvkQj/" target="_blank" rel="external">JavaScript10</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-9"><a href="#测试题-9" class="headerlink" title="测试题"></a>测试题</h4><p>根据所学的知识，拓展本节课的实例功能：</p>
<blockquote>
<ol>
<li>增加滚动速度选项：可分为快、一般、慢，三种滚动速度。</li>
</ol>
</blockquote>
<hr>
<h3 id="《DOM基础》"><a href="#《DOM基础》" class="headerlink" title="《DOM基础》"></a>《DOM基础》</h3><h4 id="关键词：DOM节点、childNodes、文本节点及元素节点、nodeType、children、parentNode、offsetParent、firstChild、lastChild、setAttribute、className"><a href="#关键词：DOM节点、childNodes、文本节点及元素节点、nodeType、children、parentNode、offsetParent、firstChild、lastChild、setAttribute、className" class="headerlink" title="关键词：DOM节点、childNodes、文本节点及元素节点、nodeType、children、parentNode、offsetParent、firstChild、lastChild、setAttribute、className"></a>关键词：DOM节点、childNodes、文本节点及元素节点、nodeType、children、parentNode、offsetParent、firstChild、lastChild、setAttribute、className</h4><ul>
<li>节点：和css中的标签、js中的元素是一个意思；</li>
<li>childNodes：子节点集合，包括文本节点及元素节点（在IE8下不包括空白的文本节点）</li>
<li>文本节点及元素节点：前者不包括在标签中，后者包含在标签中；</li>
<li>nodeType：节点类型；nodeType为3时为文本节点，nodeType为1时为元素节点；</li>
<li>children：子节点集合，不包括文本节点，只包含元素节点；</li>
<li>parentNode：元素父节点；</li>
<li>offsetParent：表示用于定位的父级；</li>
<li>firstChild： 第一个子节点（包括文本子节点）。firstElementChild则不包括文本子节点，只包括元素子节点，但是低版本IE不兼容，因此要用if语气来兼容；</li>
<li>setAttribute：用DOM方式操纵元素，语法为<code>setAttribute(name, value)</code>，与此类似的还有getAttribute，语法为<code>getAttribute(name)</code>，以及removeAttribute，语法为<code>removeAttribute(name)</code>；</li>
<li>className：类别名，结合判断能批量修改特定类别的元素，也可以将if函数及类别封装成固定的函数，方便调用；</li>
</ul>
<h4 id="实例及代码-10"><a href="#实例及代码-10" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/EywNVV/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/EywNVV/" target="_blank" rel="external">JavaScript11</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-10"><a href="#测试题-10" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的知识，完成下面一个小程序：</p>
<blockquote>
<ol>
<li>将有特定class属性的div的第一个子节点的所有内容的字体改为times；</li>
<li>提示：需要使用firstChild及className的使用，注意兼容性；</li>
</ol>
</blockquote>
<hr>
<h3 id="《DOM操作应用》"><a href="#《DOM操作应用》" class="headerlink" title="《DOM操作应用》"></a>《DOM操作应用》</h3><h4 id="关键词：createElement、appendChild、insertBefore、removeChild、文档碎片"><a href="#关键词：createElement、appendChild、insertBefore、removeChild、文档碎片" class="headerlink" title="关键词：createElement、appendChild、insertBefore、removeChild、文档碎片"></a>关键词：createElement、appendChild、insertBefore、removeChild、文档碎片</h4><ul>
<li>creatElement： 创建元素，语法<code>createElement(element)</code>，创建完成后还需要添加到父节点才有效；</li>
<li>appendChild：将创建的元素添加到父节点，语法：<code>obj.appendChild(element)</code>，其中obj为父节点，element为创建出来的元素；如果appendChild的元素为现有的元素，那么使用这个属性的时候会先从现有的父级上删除，然后添加到新的父级里；</li>
<li>注意：不管是html中原有的，还是通过DOM创建出来的，性质都是一样的，没有区别；</li>
<li>insertBefore：在父节点内插入子节点，语法：<code>obj.insertBefore(element, obj[i])</code>表示在父节点obj中的第i个元素前面插入元素；但是如果obj中本来没有元素，那么就没法obj[i]就不存在，这时候还得用appendChild，所以这两个经常结合使用，解决兼容性问题；</li>
<li>removeChild：移除子节点，语法<code>obj.removeChild(element)</code>，其中obj为父节点，element为需要移除的元素；</li>
<li>文档碎片：文档碎片可以提高DOM操作性能（理论上），语法：<code>createDocumentFragment()</code>；（实际上在高级浏览器上，文档碎片几乎不会提高效率）</li>
</ul>
<h4 id="实例及代码-11"><a href="#实例及代码-11" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="219" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/zBEPKE/?height=219&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/zBEPKE/" target="_blank" rel="external">JavaScript12</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-11"><a href="#测试题-11" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的内容，完成下面一个小程序：</p>
<blockquote>
<ol>
<li>制作一个表格。两个按钮：一个增加表格行数，一个删除表格行数；</li>
<li>每次增加的行数都在第一行，删除则从最后一行开始；</li>
<li>顺便加上各行变色的小功能；</li>
</ol>
</blockquote>
<hr>
<h3 id="《DOM操作应用高级-01》"><a href="#《DOM操作应用高级-01》" class="headerlink" title="《DOM操作应用高级-01》"></a>《DOM操作应用高级-01》</h3><h4 id="关键词：tBodies、隔行变色、移入高亮、搜索、toLowerCase-、search-、"><a href="#关键词：tBodies、隔行变色、移入高亮、搜索、toLowerCase-、search-、" class="headerlink" title="关键词：tBodies、隔行变色、移入高亮、搜索、toLowerCase()、search()、"></a>关键词：tBodies、隔行变色、移入高亮、搜索、toLowerCase()、search()、</h4><ul>
<li>tBodies:选出tbody元素，相当于<code>getElementsByTagName(&#39;tbody&#39;)</code>，同样的还有tHead、tFoot、rows及cells；</li>
<li>搜索：需要的功能有——忽略大小写、模糊搜索、多关键词搜索；</li>
<li>toLowerCase:转化成小写；</li>
<li>search：搜索文本，如果搜索到则返回所在位置，未找到则返回-1；</li>
<li>split：切分字符串，语法为<code>str.split(&#39;aa&#39;)</code>，表示用aa来切分str，aa可以为空格或者任何字符；</li>
</ul>
<h4 id="实例及代码-12"><a href="#实例及代码-12" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/jAGxaz/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/jAGxaz/" target="_blank" rel="external">JavaScript13</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<blockquote>
<p>本程序具有的功能：</p>
<ol>
<li>表格隔行变色；</li>
<li>鼠标移入移除高亮；</li>
<li>手动输入添加内容，并同时保证功能1和2有效，而且自动标号不重复；</li>
<li>具有删除所添加行的功能，同时保证1和2的功能有效；</li>
<li>只能搜索，可忽略大小写及模糊搜索；</li>
</ol>
</blockquote>
<h4 id="测试题-12"><a href="#测试题-12" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学内容，完善上面的小程序：</p>
<blockquote>
<ol>
<li>加入多关键词搜索功能（结合split功能及search）；</li>
<li>搜索功能与上述功能1，2兼容；（目前我还没想到更好的办法去解决）</li>
</ol>
</blockquote>
<hr>
<h3 id="《DOM操作应用高级-02》"><a href="#《DOM操作应用高级-02》" class="headerlink" title="《DOM操作应用高级-02》"></a>《DOM操作应用高级-02》</h3><h4 id="关键词：排序、aLi、表单、onsubmit、onreset、表单验证"><a href="#关键词：排序、aLi、表单、onsubmit、onreset、表单验证" class="headerlink" title="关键词：排序、aLi、表单、onsubmit、onreset、表单验证"></a>关键词：排序、aLi、表单、onsubmit、onreset、表单验证</h4><ul>
<li>排序：中心思想是结合利用appendChild的移动功能及sort的排序功能；</li>
<li>aLi：aLi=document.getElementById(‘li’),虽然看起来像是数组，但却又不是正真的数组，它不具备sort、join等功能，确切来说这只是一个元素集合；</li>
<li>表单：用于向服务器提交数据，action为链接地址；</li>
<li>onsubmit：提交数据是发生的事件；</li>
<li>onreset：重置表单时发生的事件；</li>
<li>表单验证：阻止用户输入非法字符等；</li>
</ul>
<h4 id="实例及代码-13"><a href="#实例及代码-13" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/YWABXk/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/YWABXk/" target="_blank" rel="external">JavaScript14</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<blockquote>
<p>本小程序就有的功能：</p>
<ol>
<li>所有上节课程序所具有的功能；</li>
<li>在上节课的基础上具有排序功能；</li>
<li>与课程相比，本排序功能具有选择性，即可根据所需要的排序依据进行排序；</li>
</ol>
</blockquote>
<h4 id="测试题-13"><a href="#测试题-13" class="headerlink" title="测试题"></a>测试题</h4><p>表单内容比较简单，可利用表单完成下面一个小程序：</p>
<blockquote>
<ol>
<li>制作一个表单，包括用户名、密码和提交；</li>
<li>提交时会弹出一个确认页面；</li>
<li>具有重置内容；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS运动基础-01》"><a href="#《JS运动基础-01》" class="headerlink" title="《JS运动基础-01》"></a>《JS运动基础-01》</h3><h4 id="关键词：运动框架、分享侧边栏、图片淡入淡出"><a href="#关键词：运动框架、分享侧边栏、图片淡入淡出" class="headerlink" title="关键词：运动框架、分享侧边栏、图片淡入淡出"></a>关键词：运动框架、分享侧边栏、图片淡入淡出</h4><ul>
<li>运动：利用定时器及offsetLeft来实现；</li>
<li>框架完善过程：<ol>
<li>到指定地点停止；</li>
<li>点击后，运动前先清除定时器，保证每次只有一个定时器处于工作状态；</li>
</ol>
</li>
<li>分享侧边栏：鼠标移入移出，运动方向相反；</li>
<li>图片淡入淡出：鼠标移入移出改变图片的透明度；</li>
</ul>
<h4 id="实例及代码-14"><a href="#实例及代码-14" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="353" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/XKZwyK/?height=353&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/XKZwyK/" target="_blank" rel="external">JavaScript15</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p><strong>注意：变量申明的位置非常重要，变量申明的位置能够直接影响到变量的值是否收到函数的影响</strong></p>
<h4 id="测试题-14"><a href="#测试题-14" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的运动框架的学习，完成下面的小程序：</p>
<blockquote>
<ol>
<li>新建一个分享侧边栏，侧边栏上有个小标签；</li>
<li>将整个div布局在视窗的左下角；</li>
<li>正常情况下侧边栏只有标签能看到，鼠标移入时，整个div出现，移出div后0.5s后侧边栏又隐藏到视窗外；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS运动基础-02》"><a href="#《JS运动基础-02》" class="headerlink" title="《JS运动基础-02》"></a>《JS运动基础-02》</h3><h4 id="关键词：缓冲运动、Math、右侧悬浮框"><a href="#关键词：缓冲运动、Math、右侧悬浮框" class="headerlink" title="关键词：缓冲运动、Math、右侧悬浮框"></a>关键词：缓冲运动、Math、右侧悬浮框</h4><ul>
<li>缓冲运动：运动速度与到目标位置相关；</li>
<li>Math：数学函数，常用的有Math.ceil()，表示向上取整；Math.floor()，表示向下取整；由于目标值可能大于也可能小于现在的值，所以需要根据速度来判断是向上还是向下取整，这时候就可以利用三元运算符简单的判断一下了，具体的操作可以在下面的实例中看到；Math.abs()，表示的是取绝对值，在匀速运动的停止条件的时候能用到；</li>
<li>匀速运动时，由于速度可能不能被运动量整除，那么为了正好达到目标，可以定义在距离目标近到一定程度（绝对值小于速度值）的时候，直接让程序到达目标点；在缓冲运动中由于运动在最后，速度值可能会是小数，而浏览器默认会将小数部分舍去，所以达不到目标，为了达到目标，只要直接对速度进行取整（整数时向上取整，负数时向下取整），保证在速度为小数时也能继续运动；</li>
</ul>
<h4 id="实例及代码-15"><a href="#实例及代码-15" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/zBPaLv/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/zBPaLv/" target="_blank" rel="external">JavaScript16</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<blockquote>
<p>本程序具有的功能：</p>
<ol>
<li>这个小程序就综合了匀速运动与缓冲运动，水平方向上为匀速运动，竖直方向为缓冲运动；</li>
<li>注意：特别需要小心的是在写尺寸的时候别忘了加上“px”，否则代码无效而且不会报错！</li>
</ol>
</blockquote>
<h4 id="测试题-15"><a href="#测试题-15" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节缩写的内容，完成制作一个缓冲样式的滚动条，具体如下：</p>
<blockquote>
<ol>
<li>缓冲条位于视窗的右侧中间位置；</li>
<li>不管是向上滚动还是向下滚动，缓冲后滚动条都会停止在视窗右侧中间；</li>
<li>停止运动时不能抖动（用到parseInt属性）；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS运动应用-01》"><a href="#《JS运动应用-01》" class="headerlink" title="《JS运动应用-01》"></a>《JS运动应用-01》</h3><h4 id="关键词：多物体同时运动、offsetWidth、任意值运动框架"><a href="#关键词：多物体同时运动、offsetWidth、任意值运动框架" class="headerlink" title="关键词：多物体同时运动、offsetWidth、任意值运动框架"></a>关键词：多物体同时运动、offsetWidth、任意值运动框架</h4><ul>
<li>多物体运动框架：将定时器变成元素的属性，那么调用时则不会相互干扰；（例子：改变div的长度，互不影响；或者改变透明度；）</li>
<li>补充：在多物体运动的情况下，所有的属性都不能共用，例如上面提到的透明度，需要先把透明度赋值给一个变量，那么就需要将这个变量变成所有需要调用的对象的属性；</li>
<li>offsetWidth：本节讨论到了与offset相关的属性，<strong>提到这是包含padding及border的属性</strong>，那么在有border的情况下，前面的例子就会有一定的变化；为了避免因为border及padding带来的影响，建议使用本身的属性来带入程序（因为一般样式属性写在样式表中，那么就会用到之前学到的currentStyle活getComputeStyle属性了）；</li>
<li>任意值运动框架：一套运动框架能控制几乎所有的属性变化，其包含三个属性：作用对象、作用属性、变化值；</li>
</ul>
<h4 id="代码及实例"><a href="#代码及实例" class="headerlink" title="代码及实例"></a>代码及实例</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/mEqNoE/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/mEqNoE/" target="_blank" rel="external">JavaScript17</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-16"><a href="#测试题-16" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的知识，制作如下一个小程序：</p>
<blockquote>
<ol>
<li>自己重写一个完美运动框架；</li>
<li>利用这个框架来改变不同的样式，但是别包括上面已经写过的长度、宽度或者透明度；</li>
<li>给对象加上border属性后检查效果是否仍然相符。</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS运动应用-02》"><a href="#《JS运动应用-02》" class="headerlink" title="《JS运动应用-02》"></a>《JS运动应用-02》</h3><h4 id="关键词：仿flash运动"><a href="#关键词：仿flash运动" class="headerlink" title="关键词：仿flash运动"></a>关键词：仿flash运动</h4><ul>
<li>仿flash运动：这个小程序结合了近几节课所学的知识点，非常值得联系，具体的实现过程如下：<ol>
<li>左右按钮移入移出显示隐藏；（包括在左右键上）；</li>
<li>点击小图能起到切换大图的功能（更改大图的Zindex–写在行间为Zindex，写在样式表中为Z-index，缓冲运动改高度）；切换之前需要判断切换到的是否为当前，如果为当前则不发生变化；</li>
<li>点击时，小图除切换功能外还会变成不透明；所有的小图移入移出透明度都有变化，但是当前图片移出时不变化；</li>
<li>增加左右按钮点击时大图切换的功能；（第一张图及最后一张图的时候则开始自循环）</li>
<li>点击左右按钮时除了大图要切换，小图也需要滚动，而且也要注意第一张及最后一张的特殊情况；</li>
<li>增加自动播放的功能，也加入鼠标移入移出时的消除启动播放；</li>
</ol>
</li>
</ul>
<h4 id="实例及代码-16"><a href="#实例及代码-16" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="769" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/grorbK/?height=769&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/grorbK/" target="_blank" rel="external">JavaScript18</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<blockquote>
<p>注：</p>
<ol>
<li>本程序实现的过程中没有利用课程中所讲到的利用Z-index属性的叠加，而是利用了之前课程中学到的轮播，效果算是各有特色；</li>
<li>实现的过程中发现布局对JS的影响非常大，第一次跟着课程实现效果的时候因为CSS还学习的很糟糕，所以就知识重写了JS部分，这次再重写的时候，写到CSS才发现为什么用到Z-index，以及不用也行的道理；</li>
<li>实践出真知。</li>
</ol>
</blockquote>
<h4 id="测试题-17"><a href="#测试题-17" class="headerlink" title="测试题"></a>测试题</h4><p>根据这节课所学到的知识点，完成下面的小程序：</p>
<blockquote>
<ol>
<li>利用Z-index或者我上面使用的轮播的形式重写一次这个程序，巩固学习效果；</li>
<li>所重写的程序应该具有上面提到的所有功能；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS运动中级》"><a href="#《JS运动中级》" class="headerlink" title="《JS运动中级》"></a>《JS运动中级》</h3><h4 id="关键词：链式运动（土豆提示栏）、完美运动框架（新浪微博）"><a href="#关键词：链式运动（土豆提示栏）、完美运动框架（新浪微博）" class="headerlink" title="关键词：链式运动（土豆提示栏）、完美运动框架（新浪微博）"></a>关键词：链式运动（土豆提示栏）、完美运动框架（新浪微博）</h4><ul>
<li>链式运动：完成一个运动之后，开始另一个运动。原理即为在原来的运动框架中加入一个函数参数，即在动作完成的部分加入一条新的语句；</li>
<li>完美运动：结合json及运动框架，构建一个完美运动框架，能同时改变多个属性值；（注意：在同时改变多个属性值的时候，需要所有值都达到目标值后才能关闭定时器）；</li>
</ul>
<h4 id="实例及代码-17"><a href="#实例及代码-17" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/groGqv/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/groGqv/" target="_blank" rel="external">JavaScript19</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<blockquote>
<p>注：</p>
<ol>
<li>本例为完美运动框架的简单运用，这个运动框架能满足多个元素属性值的同时改变直到所有的属性值都达到目标值才停止；</li>
</ol>
</blockquote>
<h4 id="测试题-18"><a href="#测试题-18" class="headerlink" title="测试题"></a>测试题</h4><p>根据这节课所学到的完美运动框架，写出下面一个小程序：</p>
<blockquote>
<ol>
<li>形式如新浪微博的新消息发布；</li>
<li>点击发布后，公告栏则会生成输入的信息；</li>
<li>信息显示按时间排布，最新的消息显示在最上端；</li>
<li>新生成消息的过程加上完美运动框架，达到高度缓慢撑开，透明度逐渐增加的效果；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS事件基础》"><a href="#《JS事件基础》" class="headerlink" title="《JS事件基础》"></a>《JS事件基础》</h3><h4 id="关键词：event对象、document、事件流（事件冒泡）、鼠标事件、keyCode、其他属性"><a href="#关键词：event对象、document、事件流（事件冒泡）、鼠标事件、keyCode、其他属性" class="headerlink" title="关键词：event对象、document、事件流（事件冒泡）、鼠标事件、keyCode、其他属性"></a>关键词：event对象、document、事件流（事件冒泡）、鼠标事件、keyCode、其他属性</h4><ul>
<li>event对象：事件对象，应用在IE6-8及高版本的chrome浏览器，在低版本的chrome浏览器及Firefox中需要用到一个参数：ev，在调用函数时，系统就将这个参数传给函数；为了解决这个兼容问题，可以用一个“或”的表达式，例如：<code>var oEvent=event||ev;</code>，然后调用的时候，直接用oEvent就好了；</li>
<li>document：包含整个页面的内容，上至&lt;!DOCTYPE html&gt;，下至;如果需要给整个页面加点击事件，应该加在document上而不是body上，因为body的范围由它所包含的内容决定；</li>
<li>事件流：最简单的一个事件流的例子——事件冒泡（一般会带来一些困扰，所以很多时候需要取消冒泡：通过事件对象来解决——<code>oEvent.cancelBubble=true;</code>，典型的例子为仿select下拉框）；</li>
<li>鼠标事件：鼠标坐标，clientX及clientY(表示的是可视区的坐标，所有如果有滚动的时候需要加上scrollTop和scrollLeft)；</li>
<li>keyCode：表示键盘上按键的键码，按键事件为onkeydown及onkeyup；（按键卡顿现象：照顾特殊人群，但是会造成不好的影响，解决方案为将事件加上setInterval函数来将延迟给掩饰掉，按键抬起时清除定时器）；</li>
<li>其他属性：ctrlKey，shiftKey、altKey，使用的时候都需要结合事件对象，例如：<code>oEvent.ctrlKey</code>；</li>
</ul>
<h4 id="实例及代码-18"><a href="#实例及代码-18" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/EyQxLk/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/EyQxLk/" target="_blank" rel="external">JavaScript20</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<blockquote>
<p>注：</p>
<ol>
<li>在输入框中输入任意字符；</li>
<li>鼠标点击enter或者直接用键盘enter；</li>
<li>移动鼠标就能按到效果，输入的字符越多，效果越明显；</li>
<li>如果未输入任何字符，那么将会提示输入；</li>
</ol>
</blockquote>
<h4 id="测试题-19"><a href="#测试题-19" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的鼠标及键盘事件，写出下面一个小程序：</p>
<blockquote>
<ol>
<li>能通过鼠标及键盘控制一个div的运动；</li>
<li>需要将scroll因素考虑在移动的范围内；</li>
<li>需要避免连续按住不放时产生的卡顿现象（利用定时器）；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS事件中级》"><a href="#《JS事件中级》" class="headerlink" title="《JS事件中级》"></a>《JS事件中级》</h3><h4 id="关键词：默认行为、拖拽"><a href="#关键词：默认行为、拖拽" class="headerlink" title="关键词：默认行为、拖拽"></a>关键词：默认行为、拖拽</h4><ul>
<li>默认行为：浏览器自带的一些行为，有些时候需要阻止系统自带的默认行为，加上自己设置的行为；（比如右键菜单-oncontextmenu）<ol>
<li>阻止右键菜单：需要阻止时，直接oncontexmenu函数返回为false即可；自己设置一个菜单，并且在鼠标右键的时候改变display属性，将定制菜单的位置改为鼠标的位置，然后在页面空白处点击的时候（给document加上onclick事件）将定制菜单栏收回；</li>
<li>设置一个只能输入数字的输入框：默认时，在输入框按下按键则会在输入框显示相应字符或者操作。这也是一种默认行为，当onkeydown事件返回为false的时候，则能阻止这种默认行为。结合keyCode和阻止这种默认事件的功能，则可以设计一个能输入数字及特定按钮（如方向键及退格键）功能的小程序；</li>
</ol>
</li>
<li>拖拽：保证鼠标的位置及被拖动元素的相对位置不变，需要注意的点如下：<ol>
<li>应该是只有杂鼠标按下之后才能移动，鼠标抬起时移动停止；</li>
<li>对于鼠标快速移动时可能移出元素范围带来的移动异常，将移动事件加在document上即可解决；</li>
<li>当移动出视窗时释放鼠标按键，仍然能够移动，为了解决这个问题，需要将鼠标释放按钮事件也加在document上；</li>
<li>在Firefox中拖拽空元素的时候会出现重影，这也是FF中的一种默认事件，可以用返回false的方法来组织这个bug；</li>
<li>被拖拽元素被拖出视窗范围，这时候就可以判断来阻止元素被拖出视窗；</li>
</ol>
</li>
</ul>
<h4 id="实例及代码-19"><a href="#实例及代码-19" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/zBRKYz/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/zBRKYz/" target="_blank" rel="external">JavaScript21</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-20"><a href="#测试题-20" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的内容，制作一个小程序：</p>
<blockquote>
<ol>
<li>在整个页面组织右键菜单的默认属性；</li>
<li>自己定制一个菜单栏，里面可以包括一些链接之类的；</li>
<li>页面空白处单击则菜单栏消失；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS事件高级应用-01》"><a href="#《JS事件高级应用-01》" class="headerlink" title="《JS事件高级应用-01》"></a>《JS事件高级应用-01》</h3><h4 id="关键词：事件绑定、高级拖拽"><a href="#关键词：事件绑定、高级拖拽" class="headerlink" title="关键词：事件绑定、高级拖拽"></a>关键词：事件绑定、高级拖拽</h4><ul>
<li>事件绑定：attachEvent(name, function)，可以将多个函数加到同一个事件上，在chrome及FF上不兼容，为了兼容需要用到addEventListener（name，function，false）（此属性也不兼容IE9以下的IE浏览器）。所以为了都兼容，应该使用一个判断函数整合这个属性的不同写法，但是要注意addEventListerner属性中的事件是没有“on”的（具体写法可见实例）；</li>
<li>高级拖拽：新增功能———— 1.不拖出父级div或者其他指定对象的区域；2.边缘吸附；3.利用事件捕获来解决在低版本IE下拖拽时会选中文字的问题，setCapture（只兼容IE，功能是将页面的所有事件都集中在加了事件捕获的对象上），与之相应的为releaseCapture，即解除对象的捕获；</li>
</ul>
<h4 id="代码及实例-1"><a href="#代码及实例-1" class="headerlink" title="代码及实例"></a>代码及实例</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/qNoPxz/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/qNoPxz/" target="_blank" rel="external">JavaScript22</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p>这个小程序所具有的功能：</p>
<blockquote>
<ol>
<li>事件绑定，点击内部的div后会弹出两次会话框；</li>
<li>可以在指定外框自由移动；</li>
<li>不会产生移动时文字的选中；</li>
<li>兼容低版本的IE浏览器；</li>
</ol>
</blockquote>
<h4 id="测试题-21"><a href="#测试题-21" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的内容，重写事件绑定及完美拖拽的小程序，特别注意以下两点：</p>
<blockquote>
<ol>
<li>兼容性问题；</li>
<li>代码重用性；</li>
</ol>
</blockquote>
<hr>
<h3 id="《JS事件高级应用-02》"><a href="#《JS事件高级应用-02》" class="headerlink" title="《JS事件高级应用-02》"></a>《JS事件高级应用-02》</h3><h4 id="关键词：带框拖拽、自定义滚动条"><a href="#关键词：带框拖拽、自定义滚动条" class="headerlink" title="关键词：带框拖拽、自定义滚动条"></a>关键词：带框拖拽、自定义滚动条</h4><ul>
<li>带框拖拽：预先设置一个样式，按下鼠标产生一个div并赋予样式，div的大小与框相同，位置与框相同，移动时只移动框，松开鼠标时才移动框，并且将产生的div移出；</li>
<li>自定义滚动条：控制对象的大小、透明度、文字滚动等；</li>
</ul>
<h4 id="代码及实例-2"><a href="#代码及实例-2" class="headerlink" title="代码及实例"></a>代码及实例</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/wWmQjx/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/wWmQjx/" target="_blank" rel="external">JavaScript23</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p>这个小程序具有的功能：</p>
<blockquote>
<ol>
<li>利用滚动条能控制div的大小；</li>
<li>div具有带框移动的功能；</li>
</ol>
</blockquote>
<h4 id="测试题-22"><a href="#测试题-22" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的知识，制作一个自定义的滚动条：</p>
<blockquote>
<ol>
<li>自定义滚动条样式；</li>
<li>能实现通过滚动来控制文字上下翻转的功能；</li>
</ol>
</blockquote>
<hr>
<h3 id="《Ajax基础》"><a href="#《Ajax基础》" class="headerlink" title="《Ajax基础》"></a>《Ajax基础》</h3><h4 id="关键词：服务器、字符集编码、缓存、eval、Ajax原理"><a href="#关键词：服务器、字符集编码、缓存、eval、Ajax原理" class="headerlink" title="关键词：服务器、字符集编码、缓存、eval、Ajax原理"></a>关键词：服务器、字符集编码、缓存、eval、Ajax原理</h4><ul>
<li>服务器：有两种含义：一个管理资源并为用户提供服务的计算机软件，通常分为文件服务器（能使用户在其它计算机访问文件），数据库服务器和应用程序服务器；运行以上软件的计算机，或称为网络主机（Host）。（我自己用的服务器程序为XAMPP）</li>
<li>字符集编码：把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递；</li>
<li>缓存：存储在本地电脑中的资料，通过url来识别是否为同一网站，所以为了避免缓存带来不好的影响，可以通过加上一个时间戳的方式来解决这个问题；</li>
<li>eval：将语句解析成js能够识别的内容；</li>
<li>Ajax原理：<ol>
<li>http请求分为两种方式： get方式及post方式；前者提交的数据直接加在网址上，而后者通过http content传递；前者长度有限制（容量小，不适合传输数据），后者可传输容量较大的数据；前者安全性较差，后者安全性较好；前者有缓存，后者无缓存；因此前者适合获取数据，后者适合上传数据；</li>
</ol>
</li>
</ul>
<h4 id="代码及实例-3"><a href="#代码及实例-3" class="headerlink" title="代码及实例"></a>代码及实例</h4><p>由于本节需要用到本地服务器，因此这里就不上传实例了。</p>
<h4 id="测试题-23"><a href="#测试题-23" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的内容，完成小程序：</p>
<blockquote>
<ol>
<li>搭建本地服务器（我自己用的是XAMPP);</li>
<li>结合已有的ajax文件（如果自己不会写，可参照下节内容中的源代码），新建一个html及txt文本来创建一个实时更新显示内容的页面（通过按钮）；</li>
</ol>
</blockquote>
<hr>
<h3 id="《Ajax中级》"><a href="#《Ajax中级》" class="headerlink" title="《Ajax中级》"></a>《Ajax中级》</h3><h4 id="关键词：编写Ajax对象、接收状态值、onreadystatechange、responseText"><a href="#关键词：编写Ajax对象、接收状态值、onreadystatechange、responseText" class="headerlink" title="关键词：编写Ajax对象、接收状态值、onreadystatechange、responseText"></a>关键词：编写Ajax对象、接收状态值、onreadystatechange、responseText</h4><ul>
<li>编写Ajax对象：<ol>
<li>创建Ajax对象；</li>
<li>连接到服务器；</li>
<li>发送请求；</li>
<li>接收返回值；</li>
</ol>
</li>
<li>注意：在JS中利用没有定义的变量时会弹出错误，而利用没有定义的属性时则会提示undifined；</li>
<li>接收状态值（readyState）：<ol>
<li>0 （未初始化）还没有调用open（）方法；</li>
<li>1 （载入）已调用send（）方法，正在发送请求；</li>
<li>2 （载入完成）send（）方法完成，已收到全部相应内容；</li>
<li>3 （解析）正在解析相应内容；</li>
<li>4 （完成）相应内容解析完成，可以在客户端调用了；</li>
</ol>
</li>
<li>http状态码（status）：最常见的为200，表示读取成功；</li>
<li>onreadystatechange: 表示返回状态；</li>
<li>responseText: 读取的文件内容；</li>
</ul>
<h4 id="实例及代码-20"><a href="#实例及代码-20" class="headerlink" title="实例及代码"></a>实例及代码</h4><p>由于本节也需要在本地服务器运行，所以只能讲代码贴出来，ajax代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params">url, fnsucc, fnfail</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. Set a new ajax object:</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">        <span class="keyword">var</span> oAjax=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> oAjax=<span class="keyword">new</span> ActivaXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Get connected:</span></span><br><span class="line">    oAjax.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. Send the request:</span></span><br><span class="line">    oAjax.send();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. Get data back:</span></span><br><span class="line">    oAjax.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oAjax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(oAjax.status==<span class="number">200</span>)&#123;</span><br><span class="line">                fnsucc(oAjax.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fnfail)&#123;</span><br><span class="line">                    fnfail(oAjax.status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="测试题-24"><a href="#测试题-24" class="headerlink" title="测试题"></a>测试题</h4><p>由于本节所学的内容比较单一，所以根据本节所学的内容自己手写一个完整的Ajax程序。</p>
<hr>
<h3 id="《JS面向对象基础-01》"><a href="#《JS面向对象基础-01》" class="headerlink" title="《JS面向对象基础-01》"></a>《JS面向对象基础-01》</h3><h4 id="关键词：面向对象、对象组成、this、object对象、构造函数、工厂方式、"><a href="#关键词：面向对象、对象组成、this、object对象、构造函数、工厂方式、" class="headerlink" title="关键词：面向对象、对象组成、this、object对象、构造函数、工厂方式、"></a>关键词：面向对象、对象组成、this、object对象、构造函数、工厂方式、</h4><ul>
<li>面向对象：对象是一个整体，对外提供一些操作；面向对象指的是使用对象时只关注对象提供的功能，而不关注其内部细节；（这是一种通用思想，而非只在编程中适用）</li>
<li>JS中面向对象：简称OOP，具有以下三个特点：<ol>
<li>抽象：抓住主要问题；</li>
<li>封装：不考虑内部实现，只考虑功能使用；</li>
<li>继承：从已有对象上，继承出新的对象，可以最大限度重用现有代码，包括多重继承（继承多个对象的功能）和多态；</li>
</ol>
</li>
<li>对象组成：包括方法和属性<ol>
<li>方法：和函数类似，函数是自由的，但方法具有归属的对象，这两者都是过程量，是动态的；</li>
<li>属性：和变量类似，变量时自由的，但属性具有归属的对象，这两者都是状态量，是静态的；</li>
</ol>
</li>
<li>this：当前的方法属于谁就指向谁；</li>
<li>注意：不能在系统对象中随意附加方法、属性，否则会覆盖已有方法、属性；</li>
<li>object对象：空白对象；</li>
<li>构造函数：用于构造一个对象的函数，功能与普通函数一样；</li>
<li>工厂方式：创建空白对象，加工对象，返回对象；缺点：创建时没有’new’，函数重复导致资源浪费；</li>
</ul>
<h4 id="实例及代码-21"><a href="#实例及代码-21" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="304" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/WxJQmL/?height=304&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/WxJQmL/" target="_blank" rel="external">JavaScript26</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-25"><a href="#测试题-25" class="headerlink" title="测试题"></a>测试题</h4><p>用工厂方式重写一个面向对象的程序。</p>
<hr>
<h3 id="《JS面向对象基础-02》"><a href="#《JS面向对象基础-02》" class="headerlink" title="《JS面向对象基础-02》"></a>《JS面向对象基础-02》</h3><h4 id="关键词：new、原型-prototype-、类和对象、对象命名规范"><a href="#关键词：new、原型-prototype-、类和对象、对象命名规范" class="headerlink" title="关键词：new、原型(prototype)、类和对象、对象命名规范"></a>关键词：new、原型(prototype)、类和对象、对象命名规范</h4><ul>
<li>new：通过new+构造函数来构造对象，可以理解为“new”会先通过系统在函数内部创建<code>var this=new Object()</code>这个对象，然后在最后的时候又自动返回<code>return this</code>这个对象，这样理解之后，面向对象的方式和工厂方式原理上也是一样的；</li>
<li>原型(prototype)：可以理解为css中的class， 能够同时给多个对象加方法；</li>
<li>类和对象：前者不具备实际功能，而后者具有，它们之间的关系就相当于模子和产品的关系；为了同时给多个对象加方法，那么就需要在类上面加原型，既可以给系统对象加也可以在创建的对象加；</li>
<li>注意：用构造函数加属性，用原型加方法。区别于工厂方式，这种方式叫做混合的构造函数/原型方式，简称混合方式构造对象；</li>
<li>对象命名规范：为了和系统对象保持一致，自己构造出来的对象命名时最好也保持首字母大写；</li>
</ul>
<h4 id="实例及代码-22"><a href="#实例及代码-22" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/OXkrVB/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/OXkrVB/" target="_blank" rel="external">JavaScript27</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-26"><a href="#测试题-26" class="headerlink" title="测试题"></a>测试题</h4><p>用混合方式重写一个面向对象的小程序。</p>
<hr>
<h3 id="《JS面向对象实例》"><a href="#《JS面向对象实例》" class="headerlink" title="《JS面向对象实例》"></a>《JS面向对象实例》</h3><h4 id="关键词：将面向过程的函数改写成面向对象的形式"><a href="#关键词：将面向过程的函数改写成面向对象的形式" class="headerlink" title="关键词：将面向过程的函数改写成面向对象的形式"></a>关键词：将面向过程的函数改写成面向对象的形式</h4><ul>
<li>改写：<ol>
<li>不能有函数嵌套，但可以有全局变量；</li>
<li>将onload改写成构造函数，将全局变量改写成属性，将函数改写成方法；</li>
<li>debug，主要容易出现在this、事件、闭包及传参上；</li>
</ol>
</li>
</ul>
<h4 id="代码及实例-4"><a href="#代码及实例-4" class="headerlink" title="代码及实例"></a>代码及实例</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/jAxqQa/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/jAxqQa/" target="_blank" rel="external">JavaScript28</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-27"><a href="#测试题-27" class="headerlink" title="测试题"></a>测试题</h4><p>按照这节课所学的内容，利用面向对象的方式重写选项卡或者之前写过的任何一个程序。</p>
<hr>
<h3 id="《JS面向对象高级》"><a href="#《JS面向对象高级》" class="headerlink" title="《JS面向对象高级》"></a>《JS面向对象高级》</h3><h4 id="关键词：Json方式、命名空间、继承、call、引用、系统对象"><a href="#关键词：Json方式、命名空间、继承、call、引用、系统对象" class="headerlink" title="关键词：Json方式、命名空间、继承、call、引用、系统对象"></a>关键词：Json方式、命名空间、继承、call、引用、系统对象</h4><ul>
<li>Json方式面对对象：用Json的方式来实现对象虽然比较简单，但是如果对象超过一个，那么又回到了之前写对象的方法。这种方式也有人叫做单体方式。</li>
<li>命名空间：在不同的Json中写具有相同名字的函数，可以让具有相同名字的函数同时工作；</li>
<li>继承：能够继承父级的属性和方法；</li>
<li>call：通过call的方式调用属性时，如果call传入的参数，则参数会替换掉函数中的this；</li>
<li>引用：通过<code>=</code>号使数组、方法或者其他相等的时候，系统会将等号两边指向同一内存位置，所以不管是针对谁做出改变，最终的结果是两者都会发生改变。比如：有两个数组A和B，其中A中有1，2，3，三个变量，又有A=B，这时候如果在B中push一个变量4，那么数组A中也会存在这个变量。为了解决这个问题，可以利用循环将A中的变量一个个都push到数组B中；</li>
<li>总结：属性的继承利用call，方法的继承利用循环；</li>
<li>系统对象：本地对象（非静态对象，如Object/Function/Array/String等），内置对象（静态对象，如Global/Math）,宿主对象（由浏览器提供，如BOM/DOM）；</li>
</ul>
<h4 id="实例及代码-23"><a href="#实例及代码-23" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="265" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/WxJpzZ/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/WxJpzZ/" target="_blank" rel="external">JavaScript29</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-28"><a href="#测试题-28" class="headerlink" title="测试题"></a>测试题</h4><p>利用继承的特点，用面向对象的方式重写拖拽的小程序。</p>
<hr>
<h3 id="《BOM应用》"><a href="#《BOM应用》" class="headerlink" title="《BOM应用》"></a>《BOM应用》</h3><h4 id="关键词：BOM基础"><a href="#关键词：BOM基础" class="headerlink" title="关键词：BOM基础"></a>关键词：BOM基础</h4><ul>
<li>BOM基础：<ol>
<li>window.open(a, b) 打开新的页面，b表示是打开的新窗口是显示在本页还是新的页面；</li>
<li>window.close() FF中不能用这个去关闭非脚本打开的窗口；</li>
<li>document.write() 先清空，然后写入；</li>
<li>window.navigator.userAgent 表示的是浏览器的类型及版本；</li>
<li>window.location 表示当前页面的地址；</li>
<li>document.documentElement.clientWidth及document.documentElement.clientHeight：表示可视区的宽度及高度；</li>
<li>document.documentElement.scrollTop(IE)及document.body.scrollTop（chrome）：表示滚动条高度；</li>
<li>window.onscroll及window.onresize分别表示在页面滚动及更改窗口尺寸时发生的事件；</li>
<li>alert/confirm/prompt: 系统对话框；</li>
</ol>
</li>
</ul>
<h4 id="代码及实例-5"><a href="#代码及实例-5" class="headerlink" title="代码及实例"></a>代码及实例</h4><iframe height="250" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/dXZRXY/?height=250&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/dXZRXY/" target="_blank" rel="external">JavaScript30</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-29"><a href="#测试题-29" class="headerlink" title="测试题"></a>测试题</h4><p>由于本节课所学的大部分为基础知识，应用都较简单，所以可重写上例中的小程序，巩固知识点。</p>
<hr>
<h3 id="《COOKIES基础与应用》"><a href="#《COOKIES基础与应用》" class="headerlink" title="《COOKIES基础与应用》"></a>《COOKIES基础与应用》</h3><h4 id="关键词：cookie、setDate-、读取cookie、删除cookie"><a href="#关键词：cookie、setDate-、读取cookie、删除cookie" class="headerlink" title="关键词：cookie、setDate()、读取cookie、删除cookie"></a>关键词：cookie、setDate()、读取cookie、删除cookie</h4><ul>
<li>cookie：<ol>
<li>页面用来保存信息；</li>
<li>同一个网站共享一套cookie；</li>
<li>数量、大小有限（一般数量小于50，大小不超过4k或10k）；</li>
<li>有过期时间；（expires）</li>
<li>使用方式<code>document.cookie=&#39;name=value&#39;</code>;</li>
</ol>
</li>
<li>setDate(): 相对于getDate()获取系统时间，setDate()能够设置对象的时间；</li>
<li>读取cookie：需要利用字符串分割，具体见例子；</li>
<li>删除cookie：设置需要删除的cookie的有效期为’-1’即可；</li>
</ul>
<h4 id="实例及代码-24"><a href="#实例及代码-24" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="224" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/WxJOBL/?height=224&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/WxJOBL/" target="_blank" rel="external">JavaScript31</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-30"><a href="#测试题-30" class="headerlink" title="测试题"></a>测试题</h4><p>在FireFox浏览器的环境下尝试使用cookie的相关功能，具体写法可参考上面的实例。</p>
<hr>
<h3 id="《JS中的正则表达式》"><a href="#《JS中的正则表达式》" class="headerlink" title="《JS中的正则表达式》"></a>《JS中的正则表达式》</h3><h4 id="关键词：正则基础、正在表达式、写法、match、replace、元字符、转义字符、量词、test"><a href="#关键词：正则基础、正在表达式、写法、match、replace、元字符、转义字符、量词、test" class="headerlink" title="关键词：正则基础、正在表达式、写法、match、replace、元字符、转义字符、量词、test"></a>关键词：正则基础、正在表达式、写法、match、replace、元字符、转义字符、量词、test</h4><ul>
<li>正则基础：了解正则表达式需要从字符串操作开始，最常见的字符串操作如下<ol>
<li>name.search(a): 表示的是在name中查找a，并返回a的位置；如果不存在则返回-1；</li>
<li>name.substring(value1, value2): 表示在name中截取从第value1到value2（不包括结束位置）的字符；如果只给一个参数，则返回至最后一位；</li>
<li>name.charAt(value): 表示获取字符串的某一位；</li>
<li>name.split(s):利用s来切分name，其中s可以是字符串或者符号；</li>
</ol>
</li>
<li>正则表达式：舶来语，表示的是一套规则，这套规则是计算机可识别的；</li>
<li>写法：JS风格（新建对象，然后使用对象），Perl风格（正则最早是出现在perl语言中）；</li>
<li>match: 提取所有复合条件的元素；<code>i</code>表示忽略大小写，<code>g</code>表示全局搜索；</li>
<li>replace：替换复合要求的元素，用法为：<code>name.replace(a, b)</code>表示将name中的a替换成b（如果有多个，则只替换第一个，除非用正则匹配全局），常用于敏感词过滤；</li>
<li>元字符：用<code>[]</code>表示，<code>[abc]</code>表示a、b、c中的任意一个，<code>[a-z]</code>表示从所有字母，数字同理。<code>[^a]</code>表示出了a；</li>
<li>转义字符：<ol>
<li>\d  表示数字                    \D  表示除了数字</li>
<li>\w  表示英文、数字和下划线       \W  表示除了英文、数字和下划线</li>
<li>\s  空白字符                    \S  表示除了空白字符</li>
<li>.   表示任意字符，很容易出错，不建议使用；</li>
</ol>
</li>
<li>量词：表示个数，用{}<ol>
<li>{n}      表示正好出现n次；</li>
<li>{n, m}   最少n次，最多m次；</li>
<li>{n, }    最少n次，最多无限；</li>
<li><ul>
<li>相当于{1，}，即最少出现1次；</li>
</ul>
</li>
<li>?       相当于{0，1}，即可有可无；</li>
<li><ul>
<li>相当于{0，}，表示可有可无，而且出现多少次都无所谓，很容易出错，不建议使用；</li>
</ul>
</li>
</ol>
</li>
<li>test：<code>reg.test(name)</code>，用于检测name是否符合reg所表示的正则，如果符合则返回true；需要注意的是，只要name一部分符合reg的要求就会返回true，这时候就需要用到<code>^</code>及<code>$</code>，分别表示行首和行尾；</li>
</ul>
<h4 id="实例及代码-25"><a href="#实例及代码-25" class="headerlink" title="实例及代码"></a>实例及代码</h4><iframe height="335" scrolling="no" src="//codepen.io/Leon-Zhao/embed/preview/WxJrPO/?height=335&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/Leon-Zhao/pen/WxJrPO/" target="_blank" rel="external">JavaScript32</a> by Leon (<a href="http://codepen.io/Leon-Zhao" target="_blank" rel="external">@Leon-Zhao</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h4 id="测试题-31"><a href="#测试题-31" class="headerlink" title="测试题"></a>测试题</h4><p>根据本节所学的正则表达式，制作一个这样的小程序：</p>
<blockquote>
<ol>
<li>能够识别输入的数字是否为电话号码；</li>
<li>如果不是电话号码则弹出“输入的不是电话号码”；</li>
<li>如果符合要求则弹出“输入成功”。</li>
</ol>
</blockquote>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;从开始学习这门课程到今天正好两个月。当时虽然也已经花了将近一个月的时间去学习JS，但还是感觉很茫然，直到开始学习这门课程。最初是看视频跟着老师的讲解一步一步的写程序，学习完一遍以后，自知很多知识点掌握的还不是很牢固，然后果断作出了复习一遍，重写所有程序的决定。复习的时候，先是重新看一遍老师的讲解，巩固基础知识，然后将当节课的知识点尽量综合起来放在一个程序里面重写出来，这个过程就是举一反三的过程。举几个例子：</p>
<blockquote>
<ol>
<li>第五节课制作日历，第一遍写的时候没有写任何布局相关的内容，重写时所有的css、js和html都是独立完成；</li>
<li>第九节课制作超酷时钟，同样关系到布局问题，而且首次结合图床来写程序；</li>
<li>第十三节课DOM高级应用，将这节课中所学的所有功能都集中在了一起，并且增加了按要求排序这个课程中并没有讲到的功能，而且没有bug；</li>
<li>第十八节课仿flash运动，这个小程序是目前写过的功能最多的程序了，而且实现过程并非照搬老师的讲解，实现的效果也基本一致；</li>
<li>……</li>
</ol>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;在复习的过程中，对知识点的理解和掌握程度远远超过第一次学习。这个过程中积攒了些许经验，希望能和大家分享：</p>
<blockquote>
<ol>
<li>写程序之前先理清逻辑关系，否则debug的时候很难发现问题；</li>
<li>动手写比脑子想更重要，看似很简单很套路的知识点，如果自己不去套路一遍，这个套路就不属于你；</li>
<li>有足够的耐心。debug是个很烦人却又很让人兴奋的过程，程序成功运行的瞬间，所有debug的烦恼都消失了；</li>
<li>善用搜索引擎。前端发展了这么多年，我们所踩得坑前人都已经踩烂了，只要有疑问，直接搜关键词基本上都能搜出相关的博客或者问题；</li>
<li>不要好高骛远。基础知识永远不会过时。</li>
</ol>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;毋庸置疑，本课程非常适合新手学习，但同时也不难发现课程中很少触及真正基础的知识，而且后面还有一部分内容并没有讲到。下一步，我将通过书本继续巩固基础知识，同时开始学习JS框架，准备开始做几个简单的项目。这些内容都会在之后的博客中更新。<br>&nbsp;&nbsp;&nbsp;&nbsp;最后，作为一个初学者，我深知在学习过程中的种种疑惑和迷茫，即使在现在，这份心情依然存在。然而，只要不放弃努力，就始终在进步，目标终将会越来越近。<br> </p><h4>&nbsp;&nbsp;&nbsp;&nbsp;<em> The world is a fine place and worth fighting for !</em></h4><p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML和css基础知识汇总（长期更新）]]></title>
      <url>http://detachment.club/2016/06/30/HTML%E5%92%8CCSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><ul>
<li>HTML 指的是超文本标记语言 (Hyper Text Markup Language)；</li>
<li>HTML 不是一种编程语言，而是一种标记语言 (markup language)；</li>
<li>标记语言是一套标记标签 (markup tag)；</li>
<li>HTML使用标记标签来描述网页；</li>
</ul>
<a id="more"></a>
<h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><ul>
<li>HTML：Hyper Text Markup Language；</li>
<li>标签：h1-h6; p; a; img; hr; strong; big; small; em; i; sub; sup; pre; code; kbd; tt; samp; var; address; abbr; acronym; bdo; blockquote; q; del; ins; map; area; table; tr; td; th; caption; thead; tbody; tfoot; dl; dt; dd; span; form; input; select ; option; textarea; fieldset; legend; optgroup; frameset(不与body同用); iframe; frameborder; object; embed; audio; video;</li>
<li>属性：align; bgcolor; dir；text-decoration; target; name; alt; background; align; rowspan; colspan; cellpadding; cellspacing; frame; raido; checkbox; action; method; selected; rows; cols; label; noresize;</li>
</ul>
<blockquote>
<p>HTML5部分网站上讲的太笼统了，之后在做项目的过程中再做具体的了解，其中canves这个属性被广泛应用；这两天把html和css复习一遍之后开始复习js，同时开始看书+做项目+写博客。按照这种速度的话,下个月底之前应该能够取得很大的进步。</p>
</blockquote>
<h2 id="CSS-部分"><a href="#CSS-部分" class="headerlink" title="CSS 部分"></a>CSS 部分</h2><h3 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h3><ul>
<li>CSS 指层叠样式表 (Cascading Style Sheets);</li>
<li>样式定义如何显示 HTML 元素;</li>
<li>样式通常存储在样式表中;</li>
<li>把样式添加到HTML4.0中，是为了解决内容与表现分离的问题;</li>
<li>外部样式表可以极大提高工作效率;</li>
<li>外部样式表通常存储在 CSS 文件中;</li>
<li>多个样式定义可层叠为一。</li>
</ul>
<h3 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h3><ul>
<li><strong>派生选择器</strong>：也被称为上下文选择器（contextual selector），根据元素在其位置的上下文关系来定义样式，是的标记更简洁；</li>
<li><strong>id选择器</strong>：用“#”来定义 （注意：id属性只能在每个HTML文档中出现一次）</li>
<li><strong>类选择器</strong>：以一个“.”显示；</li>
<li><strong>属性选择器</strong>：以“[属性]”的方式显示；（还有属性和值选择器）– 对于属性值有多重不同的选择方式，具体可参照w3school上的说明；</li>
<li><strong>背景</strong>：背景色；背景图像（不能继承）；背景重复（background-repeat）；背景定位（background-position–主要是针对当背景是图像的时候使用，如果只出现一个位置信息，则另一个默认为center）；背景关联（background-attachment，可将背景图像固定在可视区域）；</li>
<li><strong>文本</strong>：缩进文本（text-indent：一般来说，可以为所有块级元素应用text-indent，但无法将该属性应用于行内元素，图像之类的替换元素上也无法应用 text-indent 属性。不过，如果一个块级元素（比如段落）的首行中有一个图像，它会随该行的其余文本移动。如果想把一个行内元素的第一行“缩进”，可以用左内边距或外边距创造这种效果。它的值可为<strong>负数或者百分比</strong>。此属性可继承。）；水平对齐（text-align：justify可实现两端对齐——谨慎使用，因为各浏览器增加空间的方式不同造成效果各异；文字间隔（word-spacing）；字母间隔（letter-spacing）；字符转换（text-transform：uppercase、lowercase、capitalize）；文本装饰（text-decoration：underline、overline、line-through及blink；）；空白字符（white-space：pre、nowrap、pre-wrap及pre-line）；文本方向（direction：ltr、ltr；）</li>
<li><strong>字体</strong>：五种通用字体（font-family）——Serif、Sans-serif、Monospace、Cursive和Fantasy；字体风格（font-style：normal、italic和oblique）；字体变形（font-variant：小型大写字母）；字体加粗（font-weight：bold、bolder、lighter等）；字体大小（font-size：px、em和百分比，其中第一个是静态测量单位，后两者则是相对测量单位）；</li>
<li><strong>链接</strong>：链接的四种状态（link、visited、hover和active，设置时需要注意顺序问题。通过改变连接访问前后及鼠标是否悬停在链接上的属性设置的不同来达到改变样式的目的）；</li>
<li><strong>列表</strong>：列表类型（list-style-type）、列表项图像（list-style-image）、列表标志位置（list-style-position）（注意，这些属性一般都是作用在ul或者ol上的，但根据网站上的例子可以知道有时——比如list-style-image也可以施加到list上。）</li>
<li><strong>表格</strong>：表格边框（border），折叠边框（border-collapse：将表格边框折叠为单一边框），表格文本对齐（水平方向：text-align；垂直对齐方式：vertical-align），表格内边距（padding），表格颜色（background-color）；</li>
<li><strong>轮廓</strong>：（outline，区别于border，轮廓指的是边缘外框的外围，可以起到突出元素的作用。）</li>
<li><strong>框模型</strong>：<img src="http://www.w3school.com.cn/i/ct_boxmodel.gif" alt="image">元素框的最内部分是实际的内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距，外边距默认是透明的，因此不会遮挡其后的任何元素。背景应用于由内容和内边距、边框组成的区域。内边距、边框和外边距都是可选的，默认值是零。但是，许多元素将由用户代理样式表设置外边距和内边距。在 CSS 中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</li>
<li><strong>内边距（padding）</strong>：属性定义元素边框与元素内容之间的空白区域。CSSpadding属性定义元素的内边距。padding属性接受长度值或百分比值，<strong>但不允许使用负值</strong>。单位可以有 <a href="https://www.w3.org/Style/Examples/007/units.en.html#units" target="_blank" rel="external">EM, PX, PT, CM</a>。如果使用百分比设置的内边距，那么这个百分比的基数是<strong>其父元素的width来计算的</strong>，这一点也同样适用在外边距（而且不管是左右边距还是上下边距）。</li>
<li><strong>边框（border）</strong>：围绕元素内容和内边距的一条或多条线，允许规定元素边框的样式、宽度和颜色；CSS 规范指出，边框绘制在“元素的背景之上”。这很重要，因为有些边框是“间断的”（例如，点线边框或虚线框），元素的背景应当出现在边框的可见部分之间。CSS2 指出背景只延伸到内边距，而不是边框。后来 CSS2.1 进行了更正：元素的背景是内容、内边距和边框区的背景。边框的样式（border-style：一共有十种，效果各不相同，而且可以分别为不同的边框设置不同的样式）；边框宽度（border-width：可以指定长度或者使用thin，medium或者thick中的任意一个，但是后面这三个关键词的具体宽度可能会根据不同的用户代理有不同的值）。因此，如果希望边框出现，就必须声明一个边框样式。然后设置边框的宽度才有意义。边框的颜色（border-color）：默认的边框颜色是元素本身的前景色。如果没有为边框声明颜色，它将与元素的文本颜色相同。另一方面，如果元素没有任何文本，假设它是一个表格，其中只包含图像，那么该表的边框颜色就是其父元素的文本颜色（因为 color 可以继承）。这个父元素很可能是body、div 或另一个 table。透明边框（transparent）：CSS2引入了边框颜色值transparent。这个值用于创建有宽度的不可见边框。</li>
<li><strong>外边距（margin）</strong>：围绕在元素边框的空白区域是外边距。设置外边距会在元素外创建额外的“空白”。这个属性接受任何长度单位、百分数值甚至负值。margin的默认值是 0，所以如果没有为margin声明一个值，就不会出现外边距。但是，在实际中，浏览器对许多元素已经提供了预定的样式，外边距也不例外。块级元素的垂直相邻外边距会合并，而行内元素实际上不占上下外边距。行内元素的的左右外边距不会合并。同样地，浮动元素的外边距也不会合并。允许指定负的外边距值，不过使用时要小心。</li>
<li><strong>外边距合并</strong>：当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。除此之外，父元素与子元素之间，空块元素，也会发生合并，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">具体可参考MDN上的内容</a>。<strong>（这个点可以写一篇博客了。）</strong></li>
<li><strong>定位和浮动</strong>：1. 一切都为框-块框、行内框或者无名块框；2. css中有三种基本的定位机制——普通流、浮动和绝对定位，默认都为普通流中定位；3. 位置属性（position）：包括static、relative、absolute和fixed。具体情况可以参考<a href="http://www.w3schools.com/css/css_positioning.asp" target="_blank" rel="external">w3school上面关于position的内容</a>。<strong>这个相关内容也可以写一篇剪短的博客了，:-D。</strong></li>
<li><strong>浮动（float）</strong>：浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。<strong>浮动及浮动清除理解起来也有难度啊，搞清楚后也可以写博客了</strong>。<br>(关于浮动的博客已写，但是还是没有弄的太明白，之后再买书看吧）</li>
<li><strong>元素选择器</strong>：最常见的为元素选择器，在w3c中元素选择器也叫作类型选择器（type selector），类型选择器匹配文档语言元素类型的名称，可以匹配文档树中该元素类型的每一个实例。类型选择其也可适用在XML文档中。</li>
<li><strong>选择器分组</strong>：可以把具有同样样式的元素放在样式的左边，<strong>并且用逗号隔开</strong>，选择器的数量没有限制，可以有任意多组；如：h1，p，span { corlor：white；}；</li>
<li><strong>通配符选择器</strong>：css2中引入了一种新的简单选择器，叫做通配符选择器（universal selector），符号为*，可以与任何元素匹配；</li>
<li><strong>声明分组</strong>：对于同一个元素的不同样式，可以将样式声明在此元素后面，<strong>并用分号隔开</strong>，例如：h1 {corlor：black；background：yellow；font-size：strong；}；</li>
<li><strong>类选择器</strong>：要应用样式而不考虑具体设计的元素，最常用的方法就是使用类选择器，它允许以一种独立于文档元素的方式来指定样式；使用语法为：.className {porperty: value; };类选择器可结合元素选择器，选择出某一种元素中具有某个类名的个体，然后赋予其属性和值，例如：p.important {corlor：red；}；多类选择器指的是一个元素可以有多个类，类与类之间用空格分隔，例如：<p class="important warning">其中类名无顺序之分，通过把两个类选择器链接在一起，可以选择出同时包含这些类名的元素；</p></li>
<li><strong>ID选择器</strong>：ID选择器允许一种独立于文档元素的方式来指定样式，例如：#intro {font-size：14px；}指的是ID为intro的元素的字体大小为14px；与类选择器不同的是，ID选择器：1.只能在文档中出现一次；2. 不能结合使用；3. ID能包含更多含义；<strong>需要注意的是：选择器是区分大小写的，因此写的时候务必要注意！</strong></li>
<li><strong>属性选择器</strong>：属性选择器可以根据元素的属性及属性值来选择元素。属性选择器是在css2中引入的。如：[title] {color:red} （表示：把含有标题的所有元素变成红色）；再如：a[href] {color:red} (表示对有href属性的锚应用属性)；还可以结合起来使用，如：a[href][title] {color:red} (表示将同时具有href和title属性的锚的文本设置成红色）；除此之外，还可以规定具体的属性值，例如：<code>a[href=&quot;http://www.w3school.com.cn/about_us.asp&quot;] {color: red;}</code>（表示只有带有超链接且了解为上述的时候才会变红），而且每个属性选择器都可以对相应的属性赋值；而且需要注意，此时选择器中的属性值和必须完全匹配（注意：如果需要选择不完全匹配，则可以用约等号来选择，如：p[class~=”important”] {color: red;}）；字串匹配属性选择器，在css2完成之后发布，可以匹配属性值以某些字符串开头、结尾或者只是包含的情况，具体见<a href="http://www.w3school.com.cn/css/css_selector_attribute.asp" target="_blank" rel="external">字串属性选择器</a>; 特殊属性选择器，如<code>*[lang|=&quot;en&quot;] {color: red;}</code>，表示只选择lang属性等于en或者以en-开头的所有元素；（这种用法常见于匹配语言值）。</li>
<li><strong>后代选择器（descendant selector）</strong>，又称为包含选择器；比如<code>h1 em {color:red;}</code>，需要注意的是，后代选择器中两个元素之间的层级间隔可以是无限的（区别于后面要讲到的子元素选择器）；</li>
<li><strong>子元素选择器（Child selector）</strong>：只能选择作为某元素子元素的元素。比如下面的例子：<code>h1 &gt; strong {color:red;}</code>，子结合符为“&gt;”，结合符两边的空格是可选的；</li>
<li>相邻兄弟选择器（Adjacent sibling selector）：可选择紧接在一个元素后面的元素，且两者有相同的父元素；写法如下：<code>h1 + p {margin-top:50px;}</code>，表示的是“选择紧接在h1元素后面的段落增加边距，并且这两者有相同的父元素”；相邻兄弟选择器作用的对象是“+”号后面的元素，对前一个元素没有影响；</li>
<li><strong>伪类（Pseudo-classes）</strong>：用于向某些选择器添加特殊的效果；比如超链接中的a:link, a:visited, a:hover, a:active,(注意超链接使用伪类的时候有顺序问题）；:focus 伪类用于引起注意，一般用于<a href="http://www.w3school.com.cn/tiy/t.asp?f=csse_link_focus" target="_blank" rel="external">输入框</a>；除此之外，还有:first-child, :lang等伪类；其中:first-child伪类表示用来选择某元素的第一个子元素；</li>
<li><strong>伪元素（Pseudo-elements）</strong>：用于向某些选择器设置特殊效果；语法为：<code>selector:pseudo-element{property:value;}</code>，主要有<code>:first-line, :first-letter</code>, 在css2中引入了：<code>:before, :after</code>，表示的是在某元素前面（后面）插入新内容（这一点在清除浮动那一章节有重点应用）；</li>
<li><strong>css水平对齐</strong>：1. 使用margin属性（将左边距和右边距都设置为auto，则左右均等分配可用外边距，达到居中的效果。注意：如果宽度为100%，对齐则没有效果）；2. 利用Position属性（当使用绝对定位属性来定位时，元素将从正常流中删除，从而可能产生交叠元素）；3. 使用float属性进行左右对齐；<strong>注意：使用所有属性进行对齐时都应该声明<code>!DOCTYPE html</code>，否则在IE8及以下版本会在右侧增加17px的外边距（为滚动条预留空间）。</strong></li>
<li><strong>css尺寸（Dimension）</strong>：尺寸属性允许控制元素的高度和宽度。同样，也允许增加行间距。除了width，height之外，还有max-height，min-height，max-width，min-height，line-height等；且这些尺寸都可以用像素、百分比来设置；</li>
<li><strong>css分类（Classification）</strong>：css分类属性允许规定如何以及在何处显示元素；有inline，block等，其实就是display属性的值，然后这个值就和css的布局有很大的关联，同样影响布局的还有float以及position，它们之间的关系见我之前写的一篇博客<a href="http://detachment.club/2016/06/27/Float,%20position%20and%20display%20in%20CSS/">Float, Position and Display in CSS</a>;本节还讲到了一个很有意思的属性：cursor，用来实现不同 的光标，使用语法为<code>element {cursor:value; }</code>；</li>
<li><strong>导航栏</strong>：实现导航栏的关键在于对浮动的理解，其他属性都比较简单，实现过程可见：<a href="http://www.w3school.com.cn/css/css_navbar.asp" target="_blank" rel="external">导航条的实现</a>；</li>
<li><strong>图片库</strong>：其实也不是什么图片库，就是把相同的布局，运用在了几张尺寸一样的图片上罢了。在设定任何css属性之前，都需要认真弄清楚需求，一步一步的将布局分解到每一个<code>div</code>中，然后思考每个<code>div</code>中的布局，最终形成整体布局。</li>
<li><strong>图像透明</strong>：属性为<code>opacity; filter:alpha(opacity=value)</code>，如果需要用<code>:hover</code>属性来设置鼠标移入之后的效果，那么一定要声明<code>&lt;!DOCTYPE html&gt;</code>，否则不能应用在除了a以外的其他元素；</li>
<li><strong>css2媒介类型</strong>：媒介类型允许定义以何种媒介来提交文档，文档被显示在显示器、纸媒介或者听觉浏览器上等等；语法为<code>@media class</code>，类别中有screen、print、tv、handheld等等（然后就出现了Bootstrap的自适应？）</li>
</ul>
<blockquote>
<h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><h4 id="本文内容主要来源为w3school，相关知识点都在在此网站找到更详细的说明，本博客仅供复习总结用。"><a href="#本文内容主要来源为w3school，相关知识点都在在此网站找到更详细的说明，本博客仅供复习总结用。" class="headerlink" title="本文内容主要来源为w3school，相关知识点都在在此网站找到更详细的说明，本博客仅供复习总结用。"></a>本文内容主要来源为<a href="http://www.w3school.com.cn/index.html" target="_blank" rel="external">w3school</a>，相关知识点都在在此网站找到更详细的说明，本博客仅供复习总结用。</h4></blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Float, Position and Display in CSS]]></title>
      <url>http://detachment.club/2016/06/27/Float,%20position%20and%20display%20in%20CSS/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;目前是第二遍学习CSS，第一遍学习的时候只是看了一遍教材，当时感觉还行，但是在之后学习JS的过程中就愈发感觉到没有学好这一章节的严重性，所有在第二遍学习的时候，一定要将这个知识点彻底的弄清楚才会进入到下一阶段，这也就是为什么我会花3天的时间来弄清楚这个知识点的原因了。<br>&nbsp;&nbsp;&nbsp;&nbsp;为了搞懂这个问题，首先能想到的当然是先多看几遍教材，然后直接Google，搜索到几篇中文博客，之后在StackOverFlow上搜索与Float相关的问题，这一遍下来，搜索的资料让我看了好久，而我所理解的都将在下面的文章中通过图文来表述。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol>
<li>normal flow:<blockquote>
<p>Boxes in the normal flow belong to a formatting context, which may be block or inline, but not both simultaneously. Block-level boxes participate in a block formatting context. Inline-level boxes participate in an inline formatting context.<br>&nbsp;&nbsp;正常流：在正常流的盒子就属于格式化上下文，而这个格式化上下文可能是块级的也可能是行间的，但这两者不会同时存在。块级别的盒子参与到块级格式化上下文。行间级别的盒子参与到行间格式化上下文。</p>
</blockquote>
</li>
<li>relative positioning:<blockquote>
<p>Once a box has been laid out according to the normal flow or floated, it may shifted relative to this position. This is called relative positioning.<br>&nbsp;&nbsp;相对定位：如果一个盒子按照正常流或者浮动来进行布局，那么它可能会相对这个位置进行移动。这就是所谓的相对定位。</p>
</blockquote>
</li>
<li>floating:<blockquote>
<p>A float is a box that is shifted to the left or right on the current line. The most interesting characteristic of a float is that content may flow along its side(or be prohibited from doing so by the ‘clear’ property).<br>浮动：浮动就是一个被转移到所在行的左边或者右边的盒子。它最有意思的一个性质就是内容会沿着它的边缘流动（或者是因为有‘clear’属性而导致不能沿着它的边缘流动）</p>
</blockquote>
</li>
<li>clear:<blockquote>
<p>This property indicates which sides of an element’s box(es) may not be adjacent to an earlier floating box. The ‘clear’ property does not consider floats inside the element itself or in other block formatting context.<br>&nbsp;&nbsp;清除：这个属性是用来规定元素盒子的哪一边不能和浮动盒子相邻。‘清除’属性不会作用在浮动元素的本身也不会作用在其他块级层叠上下文中。</p>
</blockquote>
</li>
<li>absolute positioning:<blockquote>
<p>In the absolute positioning model, a box is explicitly offset with respect to its containing block. It is removed from the normal flow entirely (it has no impact on later siblings). An absolutely positioned box establishes a new containing block for normal flow children and absolutely (but not fixed) positioned descendants. The containing block for a positioned box is established by the nearest positioned ancestor.<br>&nbsp;&nbsp;绝对定位：在绝对定位模型中，盒子相对其被包含块的偏移量会被明确的设定。在正常流中它会被完全剔除（对之后的兄弟元素没有影响）。绝对定位的盒子会为其中的正常流子元素产生一个包含块以及绝对（不是固定）定位的后代元素。被定位元素盒子的包含块是由最近的被定为的祖先元素来产生。</p>
</blockquote>
</li>
<li>block formatting context:<blockquote>
<p>Floats, absolutely positioned elements, block containers (such as inline-block, table-cells, and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than ‘visible’ (except when that value has been propagated to the viewport) establish new block formatting context for their contents.<br>&nbsp;&nbsp;块级格式化上下文：浮动，绝对定位元素，非块级盒子以及块级盒子但拥有“overflow”属性不是“visible”（除了当那个值已经被传到视窗的时候）的块级包含者（例如行内块、表格单元以及表格头）会为它们的内容产生一个新的块级格式化上下文。</p>
</blockquote>
</li>
<li>Block-level elements and block boxes:<blockquote>
<p>Block-level elements are those elements of the source document that are formatting visually as blocks. The following values of the ‘display’ property make an element Block-level:’block’, ‘list-item’, and ‘table’.<br>Block-level boxes are boxes that participate in a block formatting context. Each Block-level element generates a principal block-level box that contains descendant boxes and generated content and is also the box involved in any positioning scheme.Except for table boxes, which are described in a later chapter, and replaced elements, a block-level box is also a block container box. A block container box either contains only block-level boxes or establishes an inline formatting context and thus contains only inline-level boxes. Not all block container boxes are block-level boxes: non-replaced inline blocks and non-replaced table cells are block containers but not block-level boxes. Block-level boxes that are also block containers are called block boxes.<br>&nbsp;&nbsp;块级元素以及块级盒子：块级元素指的是源文件中按照块级来进行可见的格式化的元素。下面关于“display”属性的值能够让一个元素变成块级元素：block，list-item 以及 table。<br>块级盒子指的是参与块级格式化上下文的盒子。每个块级元素会生成一个自己的块级盒子，这个块级盒子都包含后代盒子和内容，同时也是这个盒子参与到所有的定位中。除了将在下一节中将要讲到的表格盒子以及替代元素，块级盒子也是块包含盒子。块包含盒子中要么只包含块级盒子要么产生一个行内格式化上下文然后只包含行内盒子。并不是所有的块包含盒子都是块级盒子：不可替代的行内快以及不可替代的表格单元都是可以包含块，但并不是块级盒子。块级盒子，同时也是块包含者被称之为块盒子。</p>
</blockquote>
</li>
<li>Relationships between ‘display’, ‘position’, and ‘float’:<blockquote>
<p>The three properties that affect box generation and layout interact as follows:</p>
<ol>
<li>If ‘display’ has the value ‘none’, then ‘position’ and ‘float’ do not apply. In this case, the element generates no box.</li>
<li>Otherwise, if ‘position’ has the value ‘absolute’ or ‘fixed’, the box is absolutely positioned, the computed value of ‘float’ is ‘none’, and display is set according to the table below. The position of the box will be determined by the ‘top’, ‘right’, ‘bottom’ and ‘left’ properties and the box’s containing block.</li>
<li>Otherwise, if ‘float’ has a value other than ‘none’, the box is floated and ‘display’ is set according to the table below.</li>
<li>Otherwise, if the element is the root element, ‘display’ is set according to the table below, except that it is undefined in CSS 2.1 whether a specified value of ‘list-item’ becomes a computed value of ‘block’ or ‘list-item’.</li>
<li>Otherwise, the remaining ‘display’ property values apply as specified.</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="浮动（Float）"><a href="#浮动（Float）" class="headerlink" title="浮动（Float）"></a>浮动（Float）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;浮动属性可以施加给任何元素（只要此元素不是绝对定位），设定浮动属性的元素从普通流中脱离，形成块级格式化上下文（BFC），而普通流中的元素则表现的此浮动元素不存在一样（除了会使行框变短，从而形成文本绕浮动元素的现象）。浮动属性具有以下几个特点：</p>
<ol>
<li>只有横向浮动，没有纵向浮动；（属性值只有none、left及right）</li>
<li>浮动元素的上外边框不能超过其包含块的上边框；</li>
<li>浮动元素脱离普通流后其包含容器将得不到此元素的高度属性（然后就有了关于clearfix方法的讨论）；</li>
<li>更多特点见<a href="https://www.w3.org/TR/CSS21/visuren.html#propdef-float" target="_blank" rel="external">Float说明。</a></li>
</ol>
<h2 id="定位（Position）"><a href="#定位（Position）" class="headerlink" title="定位（Position）"></a>定位（Position）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;定位属性比较好理解，其值有 inhert, static, relative, absolute, fixed 这五种。其中static为默认值，表示没有定位，根据位置出现在文档的普通流中；inhert 为继承父元素的position属性；relative 为相对定位，相对的是其本身在普通流中的位置，而且设定为相对浮动后，元素仍然占据原来普通流中的位置；absolute 为绝对定位，定位基准是最靠近的定位属性不为static的祖先元素，当设置为未绝对定位后，元素的位置就与普通流无关了，同时也不占据文档流空间，而且在设置为绝对定位后，元素会形成一个新的块级格式化上下文（BFC），原来是行内元素的会变成块级元素，而块级元素的宽度则由其本身的内容决定，而不再是默认的100%了；fixed可以说是absolute的特殊类，它也是固定定位，但是它的定位基准为视窗（viewport），除此之外，与决定定位没有区别。</p>
<h2 id="显示类（Display）"><a href="#显示类（Display）" class="headerlink" title="显示类（Display）"></a>显示类（Display）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Display属性主要决定元素是块级元素还是行间元素。属性值主要有block、inline-block、inline、list-item和none。块级元素为垂直排列，块级元素会自动换行，可设置块的宽高信息；行间元素为水平排列，宽高由内容决定，外部设置对其无效。</p>
<h2 id="Float、Position-和-Display-之间的关系："><a href="#Float、Position-和-Display-之间的关系：" class="headerlink" title="Float、Position 和 Display 之间的关系："></a>Float、Position 和 Display 之间的关系：</h2><ol>
<li>如果display的值为none，那么后两者就不会产生作用，也不会有任何的盒子产生；</li>
<li>除此之外，如果元素为absolute或者fixed定位，那么浮动的属性值相当于‘none’，display的属性如下面的表格所示。元素的位置就由设定决定定位时的值以及所包含容器来决定；</li>
<li>除此之外，如果float属性的值为不是none，那么元素将会浮动，元素的display属性将如下表所示；</li>
<li>除此之外，如果元素是根元素，那么元素的属性如下表所示；</li>
<li>除此之外，元素的display属性则根据设定来取值。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">specified value</th>
<th style="text-align:left">computed value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">inline-table</td>
<td style="text-align:left">table</td>
</tr>
<tr>
<td style="text-align:left">inline, table-x, inline-block</td>
<td style="text-align:left">block</td>
</tr>
<tr>
<td style="text-align:left">others</td>
<td style="text-align:left">same as specified</td>
</tr>
</tbody>
</table>
<h2 id="清除浮动（Clearfix）"><a href="#清除浮动（Clearfix）" class="headerlink" title="清除浮动（Clearfix）"></a>清除浮动（Clearfix）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;容器内如果只存在浮动元素，那么则会因为浮动元素不在普通流中而造成父级容器高度塌陷且无法获取浮动元素高度的情况，为了解决这个问题，除了了各种各样的清除浮动的方法，下面简单介绍几种：</p>
<ol>
<li><p>利用伪类及伪元素来清除，代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用overflow属性，代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/* 或者是auto */</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block; <span class="comment">/* Necessary to trigger "hasLayout" in IE */</span></span><br><span class="line">    <span class="attribute">display</span>: block; <span class="comment">/* Sets element back to block */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者是：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/* Clearfix! */</span></span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;  <span class="comment">/* Triggering "hasLayout" in IE */</span></span><br><span class="line">    <span class="attribute">display</span>: block; <span class="comment">/* Element must be a block to wrap around contents. Unnecessary if only using block-level elements. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用clear属性，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">style</span>=<span class="string">"clear:both"</span> /&gt;</span> <span class="comment">&lt;!-- So dirty! --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这种增加<code>&lt;br&gt;</code>同时结合clear属性的方法虽然看起来非常简单，但非常不推荐使用。主要原因有：如果后期有更好的清除方式，你不想有<code>&lt;br&gt;</code>元素存在那么将存在很大的问题；而且这种增加也不是语义上的增加。</p>
<blockquote>
<h4 id="由于笔者水平有限，本文有很多需要完善的地方，将长期保持更新；如阅读发现任何问题，欢迎批评指正！"><a href="#由于笔者水平有限，本文有很多需要完善的地方，将长期保持更新；如阅读发现任何问题，欢迎批评指正！" class="headerlink" title="由于笔者水平有限，本文有很多需要完善的地方，将长期保持更新；如阅读发现任何问题，欢迎批评指正！"></a><strong>由于笔者水平有限，本文有很多需要完善的地方，将长期保持更新；如阅读发现任何问题，欢迎批评指正！</strong></h4></blockquote>
<h4 id="参考文章-Reference-："><a href="#参考文章-Reference-：" class="headerlink" title="参考文章(Reference)："></a>参考文章(Reference)：</h4><ul>
<li><a href="http://stackoverflow.com/questions/211383/what-methods-of-clearfix-can-i-use/1633170#1633170" target="_blank" rel="external">Stackoverflow–What methods of ‘clearfix’ can I use?</a></li>
<li><a href="http://www.quirksmode.org/css/clearing.html#top" target="_blank" rel="external">Blog–Clearing floats</a></li>
<li><a href="http://yuiblog.com/blog/2010/05/19/css-101-block-formatting-contexts/" target="_blank" rel="external">Blog–CSS 101: Block Formatting Contexts</a></li>
<li><a href="https://www.w3.org/TR/CSS21/visuren.html#dis-pos-flo" target="_blank" rel="external">W3C–Relationships between ‘display’, ‘position’, and ‘float’</a></li>
<li><a href="http://www.jianshu.com/p/07eb19957991#" target="_blank" rel="external">Blog–CSS浮动float详解</a></li>
<li><a href="http://www.cnblogs.com/dolphinX/archive/2012/10/13/2722501.html" target="_blank" rel="external">Blog–CSS布局 ——从display，position， float属性谈起</a></li>
<li><a href="http://www.cnblogs.com/coffeedeveloper/p/3145790.html" target="_blank" rel="external">Blog–对CSS中的Position、Float属性的一些深入探讨</a></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
