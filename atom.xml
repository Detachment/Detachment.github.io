<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Share and Create</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://detachment.club/"/>
  <updated>2019-10-20T16:00:00.000Z</updated>
  <id>http://detachment.club/</id>
  
  <author>
    <name>Detachment</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://detachment.club/2019/10/20/TypeScript/"/>
    <id>http://detachment.club/2019/10/20/TypeScript/</id>
    <published>2019-10-19T16:00:00.000Z</published>
    <updated>2019-10-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;TypeScript 基础知识学习，来源为官方文档，用于定期复习巩固。</p><a id="more"></a><hr><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li>布尔值</li><li>数字</li><li>字符串</li><li>数组：number[], Array<number></number></li><li>元祖：[string, number]，联合类型</li><li>枚举：enum Color{Red, Green, Black}</li><li>any</li><li>void: 只能赋值为 null 或者 undefined</li><li>null 和 undefined: 如果不打开 –strictNullChecks，null 和 undefined 为所有类型的子类型</li><li>never</li><li>object</li></ul><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>两种写法，someValue 本身可能不是 string 类型，用户直接断言其为 string 类型：</p><ul><li><code>let strLength: number = (&lt;string&gt;someValue).length</code></li><li><code>let strLength: number = (someValue as string).length</code></li></ul><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="变量声明-1"><a href="#变量声明-1" class="headerlink" title="变量声明"></a>变量声明</h4><p>关键词：var, let, const</p><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><ul><li>解构数组</li><li>解构对象：默认值、重命名、类型</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><ul><li>检查必须存在的属性是否存在</li><li>不检查属性顺序</li></ul><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><ul><li>可选属性</li></ul><h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><ul><li>只读属性：只读变量用 const，只读属性用 readonly</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  readonly x: <span class="built_in">number</span>;</span><br><span class="line">  y?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h4><ul><li>对象字面量作为参数传递时会经过额外的属性检查，如果对象字面量中包含目标类型中没有的类型则会报错</li><li>解决办法：类型断言、字符串索引签名、赋值给一个变量</li></ul><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><ul><li>形式</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数名不需要匹配，但对应位置的属性需要是兼容的</li></ul><h4 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h4><ul><li>索引签名，比如下面的 index</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>索引签名有两种：数字和字符串</li><li>可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型，因为 js 会把数字索引转化成字符串索引</li></ul><h4 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h4><p>接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员</p><h4 id="类静态部分与实例部分的区别（？云里雾里）"><a href="#类静态部分与实例部分的区别（？云里雾里）" class="headerlink" title="类静态部分与实例部分的区别（？云里雾里）"></a>类静态部分与实例部分的区别（？云里雾里）</h4><h4 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h4><ul><li>可继承一个或多个接口</li></ul><h4 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">  (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  interval: <span class="built_in">number</span>;</span><br><span class="line">  reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span>(<span class="params">start: <span class="built_in">number</span></span>) </span>&#123;&#125;;</span><br><span class="line">  counter.interval = <span class="number">123</span>;</span><br><span class="line">  counter.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h4 id="接口继承类（？）"><a href="#接口继承类（？）" class="headerlink" title="接口继承类（？）"></a>接口继承类（？）</h4><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>派生类（子类），基类（超类）</li><li>派生类包含了一个构造函数，它必须调用 super()，它会执行基类的构造函数</li></ul><h4 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h4><ul><li>默认为 public: 在 TypeScript 里，成员都默认为 public</li><li>理解 private：当成员被标记成 private 时，它就不能在声明它的类的外部访问</li><li>当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的</li><li>如果其中一个类型里包含一个 private 成员，那么只有当另外一个类型中也存在这样一个 private 成员， 并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 protected 成员也使用这个规则</li><li>protected 成员在派生类中仍然可以访问</li><li>构造函数也可以被标记成 protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承</li></ul><h4 id="readonly-修饰符"><a href="#readonly-修饰符" class="headerlink" title="readonly 修饰符"></a>readonly 修饰符</h4><ul><li>使用 readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化</li><li>参数属性：参数属性通过给构造函数参数前面添加一个访问限定符来声明（public, private, protected)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">  readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用参数属性表述如下，和上面的类是一样的</span></span><br><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = theName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passcode = <span class="string">"secret passcode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">private</span> _fullName: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> fullName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> fullName(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"secret passcode"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">  alert(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TypeScript 支持通过 getters/setters 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问</li><li>存取器要求你将编译器设置为输出 ECMAScript 5 或更高。 不支持降级到 ECMAScript 3</li><li>只带有 get 不带有 set 的存取器自动被推断为 readonly</li></ul><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><ul><li>存在于类本身上面而不是类的实例上</li><li>实例想要访问这个属性的时候，都要在前面加上类名</li></ul><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul><li>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节</li><li>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现</li></ul><h4 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h4><ul><li>构造函数</li><li>把类当接口使用</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="为函数定义类型"><a href="#为函数定义类型" class="headerlink" title="为函数定义类型"></a>为函数定义类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 TypeScript 能够根据返回语句自动推断出返回值类型，因此我们通常省略它<br>完整的写法如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  x: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  y: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确</li></ul><h4 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h4><ul><li>在赋值语句的一边指定了类型但是另一边没有类型的话，TypeScript 编译器会自动识别出类型。这叫做【按上下文归类】</li></ul><h4 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h4><ul><li>可选参数必须跟在必须参数后面</li><li>带默认值的参数不需要放在必须参数的后面</li></ul><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">"Joseph"</span>, <span class="string">"Samuel"</span>, <span class="string">"Lucas"</span>, <span class="string">"MacKinzie"</span>);</span><br></pre></td></tr></table></figure><h4 id="this-需要多复习"><a href="#this-需要多复习" class="headerlink" title="this(?需要多复习)"></a>this(?需要多复习)</h4><ul><li>JavaScript 里，this 的值在函数被调用的时候才会指定</li><li>箭头函数能保存函数创建时的 this 值，而不是调用时的值</li><li>this 参数在回调函数中</li></ul><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><ul><li>为同一个函数提供多个函数类型定义来进行函数重载</li><li>它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。因此，在定义重载的时候，一定要把最精确的定义放在最前面</li><li>注意，function pickCard(x): any 并不是重载列表的一部分，因此这里只有两个重载：一个是接收对象另一个接收数字。 以其它参数调用 pickCard 会产生错误。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123; suit: <span class="built_in">string</span>; card: <span class="built_in">number</span> &#125;[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): </span>&#123; suit: <span class="built_in">string</span>; card: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Check to see if we're working with an object/array</span></span><br><span class="line">  <span class="comment">// if so, they gave us the deck and we'll pick the card</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">    <span class="keyword">return</span> pickedCard;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Otherwise just let them pick the card</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [</span><br><span class="line">  &#123; suit: <span class="string">"diamonds"</span>, card: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; suit: <span class="string">"spades"</span>, card: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; suit: <span class="string">"hearts"</span>, card: <span class="number">4</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard1.card + <span class="string">" of "</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard2.card + <span class="string">" of "</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="泛型之-HelloWorld"><a href="#泛型之-HelloWorld" class="headerlink" title="泛型之 HelloWorld"></a>泛型之 HelloWorld</h4><ul><li>类型变量：只用于表示类型而不是值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用方法：<ul><li>传入所有参数：<code>let output = identity&lt;string&gt;(&quot;myString&quot;)</code></li><li>使用类型推论：<code>let output = identity(&quot;myString&quot;);</code></li></ul></li></ul><h4 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h4><ul><li>我们把泛型变量 T 当做类型的一部分使用，而不是整个类型，增加了灵活性。下面的例子中 T 表示的就是数组中元素的类型而非入参的类型。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h4><ul><li>可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。通用用 T 表示</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;U&gt;<span class="function">(<span class="params">arg: U</span>) =&gt;</span> U = identity;</span><br></pre></td></tr></table></figure><ul><li>可以使用带有调用签名的对象字面量来定义泛型函数:</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &#123; &lt;T&gt;(arg: T): T &#125; = identity;</span><br></pre></td></tr></table></figure><ul><li>可以将泛型参数当作整个接口的一个参数，接口里的其它成员也能知道这个参数的类型</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">  (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure><ul><li>除了泛型接口，我们还可以创建泛型类。 注意，无法创建泛型枚举和泛型命名空间（？）</li></ul><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><ul><li>泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型</li></ul><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在泛型约束中使用类型参数（？）</li><li>在泛型中使用类类型（？有点迷糊）</li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h4 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h4><ul><li>数字枚举：不带初始化器的枚举应该被放在第一的位置，或者被放在使用了数字常量或其它常量初始化了的枚举后面</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  Up,</span><br><span class="line">  Down,</span><br><span class="line">  Left,</span><br><span class="line">  Right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符串枚举：在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化</li><li>异构枚举：枚举可以混合字符串和数字成员，但不建议这样做；</li><li>计算的和常量成员</li><li>联合枚举与枚举成员的类型<ul><li>枚举类型本身变成了每个枚举成员的联合：可以避免一些低级错误</li><li>枚举成员成为了类型</li></ul></li><li>运行时的枚举</li><li>反向映射：从枚举值到枚举名字。不会为字符串枚举成员生成反向映射</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Enum &#123;</span><br><span class="line">  A</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = Enum.A;</span><br><span class="line"><span class="keyword">let</span> nameOfA = Enum[a]; <span class="comment">// "A"</span></span><br></pre></td></tr></table></figure><ul><li>cosnt 枚举: 常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。之所以可以这么做是因为，常量枚举不允许包含计算成员</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Enum &#123;</span><br><span class="line">  A = <span class="number">1</span>,</span><br><span class="line">  B = A * <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>外部枚举</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> Enum &#123;</span><br><span class="line">  A = <span class="number">1</span>,</span><br><span class="line">  B,</span><br><span class="line">  C = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li>TypeScript 里，在有些没有明确指出类型的地方，类型推论会帮助提供类型</li><li>这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时</li></ul><h4 id="最佳通用类型"><a href="#最佳通用类型" class="headerlink" title="最佳通用类型"></a>最佳通用类型</h4><ul><li>当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型</li></ul><h4 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h4><h3 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>TypeScript 里的类型兼容性是基于结构子类型的</li></ul><h4 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h4><ul><li>基本规则：如果 x 要兼容 y，那么 y 至少具有与 x 相同的属性</li></ul><h4 id="比较两个函数"><a href="#比较两个函数" class="headerlink" title="比较两个函数"></a>比较两个函数</h4><ul><li>比较参数和返回值</li></ul><h4 id="函数参数双向协变"><a href="#函数参数双向协变" class="headerlink" title="函数参数双向协变"></a>函数参数双向协变</h4><h4 id="可选参数及剩余参数"><a href="#可选参数及剩余参数" class="headerlink" title="可选参数及剩余参数"></a>可选参数及剩余参数</h4><h4 id="枚举-2"><a href="#枚举-2" class="headerlink" title="枚举"></a>枚举</h4><ul><li>枚举类型与数字类型兼容，并且数字类型与枚举类型兼容。不同枚举类型之间是不兼容的</li></ul><h4 id="类-2"><a href="#类-2" class="headerlink" title="类"></a>类</h4><ul><li>类与对象字面量和接口差不多，但有一点不同：类有静态部分和实例部分的类型。 比较两个类类型的对象时，只有实例的成员会被比较</li><li>类的私有成员和受保护成员会影响兼容性</li></ul><h4 id="泛型-1"><a href="#泛型-1" class="headerlink" title="泛型"></a>泛型</h4><h4 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h4><ul><li>在 TypeScript 里，有两种兼容性：子类型和赋值。它们的不同点在于，赋值扩展了子类型兼容性，增加了一些规则，允许和 any 来回赋值，以及 enum 和对应数字值之间的来回赋值。</li></ul><h3 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h3><h4 id="交叉类型（Intersection-Types）"><a href="#交叉类型（Intersection-Types）" class="headerlink" title="交叉类型（Intersection Types）"></a>交叉类型（Intersection Types）</h4><ul><li>交叉类型是将多个类型合并为一个类型，它包含了所需的所有类型的特性</li></ul><h4 id="联合类型（Union-Types）"><a href="#联合类型（Union-Types）" class="headerlink" title="联合类型（Union Types）"></a>联合类型（Union Types）</h4><ul><li>联合类型表示一个值可以是几种类型之一</li><li>如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员</li></ul><h4 id="类型保护与区分类型"><a href="#类型保护与区分类型" class="headerlink" title="类型保护与区分类型"></a>类型保护与区分类型</h4><ul><li>类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型</li><li>要定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个 类型谓词：pet is Fish 就是类型谓词。 谓词为 parameterName is Type 这种形式， parameterName 必须是来自于当前函数签名里的一个参数名</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFish</span>(<span class="params">pet: Fish | Bird</span>): <span class="title">pet</span> <span class="title">is</span> <span class="title">Fish</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (&lt;Fish&gt;pet).swim !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>typeof 类型保护</li><li>instanceof 类型保护</li></ul><h4 id="可以为-null-的类型"><a href="#可以为-null-的类型" class="headerlink" title="可以为 null 的类型"></a>可以为 null 的类型</h4><ul><li>默认情况下，类型检查器认为 null 与 undefined 可以赋值给任何类型</li><li>–strictNullChecks 标记可以解决此错误</li><li>可选参数和可选属性：使用了 –strictNullChecks，可选参数会被自动地加上 | undefined（不会加 null 类型）</li><li>类型保护和类型断言：如果编译器不能够去除 null 或 undefined，你可以使用类型断言手动去除。 语法是添加 !后缀： identifier!从 identifier 的类型里去除了 null 和 undefined</li></ul><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><ul><li>起别名不会新建一个类型，它创建了一个新名字来引用那个类型</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型别名也可以是泛型</li><li>可以使用类型别名来在属性里引用自己</li><li>类型别名不能出现在声明右侧的任何地方(?)</li><li>接口 vs. 类型别名：<ul><li>其一，接口创建了一个新的名字，可以在其它任何地方使用。 类型别名并不创建新名字—比如，错误信息就不会使用别名</li><li>另一个重要区别是类型别名不能被 extends 和 implements（自己也不能 extends 和 implements 其它类型）</li><li>另一方面，如果你无法通过接口来描述一个类型并且需要使用联合类型或元组类型，这时通常会使用类型别名（？不太理解）</li></ul></li></ul><h4 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h4><ul><li>在实际应用中，字符串字面量类型可以与联合类型，类型保护和类型别名很好的配合。 通过结合使用这些特性，你可以实现类似枚举类型的字符串</li></ul><h4 id="数字字面量类型"><a href="#数字字面量类型" class="headerlink" title="数字字面量类型"></a>数字字面量类型</h4><h4 id="枚举成员类型"><a href="#枚举成员类型" class="headerlink" title="枚举成员类型"></a>枚举成员类型</h4><h4 id="可辨识联合（Discriminated-Unions）"><a href="#可辨识联合（Discriminated-Unions）" class="headerlink" title="可辨识联合（Discriminated Unions）"></a>可辨识联合（Discriminated Unions）</h4><ul><li>可以合并单例类型，联合类型，类型保护和类型别名来创建一个叫做 可辨识联合的高级模式，它也称做 标签联合或 代数数据类型。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TypeScript 基础知识学习，来源为官方文档，用于定期复习巩固。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://detachment.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="基础" scheme="http://detachment.club/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="TypeScript" scheme="http://detachment.club/tags/TypeScript/"/>
    
      <category term="笔记" scheme="http://detachment.club/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《我们与恶的距离》</title>
    <link href="http://detachment.club/2019/05/03/%E3%80%8A%E6%88%91%E4%BB%AC%E4%B8%8E%E6%81%B6%E7%9A%84%E8%B7%9D%E7%A6%BB%E3%80%8B/"/>
    <id>http://detachment.club/2019/05/03/《我们与恶的距离》/</id>
    <published>2019-05-02T16:00:00.000Z</published>
    <updated>2019-07-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; “他是个罪人，但他并不一定是坏人” – 王赦<br>这部电视剧从一个随机杀人事件开始，然后围绕着具有精神疾病的犯罪人员来探讨政府、媒体以及社会大众应该以怎样的角度来看待类似的事情。由于题材比较新颖，演员的完成度也还不错，这部剧在<a href="https://movie.douban.com/subject/30181230/" target="_blank" rel="noopener">豆瓣</a>上获得了9.5的高分。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; “他是个罪人，但他并不一定是坏人” – 王赦&lt;br&gt;这部电视剧从一个随机杀人事件开始，然后围绕着具有精神疾病的犯罪人员来探讨政府、媒体以及社会大众应该以怎样的角度来看待类似的事情。由于题材比较新颖，演员的完成度也还不错，这部剧在&lt;a href=&quot;https://movie.douban.com/subject/30181230/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;豆瓣&lt;/a&gt;上获得了9.5的高分。&lt;/p&gt;
    
    </summary>
    
      <category term="影视" scheme="http://detachment.club/categories/%E5%BD%B1%E8%A7%86/"/>
    
    
      <category term="生活" scheme="http://detachment.club/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="电视剧" scheme="http://detachment.club/tags/%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    
      <category term="2019" scheme="http://detachment.club/tags/2019/"/>
    
      <category term="随感" scheme="http://detachment.club/tags/%E9%9A%8F%E6%84%9F/"/>
    
      <category term="杂" scheme="http://detachment.club/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>2018</title>
    <link href="http://detachment.club/2019/01/07/2018/"/>
    <id>http://detachment.club/2019/01/07/2018/</id>
    <published>2019-01-06T16:00:00.000Z</published>
    <updated>2019-01-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;工作之后，越来越少的时间与自己的内心进行交流了。写年终总结是一个为数不多的与内心进行交流的契机，所以每次开始写年终总结都有一点犹豫、期待和兴奋呢。和往常一样，下面会从工作和生活两方面来进行总结。</p><a id="more"></a><hr><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ol><li>聚链数据（技术积累 next.js + mobx.js）</li><li>个人版及移动版（技术积累及应用 next.js + mobx.js）</li><li>机构版（技术应用：next.js）</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个坑是个深坑，填不了了。之后有时间有契机的话可以说说这段时间发生的事情，大概就是换工作面试之类的。</p><blockquote><p>本来准备去年年底写完的，一直拖一直拖，这个坑估计是填不上了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;工作之后，越来越少的时间与自己的内心进行交流了。写年终总结是一个为数不多的与内心进行交流的契机，所以每次开始写年终总结都有一点犹豫、期待和兴奋呢。和往常一样，下面会从工作和生活两方面来进行总结。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://detachment.club/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工作" scheme="http://detachment.club/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="JavaScript" scheme="http://detachment.club/tags/JavaScript/"/>
    
      <category term="2018" scheme="http://detachment.club/tags/2018/"/>
    
      <category term="计划" scheme="http://detachment.club/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://detachment.club/2018/11/20/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    <id>http://detachment.club/2018/11/20/个人简历/</id>
    <published>2018-11-19T16:00:00.000Z</published>
    <updated>2018-11-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">加密文章，输入密码后查看</h3><div id="security"> <div> <div class="input-group"> <input type="text" style="padding:6px 2px 7px" class="form-control" aria-label="enter the password" id="pass" placeholder="请输入密码"/> <button type="button" onclick="decryptAES()">芝麻开门</button> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      本文章需权限访问
    
    </summary>
    
      <category term="总结" scheme="http://detachment.club/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://detachment.club/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="简历" scheme="http://detachment.club/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Why is setState asynchronous ?</title>
    <link href="http://detachment.club/2018/11/12/why%20is%20setState%20asynchronous?%20/"/>
    <id>http://detachment.club/2018/11/12/why is setState asynchronous? /</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2018-11-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/facebook/react/issues/11527" target="_blank" rel="noopener">https://github.com/facebook/react/issues/11527</a><br><a href="https://blog.cloudboost.io/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e" target="_blank" rel="noopener">https://blog.cloudboost.io/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/11527&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook/react/issues/11527&lt;/a
      
    
    </summary>
    
      <category term="前端" scheme="http://detachment.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://detachment.club/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>解除各种浏览器跨域</title>
    <link href="http://detachment.club/2018/09/06/%E8%A7%A3%E9%99%A4%E5%90%84%E7%A7%8D%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F/"/>
    <id>http://detachment.club/2018/09/06/解除各种浏览器跨域/</id>
    <published>2018-09-05T16:00:00.000Z</published>
    <updated>2018-09-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;浏览器跨域保护是一种很常见的策略，各大浏览器都会有这种保护机制，但是在本地进行调试的时候我们并不希望这个策略生效，因为生效的话我们就没法正常拿到数据了。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;浏览器跨域保护是一种很常见的策略，各大浏览器都会有这种保护机制，但是在本地进行调试的时候我们并不希望这个策略生效，因为生效的话我们就没法正常拿到数据了。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://detachment.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="总结" scheme="http://detachment.club/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="浏览器兼容" scheme="http://detachment.club/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="调试" scheme="http://detachment.club/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>从点击下载不兼容火狐谈起</title>
    <link href="http://detachment.club/2018/09/04/%E4%BB%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%81%AB%E7%8B%90%E5%8F%8AEdge%E8%B0%88%E5%88%B0creatObjt/"/>
    <id>http://detachment.club/2018/09/04/从点击下载不兼容火狐及Edge谈到creatObjt/</id>
    <published>2018-09-03T16:00:00.000Z</published>
    <updated>2018-09-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;最近遇到这样一个问题：点击按钮下载文件的时候，在 Safari 和 Chrome 上都没有问题，在 Firefox 和 Edge 上则无反应。一开始我以为是后者默默的把下载好的文件保存在了浏览器的默认位置导致的，直到昨天产品大佬告诉我默认文件夹并没有对应的文件，这才怀疑可能是在实现过程中有兼容性问题。</p><a id="more"></a><h2 id="从-window-URL-createObjectURL-blob-说起"><a href="#从-window-URL-createObjectURL-blob-说起" class="headerlink" title="从 window.URL.createObjectURL(blob) 说起"></a>从 window.URL.createObjectURL(blob) 说起</h2><p>点击下载的时候有一段代码是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">a.style = <span class="string">"display: none"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(a)</span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);   </span><br><span class="line"><span class="keyword">let</span> disposition = response.headers.get(<span class="string">'Content-Disposition'</span>);</span><br><span class="line"><span class="keyword">let</span> filename = (disposition &amp;&amp;disposition.replace(<span class="regexp">/attachment;filename=/</span>,<span class="string">''</span>)) || <span class="string">'data.xlsx'</span></span><br><span class="line">filename = <span class="built_in">decodeURI</span>(filename);</span><br><span class="line">a.href = url;</span><br><span class="line">a.download = filename;</span><br><span class="line">a.click();</span><br></pre></td></tr></table></figure></p><p>这段代码其实很简单，就是先创建个 Blob 对象，然后点击它下载。由于之前没有接触过这个 API， 所以稍微去了解了下，发现两篇文章：<a href="https://juejin.im/entry/5937c98eac502e0068cf31ae" target="_blank" rel="noopener">JavaScript 中 Blob 对象</a>， <a href="https://www.zhangxinxu.com/wordpress/2017/07/js-text-string-download-as-html-json-file/" target="_blank" rel="noopener">JS前端创建html或json文件并浏览器导出下载</a>，比较通俗易懂的介绍了下 Blob 对象的使用方式。这一步是没有什么问题的。</p><p>自然而言的会怀疑到这个API的浏览器兼容性，然后查了一下，结果如下图所示。我是用的 Firefox 是 62 版本的，所以应该也不存在兼容性问题。<br><img src="http://o9ybnkuir.bkt.clouddn.com/UC20180904_224947.png" alt="compatibility"></p><h2 id="到事件监听"><a href="#到事件监听" class="headerlink" title="到事件监听"></a>到事件监听</h2><p>然后开始怀疑是不是点击事件没有触发。<br>触发一个点击事件的前提：事件绑定在元素上，那么如何将一个点击事件绑定在元素上呢？</p><blockquote><p>以下内容引用自 <a href="https://stackoverflow.com/questions/6348494/addeventlistener-vs-onclick" target="_blank" rel="noopener">addEventListener vs onclick</a>         </p></blockquote><ol><li><p>Event Listeners (addEventListener and IE’s attachEvent)<br>在 IE 9 及以前，需要用 <code>attachEvent</code> 方法来绑定点击事件：<br><code>element.attachEvent(&#39;onclick&#39;, function() { /* 具体函数*/})</code><br>在其他绝大多数浏览器中，则可以用 <code>addEventListener</code> 来进行绑定：<br><code>element.addEventListener(&#39;click&#39;, function() { /* 具体函数*/ }, false);</code><br>利用这种方式添加事件绑定的时候，理论上可以在同一个元素绑定无数的事件，唯一需要考虑的就是性能问题以及客户端的内存，这些就都和浏览器有关了。<br>上面的例子中添加的函数都是匿名函数，其实可以先声明一个函数，然后通过函数引用的方式来绑定事件：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunctionReference = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* do stuff here*/</span> &#125;</span><br><span class="line">element.attachEvent(<span class="string">'onclick'</span>, myFunctionReference);</span><br><span class="line">element.addEventListener(<span class="string">'click'</span>, myFunctionReference , <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p> 利用  <code>addEventListener</code> 进行绑定的时候需要传第三个参数，这个参数是用来控制事件是否冒泡的。在  <code>attachEvent</code> 方法中没有此参数。     </p></li><li><p>Inline events (HTML onclick=”” property and element.onclick)<br>在支持 JavaScript 的浏览器中，我们可以在元素上加上事件监听函数，方法如下：<br><code>&lt;a id=&quot;testing&quot; href=&quot;#&quot; onclick=&quot;alert(&#39;did stuff inline&#39;);&quot;&gt;Click me&lt;/a&gt;</code><br>虽然大部分有经验的程序员都很少用这种方式，但这种方式确实也可以达到目的，而且简单直接。这种写法的缺点也显而易见：函数必须要非常简单。<br>另外一种写法是：<br><code>element.onclick = function () { /*do stuff here */ };</code><br>这种写法和上面其实是等价的，不过这样写的话函数的复杂程度就可以大大提高了。<br>利用行间事件的写法有一个很明显的缺点：每一个元素都只能有一个对应的事件，事件是作为元素的属性存储的，这样一来如果有多个同样的事件，那么前者就会被后者覆盖：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">'testing'</span>);</span><br><span class="line">element.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">'did stuff #1'</span>); &#125;;</span><br><span class="line">element.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">'did stuff #2'</span>); &#125;;</span><br></pre></td></tr></table></figure><p> 上面这段代码执行的时候，只有第二个函数会执行，因为第一个事件被覆盖掉了。</p></li></ol><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>上面两个点都没有解决到实际的问题，最后终于在 stackOverflow 上看到了一个问题: <a href="https://stackoverflow.com/questions/30694453/blob-createobjecturl-download-not-working-in-firefox-but-works-when-debugging" target="_blank" rel="noopener">Blob createObjectURL download not working in Firefox (but works when debugging)</a> 利用里面提到的解决方案顺利解决了这个兼容性问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近遇到这样一个问题：点击按钮下载文件的时候，在 Safari 和 Chrome 上都没有问题，在 Firefox 和 Edge 上则无反应。一开始我以为是后者默默的把下载好的文件保存在了浏览器的默认位置导致的，直到昨天产品大佬告诉我默认文件夹并没有对应的文件，这才怀疑可能是在实现过程中有兼容性问题。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://detachment.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="基础" scheme="http://detachment.club/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="工作" scheme="http://detachment.club/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="浏览器兼容" scheme="http://detachment.club/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="JavaScript" scheme="http://detachment.club/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>学习计划及路线</title>
    <link href="http://detachment.club/2018/06/14/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://detachment.club/2018/06/14/近期学习计划/</id>
    <published>2018-06-13T16:00:00.000Z</published>
    <updated>2018-10-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经很久没有制定学习计划了，每次都是心血来潮的看到想学的内容然后开始搜索，搜完相关资料后兴致没有了就放弃了。虽然挺舒服的，但从长远的角度来说，这不是一种良性的状态，所以开始恢复写博客，然后将近段时间的学习计划列出来，一步一个脚印。</p><ol><li>网络协议学习 （进行中）              </li><li>node.js，打开通向后端的大门        </li><li>深入学习 React 原理及其生态         </li><li>webpack &amp;&amp; git</li><li>数据结构和算法</li><li>巩固 JS 基础</li><li>解读 next.js 项目</li></ol><a id="more"></a><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><h3 id="1-网络协议"><a href="#1-网络协议" class="headerlink" title="1.  网络协议"></a>1.  网络协议</h3><p>这块知识一直都没有花费时间和精力去学习，每次碰到与这块内容相关的问题都不知所措，所以想拿出时间学习这方案的想法越来越成熟。<br>学习途径：看书《图解 HTTP》</p><h3 id="2-node-js-学习路线"><a href="#2-node-js-学习路线" class="headerlink" title="2.  node.js 学习路线"></a>2.  node.js 学习路线</h3><ol><li>看书：Node.js in Action 和 SMASHING Node.js: Javascript Everywhere.（改为：Node.js 实战第二版）</li><li>跟着书实践</li><li>尝试结合生产环境运用</li><li>运用到生产环境</li></ol><h3 id="3-深入学习-React-生态"><a href="#3-深入学习-React-生态" class="headerlink" title="3. 深入学习 React 生态"></a>3. 深入学习 React 生态</h3><h3 id="4-webpack-amp-amp-git"><a href="#4-webpack-amp-amp-git" class="headerlink" title="4. webpack &amp;&amp; git"></a>4. webpack &amp;&amp; git</h3><h3 id="5-数据结构和算法"><a href="#5-数据结构和算法" class="headerlink" title="5. 数据结构和算法"></a>5. 数据结构和算法</h3><h3 id="6-巩固-JS-基础"><a href="#6-巩固-JS-基础" class="headerlink" title="6. 巩固 JS 基础"></a>6. 巩固 JS 基础</h3><h3 id="7-解读-next-js-项目"><a href="#7-解读-next-js-项目" class="headerlink" title="7. 解读 next.js 项目"></a>7. 解读 next.js 项目</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;已经很久没有制定学习计划了，每次都是心血来潮的看到想学的内容然后开始搜索，搜完相关资料后兴致没有了就放弃了。虽然挺舒服的，但从长远的角度来说，这不是一种良性的状态，所以开始恢复写博客，然后将近段时间的学习计划列出来，一步一个脚印。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网络协议学习 （进行中）              &lt;/li&gt;
&lt;li&gt;node.js，打开通向后端的大门        &lt;/li&gt;
&lt;li&gt;深入学习 React 原理及其生态         &lt;/li&gt;
&lt;li&gt;webpack &amp;amp;&amp;amp; git&lt;/li&gt;
&lt;li&gt;数据结构和算法&lt;/li&gt;
&lt;li&gt;巩固 JS 基础&lt;/li&gt;
&lt;li&gt;解读 next.js 项目&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="计划" scheme="http://detachment.club/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="计划" scheme="http://detachment.club/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="学习" scheme="http://detachment.club/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>网页多语言版本开发</title>
    <link href="http://detachment.club/2018/06/12/%E7%BD%91%E9%A1%B5%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC%E5%BC%80%E5%8F%91/"/>
    <id>http://detachment.club/2018/06/12/网页多语言版本开发/</id>
    <published>2018-06-11T16:00:00.000Z</published>
    <updated>2018-06-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着互联网时代的到来，为了满足来自世界各地的访客的需求，网站的多语言版本设计显得越来越重要。本篇博客主要用来说明怎样开发多语言版本。<br>技术栈：React.js + Next.js + Mobx.js + i18next</p><a id="more"></a><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><p>WIP</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着互联网时代的到来，为了满足来自世界各地的访客的需求，网站的多语言版本设计显得越来越重要。本篇博客主要用来说明怎样开发多语言版本。&lt;br&gt;技术栈：React.js + Next.js + Mobx.js + i18next&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://detachment.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://detachment.club/tags/JavaScript/"/>
    
      <category term="多语言" scheme="http://detachment.club/tags/%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
    
      <category term="i18next" scheme="http://detachment.club/tags/i18next/"/>
    
      <category term="next.js" scheme="http://detachment.club/tags/next-js/"/>
    
      <category term="React.js" scheme="http://detachment.club/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>开发笔记</title>
    <link href="http://detachment.club/2018/06/06/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://detachment.club/2018/06/06/开发笔记/</id>
    <published>2018-06-05T16:00:00.000Z</published>
    <updated>2018-10-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本博客用来记录在工作中遇到的各种疑难杂症及对应的解决方案，方便遇到同样问题时的检索。<br>问题及解决方案汇总：</p><ol><li>React.js + Next.js + i18next 报错：Module parse failed: Unexpected token (290:73) You may need an appropriate loader to handle this file type.</li><li>利用 JSON.parse 进行解析的时候报错 ‘Unexpected token i in JSON at position 1’.</li><li>使用 forEach 对数组进行循环改变数组本身的值，然后并没有生效.</li><li>React.js + Next.js 跳转页面没问题，使用 safari 前进后退键的时候报错，使用 chrome 没问题.</li><li>部分浏览器打开页面时报错：Object.assign is not a function.</li><li>发送请求时控制栏报错：TypeError: Failed to execute ‘fetch’ on ‘Window’: Value is not a valid ByteString.</li><li>数组为空的时候试用map方法无效.</li></ol><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-React-js-Next-js-i18next-报错：Module-parse-failed-Unexpected-token-290-73-You-may-need-an-appropriate-loader-to-handle-this-file-type"><a href="#1-React-js-Next-js-i18next-报错：Module-parse-failed-Unexpected-token-290-73-You-may-need-an-appropriate-loader-to-handle-this-file-type" class="headerlink" title="1.  React.js + Next.js + i18next 报错：Module parse failed: Unexpected token (290:73) You may need an appropriate loader to handle this file type."></a>1.  React.js + Next.js + i18next 报错：Module parse failed: Unexpected token (290:73) You may need an appropriate loader to handle this file type.</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>官网个人版的数据直接放到重构的机构版时系统报错。由于分工不同，机构版将不同功能分割出来了，把共用部分放在了 common 中，其余不同模块分为了不同的项目，每个项目都是一个单独的 next.js 项目。需要引用项目外的共用文件的时候就利用 bindfs 来进行映射。<br> <img src="http://o9ybnkuir.bkt.clouddn.com/UC20180613_185341.png" alt="errorImg"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|--- common</span><br><span class="line">|     - file</span><br><span class="line">|     - file</span><br><span class="line">|--- project A</span><br><span class="line">|     - file</span><br><span class="line">|     - file</span><br><span class="line">|     - next.conf.js</span><br><span class="line">|--- project B</span><br><span class="line">|     - file</span><br><span class="line">|     - file</span><br><span class="line">|     - next.conf.js</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>由于和之前的项目相比并没有做过多的改动，但只要一启动就报这种错误，然后用关键词 <strong>Module parse failed: Unexpected token (290:73) You may need an appropriate loader to handle this file type</strong>。搜出来结果很多，基本上都是和 webpack 配置相关，然后我反思了下这两个项目都没有配置过 webpack，所以应该不是这里面出现的问题。左看右看，终于找到一条让我眼前一亮的答案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Next only compiles files inside <span class="keyword">of</span> the next root, which <span class="keyword">in</span> your <span class="keyword">case</span> is root/server. You can probably use something like <span class="number">3732</span> to compile files outside <span class="keyword">of</span> the root.</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/zeit/next.js/issues/3819" target="_blank" rel="noopener">Spread Operator not building – Webpack #3819</a><br>看到这个答案后，将所有链接到项目外的路径改成项目内就好了。</p><h3 id="2-利用-JSON-parse-进行解析的时候报错-‘Unexpected-token-i-in-JSON-at-position-1’"><a href="#2-利用-JSON-parse-进行解析的时候报错-‘Unexpected-token-i-in-JSON-at-position-1’" class="headerlink" title="2. 利用 JSON.parse 进行解析的时候报错 ‘Unexpected token i in JSON at position 1’"></a>2. 利用 JSON.parse 进行解析的时候报错 ‘Unexpected token i in JSON at position 1’</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>系统有部分数据保存在 mongoDB 中，取出的数据很多时候会是字符串形式，这时候最普遍的得到具体数据的方式是利用 JSON.parse 来进行解析。大部分的时候都能成功解析，也存在有些时候会出现描述中的错误，这时候就需要分析其中的原因了。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>这个问题其实是因为需要解析的不是一个有效的 JSON 对象导致的，以下引用自 <a href="https://stackoverflow.com/questions/18791718/json-parse-unexpected-token-s" target="_blank" rel="noopener">JSON.parse unexpected token s</a> :</p><blockquote><p>What you are passing to JSON.parse method must be a valid JSON after removing the wrapping quotes for string.<br>so something is not a valid JSON but “something” is.<br>A valid JSON is -<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">JSON</span> = <span class="literal">null</span></span><br><span class="line">&gt;   <span class="comment">/* boolean literal */</span></span><br><span class="line">&gt;   or <span class="literal">true</span> or <span class="literal">false</span></span><br><span class="line">&gt;   <span class="comment">/* A JavaScript Number Leading zeroes are prohibited; a decimal point must be followed by at least one digit.*/</span></span><br><span class="line">&gt;   or JSONNumber</span><br><span class="line">&gt;   <span class="comment">/* Only a limited sets of characters may be escaped; certain control characters are prohibited; the Unicode line separator (U+2028) and paragraph separator (U+2029) characters are permitted; strings must be double-quoted.*/</span></span><br><span class="line">&gt;   or JSONString</span><br><span class="line">    <span class="comment">/* Property names must be double-quoted strings; trailing commas are forbidden. */</span></span><br><span class="line">    or JSONObject</span><br><span class="line">    or JSONArray</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Examples -<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'&#123;&#125;'</span>); <span class="comment">// &#123;&#125;</span></span><br><span class="line">   <span class="built_in">JSON</span>.parse(<span class="string">'true'</span>); <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">JSON</span>.parse(<span class="string">'"foo"'</span>); <span class="comment">// "foo"</span></span><br><span class="line">   <span class="built_in">JSON</span>.parse(<span class="string">'[1, 5, "false"]'</span>); <span class="comment">// [1, 5, "false"]</span></span><br><span class="line">   <span class="built_in">JSON</span>.parse(<span class="string">'null'</span>); <span class="comment">// null </span></span><br><span class="line">   <span class="built_in">JSON</span>.parse(<span class="string">"'foo'"</span>); <span class="comment">// error since string should be wrapped by double quotes</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>You may want to look <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON?redirectlocale=en-US&amp;redirectslug=JavaScript/Reference/Global_Objects/JSON" target="_blank" rel="noopener">JavaScript and JSON differences</a></p></blockquote><p>说了这么多，那我们应该怎么去处理这种情况呢？其实很简单，用 try…catch 就行了。如果是合法的 JSON 对象就解析，如果不是则不进行处理。</p><h3 id="3-使用-forEach-对数组进行循环改变数组本身的值，然后并没有生效"><a href="#3-使用-forEach-对数组进行循环改变数组本身的值，然后并没有生效" class="headerlink" title="3. 使用 forEach 对数组进行循环改变数组本身的值，然后并没有生效"></a>3. 使用 forEach 对数组进行循环改变数组本身的值，然后并没有生效</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>利用 forEach 进行循环然后遍历改变原数组的需求非常常见，但稍有使用不当就会造成并没有改变原数据的结果，这主要是因为下面这个原因。</p><h3 id="4-React-js-Next-js-跳转页面没问题，使用-safari-前进后退键的时候报错，使用-chrome-没问题"><a href="#4-React-js-Next-js-跳转页面没问题，使用-safari-前进后退键的时候报错，使用-chrome-没问题" class="headerlink" title="4.  React.js + Next.js 跳转页面没问题，使用 safari 前进后退键的时候报错，使用 chrome 没问题"></a>4.  React.js + Next.js 跳转页面没问题，使用 safari 前进后退键的时候报错，使用 chrome 没问题</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>因为在 safari 中没找到简单快捷的操纵 cookie 的方法（在 chrome 中利用扩展 editThisCookie 很方便，在 safari 中可以直接在 console 中加入 cookie，但总归不方便），所以开发的时候一直都是在 chrome 中。项目上线后在 safari 中也测了测，没有发现问题，直到有一天同事告诉我所有的页面在后退的时候都会出现报错页面，而且只会出现在 Safari 中。百思不解，首先想到的是浏览器的兼容性，也找了很多相关的内容来看，有文章提到是因为返回的时候从缓存里面拿数据的原因，并没有提到具体的解决措施。然后想到如果真的是这个原因，那么之前做的个人版应该也会有同样的问题，所以就测了下之前的个人版，发现却并没有这个问题，所以就把思考的重点转移到了分模块打包上。在 next.js 项目的 issue 中找了找也没有找到相关的内容，问题暂时搁置。<br>大概两天后，老板说点击工商页面的时候也出现了报错页面，好像突然就有灵感了！联想到之前也有同事告诉我点击链接的时候会报错，给了我一个新思路：从链接入手！然后在官方文档上看到这么一句话：<code>For the initial page load, getInitialProps will execute on the server only. getInitialProps will only be executed on the client when navigating to a different route via the Link component or using the routing APIs.</code> 到这其实已经心中有数了。之前一直认为 getInitialProps 只会在服务器端执行，所以为了辨识用户身份，将服务器相关的参数传入到了这个函数中，然后在通过 Link 组件或者前进后退的时候，这个函数也会执行，然而此时找不到在函数中使用的参数（如 process 对象），所以系统持之以恒的报错！想到这点，问题便迎刃而解了。</p><h3 id="5-部分浏览器打开页面时报错：Object-assign-is-not-a-function"><a href="#5-部分浏览器打开页面时报错：Object-assign-is-not-a-function" class="headerlink" title="5. 部分浏览器打开页面时报错：Object.assign is not a function."></a>5. 部分浏览器打开页面时报错：Object.assign is not a function.</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>有客户在微信打开我们的网页时发现空白页，测试发现在safari，chrome，firefox下都是没问题的。分析发现微信内置的浏览器版本对应于chrome43版本左右，版本过低导致不支持es6语法导致。问题分析到这就迎刃而解了，在next.js项目下搜索browser顺利找到解决方案。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalEntry = newConfig.entry</span><br><span class="line">  newConfig.entry = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> entries = <span class="keyword">await</span> originalEntry()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (entries[<span class="string">'main.js'</span>] &amp;&amp; !entries[<span class="string">'main.js'</span>].includes(<span class="string">'./polyfills.js'</span>)) &#123;</span><br><span class="line">      entries[<span class="string">'main.js'</span>].unshift(<span class="string">'./polyfills.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> entries</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  polyfills.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint no-extend-native: 0 */</span></span><br><span class="line"><span class="comment">// core-js comes with Next.js. So, you can import it like below</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'core-js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Add your polyfills</span></span><br><span class="line"><span class="comment">// This files runs at the very beginning (even before React and Next.js core)</span></span><br><span class="line"><span class="comment">// console.log('Load your polyfills')</span></span><br></pre></td></tr></table></figure><h3 id="6-发送请求时报错-TypeError-Failed-to-execute-‘fetch’-on-‘Window’-Value-is-not-a-valid-ByteString"><a href="#6-发送请求时报错-TypeError-Failed-to-execute-‘fetch’-on-‘Window’-Value-is-not-a-valid-ByteString" class="headerlink" title="6. 发送请求时报错 TypeError: Failed to execute ‘fetch’ on ‘Window’: Value is not a valid ByteString."></a>6. 发送请求时报错 TypeError: Failed to execute ‘fetch’ on ‘Window’: Value is not a valid ByteString.</h3><h4 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h4><p>组内的一个小伙伴在发送请求的时候发生了这种错误，我拉完代码后却什么问题都没有。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>推测有可能导致的原因：本地node版本，项目依赖包的版本，浏览器版本，用户信息等等。在一一排除这些因素后，项目启动还是会出现报错。网上搜索了下，没有找到特别符合的同类错误。因为使用的是 isomorphic-fetch 来请求数据的，所以也把源码稍微打开看了下，并没有找到这种类型的报错。几乎放弃的时候想起来有人提过这种错误可能是在请求中有中文导致的，逐一去检查，终于发现了原来是同事在cookie中添加了未编码的中文名，编码后重新尝试，终于好了。</p><h3 id="7-命令行提示本地项目启动，浏览器打开却不行"><a href="#7-命令行提示本地项目启动，浏览器打开却不行" class="headerlink" title="7. 命令行提示本地项目启动，浏览器打开却不行"></a>7. 命令行提示本地项目启动，浏览器打开却不行</h3><h4 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h4><p>尝试进行接口测试，本地部署的时候需要运行node服务，随便填了个端口：6666。</p><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><p>多次重启未果，猜测可能是端口的原因，网上一查还真是。在chrome中6666端口被禁用的，其他被禁用的端口如下：</p><blockquote><p>1： // tcpmux<br>7： // echo<br>9： // discard<br>11： // systat<br>13： // daytime<br>15： // netstat<br>17： // qotd<br>19： // chargen<br>20： // ftp data<br>21： // ftp access<br>22： // ssh<br>23： // telnet<br>25： // smtp<br>37： // time<br>42： // name<br>43： // nicname<br>53： // domain<br>77： // priv-rjs<br>79： // finger<br>87： // ttylink<br>95： // supdup<br>101： // hostriame<br>102： // iso-tsap<br>103： // gppitnp<br>104： // acr-nema<br>109： // pop2<br>110： // pop3<br>111： // sunrpc<br>113： // auth<br>115： // sftp<br>117： // uucp-path<br>119： // nntp<br>123： // NTP<br>135： // loc-srv /epmap<br>139： // netbios<br>143： // imap2<br>179： // BGP<br>389： // ldap<br>465： // smtp+ssl<br>512： // print / exec<br>513： // login<br>514： // shell<br>515： // printer<br>526： // tempo<br>530： // courier<br>531： // chat<br>532： // netnews<br>540： // uucp<br>556： // remotefs<br>563： // nntp+ssl<br>587： // stmp?<br>601： // ??<br>636： // ldap+ssl<br>993： // ldap+ssl<br>995： // pop3+ssl<br>2049： // nfs<br>3659： // apple-sasl / PasswordServer<br>4045： // lockd<br>6000： // X11<br>6665： // Alternate IRC [Apple addition]<br>6666： // Alternate IRC [Apple addition]<br>6667： // Standard IRC [Apple addition]<br>6668： // Alternate IRC [Apple addition]<br>6669： // Alternate IRC [Apple addition]</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本博客用来记录在工作中遇到的各种疑难杂症及对应的解决方案，方便遇到同样问题时的检索。&lt;br&gt;问题及解决方案汇总：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;React.js + Next.js + i18next 报错：Module parse failed: Unexpected token (290:73) You may need an appropriate loader to handle this file type.&lt;/li&gt;
&lt;li&gt;利用 JSON.parse 进行解析的时候报错 ‘Unexpected token i in JSON at position 1’.&lt;/li&gt;
&lt;li&gt;使用 forEach 对数组进行循环改变数组本身的值，然后并没有生效.&lt;/li&gt;
&lt;li&gt;React.js + Next.js 跳转页面没问题，使用 safari 前进后退键的时候报错，使用 chrome 没问题.&lt;/li&gt;
&lt;li&gt;部分浏览器打开页面时报错：Object.assign is not a function.&lt;/li&gt;
&lt;li&gt;发送请求时控制栏报错：TypeError: Failed to execute ‘fetch’ on ‘Window’: Value is not a valid ByteString.&lt;/li&gt;
&lt;li&gt;数组为空的时候试用map方法无效.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="http://detachment.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="总结" scheme="http://detachment.club/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="JavaScript" scheme="http://detachment.club/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://detachment.club/tags/Node-js/"/>
    
      <category term="iOS" scheme="http://detachment.club/tags/iOS/"/>
    
      <category term="webview" scheme="http://detachment.club/tags/webview/"/>
    
      <category term="H5" scheme="http://detachment.club/tags/H5/"/>
    
      <category term="兼容" scheme="http://detachment.club/tags/%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 基础知识</title>
    <link href="http://detachment.club/2018/02/24/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://detachment.club/2018/02/24/MySQL基础知识/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2018-02-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;本博客用于记录与MySQL相关的知识点。</p><a id="more"></a><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>显示所有数据库：show databases（注意 databases 是复数形式）；</li><li>显示当前数据库中的所有表：show tables；</li><li>显示表结构：describe <code>table-name</code>;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本博客用于记录与MySQL相关的知识点。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://detachment.club/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://detachment.club/tags/MySQL/"/>
    
      <category term="基础" scheme="http://detachment.club/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数据库" scheme="http://detachment.club/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>再见了，2017</title>
    <link href="http://detachment.club/2017/12/27/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://detachment.club/2017/12/27/2017年终总结/</id>
    <published>2017-12-26T16:00:00.000Z</published>
    <updated>2017-12-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">加密文章，输入密码后查看</h3><div id="security"> <div> <div class="input-group"> <input type="text" style="padding:6px 2px 7px" class="form-control" aria-label="enter the password" id="pass" placeholder="请输入密码"/> <button type="button" onclick="decryptAES()">芝麻开门</button> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      本文章需权限访问
    
    </summary>
    
      <category term="总结" scheme="http://detachment.club/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工作" scheme="http://detachment.club/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="JavaScript" scheme="http://detachment.club/tags/JavaScript/"/>
    
      <category term="计划" scheme="http://detachment.club/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="2017" scheme="http://detachment.club/tags/2017/"/>
    
  </entry>
  
  <entry>
    <title>域名迁移</title>
    <link href="http://detachment.club/2017/06/13/%E5%9F%9F%E5%90%8D%E8%BF%81%E7%A7%BB/"/>
    <id>http://detachment.club/2017/06/13/域名迁移/</id>
    <published>2017-06-12T16:00:00.000Z</published>
    <updated>2017-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p> 本域名即将到期（6月22日），之后域名地址更改为：detachment.top。如果你一直在关注我的博客，别忘了更换地址。<br> 同时，在我 github 上的 <a href="https://github.com/Detachment/Detachment.github.io" target="_blank" rel="noopener">https://github.com/Detachment/Detachment.github.io</a> 这个项目里，你也可以找到我的最新博客地址，谢谢关注。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通知&quot;&gt;&lt;a href=&quot;#通知&quot; class=&quot;headerlink&quot; title=&quot;通知&quot;&gt;&lt;/a&gt;通知&lt;/h2&gt;&lt;p&gt; 本域名即将到期（6月22日），之后域名地址更改为：detachment.top。如果你一直在关注我的博客，别忘了更换地址。&lt;br&gt; 同时，
      
    
    </summary>
    
      <category term="博客" scheme="http://detachment.club/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://detachment.club/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="域名" scheme="http://detachment.club/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>漫漫前端路</title>
    <link href="http://detachment.club/2017/04/19/%E6%BC%AB%E6%BC%AB%E5%89%8D%E7%AB%AF%E8%B7%AF/"/>
    <id>http://detachment.club/2017/04/19/漫漫前端路/</id>
    <published>2017-04-18T16:00:00.000Z</published>
    <updated>2017-06-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;从正式辞职到又一次开始上班，我用了整整 13 个月（差一天），时间不饶人。<br>&nbsp;&nbsp;&nbsp;&nbsp;谨以此文记录在前端路上走的每一步。</p><a id="more"></a><h2 id="路之伊始"><a href="#路之伊始" class="headerlink" title="路之伊始"></a>路之伊始</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;假设我们足够聪明，我们可以在脑海中以时间为横坐标，以对自己的认可程度为纵坐标，作一条曲线。那么这条曲线便是我们的人生之路。很久以前睿智的长辈就告诉我们，有几个时刻对这条曲线的影响会远远大于其他时刻，这些时刻包括：高考、工作和婚姻。目前我已经经历了其中了两个时间点，我认为这么说其实并不恰当。知道自己想干什么 以及 开始追求喜欢的人，在我看来才是最关键的两个点。<br>&nbsp;&nbsp;&nbsp;&nbsp;大学四年在一种不断尝试以及不断失败的模式中度过，结果就是直到毕业也没有确定自己将来到底要走一条怎样的路。毕业后进入一家机械公司，为了更好的了解工艺，选择在制造部门呆了半年，然后转到设计部。这之后在设计部做了近一年半的机械工程师。表面上的一切顺利与躁动不安的年龄格格不入。15 年下半年发生了两件事情，其一是遇到了一个喜欢的女生，其二是家里发生了一些变故。这两件事情就像是两阵风，迎面吹过，平息了内心的躁动，竟考虑安定下来了。然而时间的力量是巨大的，只用了半年，事情发生了很大的变化，此时我又开始寻思改变了。创造所带来的成就感可以让我感觉到自己的存在，在这样的环境下我无法做到这点，不能再这样消极度日了。下定决心要转行了。<br>&nbsp;&nbsp;&nbsp;&nbsp;既然要转，就面临着选择的问题。根据面向工资转行定理，很自然的想两个行业：金融和计算机。在我看来，计算机的趣味性和可创造性胜过金融，所以我用小脑做出了转计算机的决定。然后又面临选择了：做前端还是后端？要想了解一个复杂的事情，大多会选择自己熟悉的点进行切入。最开始接触的是 Python，大学的时候两个室友都选修过这门课。然后通过了解知道这门胶水语言的强大，但也正因为它的强大，我放弃了它。因为如果选择学习它，不可避免的需要在更细分的领域做出选择，而做出选择不仅需要精力还需要智慧。在这样的背景下，机缘巧合接触到了前端。最初对前端的了解是学习路线明确，可快速上手，而且涉及到视觉和交互等方面（后来才知道这部分其实已经细分到 UI 及交互设计师了）。然后就开始了前端的学习之路。<br>&nbsp;&nbsp;&nbsp;&nbsp;学习路线在我的 16 年总结中已经说的比较详细了，总的来说就是一个不断尝试的过程。这篇博客中就另外两个选择说说自己当时的想法吧：其一是为什么不选择参加培训班，其二是为什么在自学半年后放弃工作机会而继续学习。<br>&nbsp;&nbsp;&nbsp;&nbsp;参加培训班从来都没有出现在我的选择范围，细细一想，存在的原因有以下几点。上面也提到过，整个大学阶段我都处于一种比较低落的状态，虽然在不断的尝试，却并没有寻找到自己的一条路。时间虽然能慢慢减弱这种挫败感，但却无论如何也无法消除。这种自我否定的想法让我时而变得非常消极，因此我想再给自己一段思考的时间，而这段时间到底多长，我无从得出结论。基于这样的原因，我希望这段时间能够完全按照自己的想法来生活，不管是学习、玩耍还是作息。而这一点，培训机构是无论如何也满足不了的。所以就此一点，就可以完全将培训机构排除在外了。对于一个从来没有出现在脑子里面的问题作出答案，原因是被问到的次数太多了。<br>&nbsp;&nbsp;&nbsp;&nbsp;为什么不尽早参加工作？ 一部分是因为上面提到的原因：我仍然没有找到自己想要的答案，这段时间尚不能结束。另一部分的原因是当时技术水平太低，很容易限制自己的眼界，从而形成技术天花板。当然了，这只是我的想法，对于是否正确，我现在还无法做出判断。只需要对自己的选择负责就问心无愧了。</p><h2 id="上下而求索"><a href="#上下而求索" class="headerlink" title="上下而求索"></a>上下而求索</h2><h3 id="2017-05-21-工作第一个月"><a href="#2017-05-21-工作第一个月" class="headerlink" title="2017-05-21 工作第一个月"></a>2017-05-21 工作第一个月</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;工作还差三天就满一个月了，说一说这一个月来的感受。<br>&nbsp;&nbsp;&nbsp;&nbsp;刚入职的时候，先熟悉公司的整体业务逻辑、技术栈和工具。知道了前端主要用 React 之后，开始跟着官方文档学习。学了差不多一个礼拜，文档还没有完全看完呢，松哥找我说，先写起来吧，这样学不是办法。然后就给了我一个重构页面的小任务练手。从这开始才真正的接触到公司的业务逻辑。这才感受到，看起来非常简单的页面，背后的逻辑竟这么复杂。之前自学的时候所接触和了解的部分和真正工作中的复杂程度根本不在一个量级，我所看到的只是冰山一角罢了。<br>&nbsp;&nbsp;&nbsp;&nbsp;写了两三天，一头雾水，完全不了解里面的数据流，写出来的页面显示不了任何数据。松哥过来看了看，啪啪啪的一顿写，数据就出来了。根据他修改的部分，我又重新去看了看 Reflux 的官方文档，再来对比实际的代码进行理解，终于有了一点感觉。继续写了两三天，数据没啥问题了，但又有了其他问题：关联样式。松哥一直强调代码和样式的复用，表面上我也确实理解，但是在实际的应用过程中却很难取得这样的效果。这个还得建立在对整个系统样式的理解上，否则很难做到游刃有余的复用之前的样式。<br>&nbsp;&nbsp;&nbsp;&nbsp;一个礼拜又过去了，给了我一个真正项目上的简单页面的编写任务。初步了解了下，感觉非常简单，一两天就能做出来。哈哈哈，还是太年轻。我的想法是先从接口获取数据，然后根据数据编写页面。捣鼓了两三天，又是 JQuery 又是 Openresty 的看，想把数据弄到手，结果一无所获。这时候松哥又出现了，告诉我接口先不管，先用静态的数据来模拟，之后再来帮我一起写接口。又是两三天，自认为样式差不多了，给松哥看了看，满以为完成的很好。松哥一看，一脸黑线：你这写的啥样式？这样的样式能复用吗？能自适应吗？有初始化吗？哈哈哈，我被问的一脸懵逼，确实是没有注意这些方面。之前自学的时候，只管在表面上看起来达到效果，哪管得上规范呐。这方面还是得多注意注意。之后开始写接口了，也是一问三不知，被松哥吐槽你咋啥都不知道。看完写好的代码，又学习了新姿势，开心。<br>&nbsp;&nbsp;&nbsp;&nbsp;高中物理老师说的一句话到现在还记得，说的是人对于知识体系的理解程度分为四个阶段：1. 不知道不知道；2. 知道不知道；3. 不知道知道；4. 知道知道。认为很有道理，然后对比分析了下自己，很明显的处于第一个阶段。所以有时候根本不知道自己应该加强哪些方面，因为所有方面都需要加强。这也是目前面临的一个最大的问题。我认为解决问题的最佳途径就是多和松哥以及公司的前辈交流。调整自己的步调，努力做到和公司共振的状态。<br>&nbsp;&nbsp;&nbsp;&nbsp;下个月的目标：一方面加强对公司业务逻辑的理解，另一方面在数据库和网络协议方面要下点心思。其实了解数据库也是为了更好的理解业务逻辑，有机统一。还有一点就是：技术博客还是得定期写一写，鞭策自己不断的学习。给自己定一个小要求，每两周写一篇技术博客，主题不限。每个月写一写总结，就更新一下这篇文章。</p><h3 id="2017-06-25-工作第二个月"><a href="#2017-06-25-工作第二个月" class="headerlink" title="2017-06-25 工作第二个月"></a>2017-06-25 工作第二个月</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;到昨天为止，工作满两个月。本来计划好的两周一篇技术博客，一个月一次的总结，现在却并没有做到。应该是时间有点紧，暂时还么有完全适应这种工作节奏吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;这个月大体在忙两件事：1. 学习 redux，为重构后台界面做准备；2. 补充完善现在正在做的 H5 页面。懂得了一个道理：在工作中，快速学习和快速开发能力是非常重要的。以前自己一直走的是系统性学习的路线，现在应该要在快速的经验式学习上有所投入。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从正式辞职到又一次开始上班，我用了整整 13 个月（差一天），时间不饶人。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;谨以此文记录在前端路上走的每一步。&lt;/p&gt;
    
    </summary>
    
      <category term="人生" scheme="http://detachment.club/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="心得" scheme="http://detachment.club/tags/%E5%BF%83%E5%BE%97/"/>
    
      <category term="人生" scheme="http://detachment.club/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>【权限】 经验不够，诚意来凑</title>
    <link href="http://detachment.club/2017/03/30/%E3%80%8A%E7%BB%8F%E9%AA%8C%E4%B8%8D%E5%A4%9F%EF%BC%8C%E8%AF%9A%E6%84%8F%E6%9D%A5%E5%87%91%E3%80%8B/"/>
    <id>http://detachment.club/2017/03/30/《经验不够，诚意来凑》/</id>
    <published>2017-03-29T16:00:00.000Z</published>
    <updated>2017-03-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">加密文章，输入密码后查看</h3><div id="security"> <div> <div class="input-group"> <input type="text" style="padding:6px 2px 7px" class="form-control" aria-label="enter the password" id="pass" placeholder="请输入密码"/> <button type="button" onclick="decryptAES()">芝麻开门</button> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      本文章需权限访问
    
    </summary>
    
      <category term="人生" scheme="http://detachment.club/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="求职" scheme="http://detachment.club/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="心得" scheme="http://detachment.club/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 基础知识总结（进行中）</title>
    <link href="http://detachment.club/2017/03/21/JavaScript%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://detachment.club/2017/03/21/JavaScript 基础知识总结/</id>
    <published>2017-03-20T16:00:00.000Z</published>
    <updated>2017-03-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇博客为 JavaScript 基础知识总结，长期更新。</p></blockquote><a id="more"></a><h2 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h2><h2 id="在-HTML-中使用-JavaScript"><a href="#在-HTML-中使用-JavaScript" class="headerlink" title="在 HTML 中使用 JavaScript"></a>在 HTML 中使用 JavaScript</h2><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h2 id="变量、作用域和内存问题"><a href="#变量、作用域和内存问题" class="headerlink" title="变量、作用域和内存问题"></a>变量、作用域和内存问题</h2><h3 id="基本类型和引用类型"><a href="#基本类型和引用类型" class="headerlink" title="基本类型和引用类型"></a>基本类型和引用类型</h3><p>按值访问：<br>按引用访问：  </p><h4 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h4><p>只能给引用类型值动态添加属性  </p><h4 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h4><h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><ul><li>ECMAScript 中所有函数的参数都是按值传递的  </li><li>命名参数：  </li></ul><h4 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h4><ul><li>基本类型： typeof</li><li>引用类型： instanceof</li></ul><h3 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h3><ul><li>执行环境：  </li><li>变量对象：   </li><li>作用域链：</li><li>活动对象：</li></ul><h4 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h4><p>两种情况下会延长： with 语句以及 try-catch 语句的 catch 块</p><h4 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h4><ul><li>声明变量：</li><li>查询标识符：</li></ul><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><p>原理：找到不再继续使用的变量，然后释放其占用的内存。</p><h4 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h4><p>JavaScript 中最常用的垃圾收集方式</p><h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>不太常见的垃圾收集策略。含义是跟踪记录每个值被引用的次数。</p><ul><li>循环引用：</li><li>将变量设置为 null 意味着切断变量与它之前引用的值之间的连接</li></ul><h4 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h4><p>讨论的是以怎样的标准来确定是否回收</p><h4 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h4><ul><li>解除引用：优化内存的最佳方式，就是为执行中的代码只保存必要的数据。一旦不再有用，最好将其值设置为 null 来释放引用。（解除引用并不意味着自动回收所占内存，而是让值脱离执行环境，以便垃圾收集器下次将其回收）</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><hr><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>在 ECMAScript 中，引用类型是一种数据结构，用于将数据和功能组织在一起。常被称为类，但并不妥当。因为尽管 ECMAScript 从技术上讲是一门面向对象的语言，但是不具备面向对象语言所支持的类和接口等基本结构。</p><ul><li>对象定义：</li><li>引用类型有时候也被称为对象定义</li><li>实例：</li><li>构造函数：</li></ul><h3 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h3><ul><li>创建：构造函数或者对象字面量</li><li>表达上下文：</li><li>语句上下文：</li><li>访问对象属性方式：点或者方括号，方括号会先计算后访问</li></ul><h3 id="Array-类型"><a href="#Array-类型" class="headerlink" title="Array 类型"></a>Array 类型</h3><ul><li>创建：构造函数（可省略 new ）或者数组字面量表示法</li><li>用字面量表示法创建时，不会调用相关函数（对象及数组都是这样）</li><li>数组的 length 可写</li></ul><h4 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h4><ul><li>对于只有一个全局作用域： instanceof</li><li>对于网页中包含多个框架： Array.isArray()</li></ul><h4 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h4><p>所有对象都有 toLocalString(), toString(), valueOf() 方法，对于数组：</p><ul><li>toString()：返回由数组每个值的字符串形式拼接而成并且以逗号隔开的字符串（实际上是调用数组每个值的 toString() 方法）</li><li>valueOf(): 返回数组</li><li>alert() 的参数应该是字符串形式，如果不是则会调用 toString() 方法</li><li>toLocalString()：除了是调用每个值的 toLocalString() 方法，其与和 toString() 没有区别</li></ul><h4 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h4><ul><li>栈：可以限制插入和删除项的数据结构，是一种 LIFO (last-in-first-out) 的数据结构</li><li>push()：参数任意，添加到数组末尾，返回的是 <strong>数字的长度</strong></li><li>pop()：移除数组最后一项，返回的是 <strong>被移除的项</strong></li></ul><h4 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h4><ul><li>队列：FIFO(First-in-First-Out)</li><li>shift(): 移除第一项，并返回该项，数组长度减一</li><li>unshift(): 在数组前端添加项，并返回数组长度</li></ul><h4 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h4><ul><li>reverse(): 反转数组的顺序</li><li>sort(): 默认情况下按照升序排列，其原理是调用每个项的 toString() 方法，然后比较字符串，不适用大多情况，因此常传入比较参数。</li></ul><h4 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h4><ul><li>concat(): 合并数组</li><li>slice(): 取部分数组</li><li>splice(): 接收多个参数，第一个为要删除的起始位置，第二个表示要删除的项数，第三个表示要插入的项。返回被删除的项，并且会改变原数组。</li></ul><h4 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h4><ul><li>indexOf(): 两参数，分别为要查找项及开始位置。返回在第一个匹配项在数组中的位置，不存在则返回 -1。使用全等比较。</li><li>lastIndexOf(): 同上，从数组末尾开始</li></ul><h4 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h4><p>每个方法接收两个参数：处理函数及作用域（可选）。处理函数接收三个参数：数组项、项的位置及数组对象。都不会改变原数组。</p><ul><li>every(): 在函数作用后，所有项返回 true 则返回 true</li><li>filter(): 返回函数结果为 true 的项组成的数组</li><li>forEach(): 无返回值</li><li>map(): 返回函数作用后的新数组</li><li>some(): 有一项返回 true 则返回 true</li></ul><h4 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h4><p>归并数组所有项，最终返回一个值。每个方法接收两个参数：作用在每一项的函数及归并基础值（可选）。每个函数接收四个参数：前一个值、当前值、项的索引以及数组对象</p><ul><li>reduce(): 从左往右</li><li>reduceRight(): 从右往左</li></ul><h3 id="Date-类型"><a href="#Date-类型" class="headerlink" title="Date 类型"></a>Date 类型</h3><ul><li>日起对象： new Date()，自动获得当前日期和时间</li><li>Date.parse(): 根据传入字符串返回对应毫秒数</li><li>Date.UTC(): 返回毫秒数，但传入参数不同</li><li>Date.now(): 调用该方法时的日期和时间毫秒数</li></ul><h4 id="继承的方法"><a href="#继承的方法" class="headerlink" title="继承的方法"></a>继承的方法</h4><h4 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h4><h4 id="日期-时间组件方法"><a href="#日期-时间组件方法" class="headerlink" title="日期/时间组件方法"></a>日期/时间组件方法</h4><p>都是日期对象中的属性，书本 P102</p><h3 id="RegExp-类型"><a href="#RegExp-类型" class="headerlink" title="RegExp 类型"></a>RegExp 类型</h3><ul><li>创建： 字面量形式 <code>var expression = / pattern(模式) / flags(标志)</code>，或者用 new RegExp() 构造函数</li><li>模式：正则表达式，如包含元字符则需转义</li><li>标志：匹配行为。有 g，i，m</li></ul><h4 id="RegExp-实例属性"><a href="#RegExp-实例属性" class="headerlink" title="RegExp 实例属性"></a>RegExp 实例属性</h4><p>主要实例属性有：global, ignoreCase, lastIndex, multiline, source。能获取模式的各种信息，但用途不大</p><h4 id="RegExp-实例方法"><a href="#RegExp-实例方法" class="headerlink" title="RegExp 实例方法"></a>RegExp 实例方法</h4><ul><li>exec():</li><li>test(): 接收一个字符串参数，匹配则返回 true，不匹配返回 false</li></ul><h4 id="RegExp-构造函数属性"><a href="#RegExp-构造函数属性" class="headerlink" title="RegExp 构造函数属性"></a>RegExp 构造函数属性</h4><p>主要属性有 input, lastMatch, lastParen, leftContext, multiline, rightContext</p><h4 id="模式的局限性"><a href="#模式的局限性" class="headerlink" title="模式的局限性"></a>模式的局限性</h4><p>虽比较完备，但还是缺少一些特性，比如：</p><ul><li>向后查找</li><li>交集和并集</li><li>原子组</li><li>Unicode 支持</li><li>条件匹配</li><li>等等</li></ul><h3 id="Function-类型"><a href="#Function-类型" class="headerlink" title="Function 类型"></a>Function 类型</h3><p>函数是一个对象，所以函数名实际上是一个指向函数对象的指针，不会和函数绑定</p><h4 id="没有重载（深入理解）"><a href="#没有重载（深入理解）" class="headerlink" title="没有重载（深入理解）"></a>没有重载（深入理解）</h4><p>将函数名想象为指针，有助于理解为什么 ECMAScript 中没有重载的概念</p><h4 id="函数声明和函数表达式"><a href="#函数声明和函数表达式" class="headerlink" title="函数声明和函数表达式"></a>函数声明和函数表达式</h4><p>JavaScript 引擎是怎么确定代码中是否有函数声明的？先得扫描全部代码还是有特定的标记？</p><h4 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h4><p>函数可以作为值来使用</p><h4 id="函数内部的属性"><a href="#函数内部的属性" class="headerlink" title="函数内部的属性"></a>函数内部的属性</h4><p>函数内部有两个特殊的对象：arguments, this</p><ul><li>arguments: 类数组对象。有一个特殊属性： callee，用于保存一个指向拥有此 arguments 对象的函数的指针（在阶乘函数中非常有用）</li><li>this：引用的是函数执行的环境对象</li><li>caller：保存了调用当前函数的函数的引用</li></ul><h4 id="函数属性和方法"><a href="#函数属性和方法" class="headerlink" title="函数属性和方法"></a>函数属性和方法</h4><p>每个函数都有两个属性：length 和 prototype</p><ul><li>length：函数希望接收的参数个数</li><li>prototype：对于 ECMAScript 的引用类型而言，prototype 是保存所有实例方法的真正所在。不可枚举   </li></ul><p>每个函数包含两个非继承而来的方法：apply()，call()。都用于设置函数中的 this 的值。最强大的地方在于扩中函数作用域。<br>还有一个方法： bind()，用于绑定函数实例的 this 的值   </p><p>函数继承而来的 toString(), toLocalString(), valueOf() 都会返回函数代码</p><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><p>三个特殊引用类型：Boolean, Number, String。每当读取一个基本类型时，后台会自动创建一个对应的基本包装类型对象。<br>引用类型及基本包装类型的主要区别在于对象的生存期。</p><h4 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h4><p>用处不大，容易造成误解</p><h4 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h4><ul><li>toFixed(): 按照指定小数位返回数值字符串表示</li><li>toExponential(): 以指数形式返回数字的字符串表示</li><li>toPrecision(): 以合适的形式返回数字的字符串表示</li></ul><h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h4><ul><li>length 属性：表示字符串中包含多少字符</li><li>charAt(): 获得指定位置的字符</li><li>charCodeAt(): 获得指定位置的字符编码</li><li>可以用方括号的方式访问字符</li><li>concat()</li><li>字符串操作方法：slice(), substr(), substring()。对原始字符串无影响。这三者在传入参数为负数时有很大的差别。</li><li>字符串位置方法：indexOf(), lastIndexOf()。第一个参数为需查找字符，第二个为查找开始位置。可通过第二个参数找到字符串中所有字符</li><li>trim()：删除字符串前置及后缀的所有空格</li><li>大小写转换：toLowerCase(), toLocaleLowerCase(), toUpperCase(), toLocaleUpperCase()</li><li>模式匹配方法：match()，参数为正则表达式，返回一个数组；search()，参数也为正则表达式，返回第一个匹配项的索引，没有则返回 -1；replace()，替换字符。第一个参数为正则表达式或者字符串，第二个参数为字符串或者函数，函数有三个参数：模式匹配项、匹配项位置及原始字符串。split() 根据指定的分隔符将字符串分割并返回一个结果的数组。</li><li>localCompare(): 比较两个字符串，并返回一个值（0，-1 或者 1）</li><li>fromCharCode(): 将接收的字符编码转换成字符串</li></ul><h3 id="单体内置对象"><a href="#单体内置对象" class="headerlink" title="单体内置对象"></a>单体内置对象</h3><p>由 ECMAScript 实现提供的，不依赖宿主环境的对象，在程序执行之前已经存在</p><h4 id="Global-对象"><a href="#Global-对象" class="headerlink" title="Global 对象"></a>Global 对象</h4><ul><li>编码方法：encodeURI(), encodeURIComponent(), decodeURI(), decodeURIComponent()</li><li><strong>eval():</strong> 好比一个完整的解析器，参数为要执行的代码。代码中的变量或者函数不会被提升，因为是在 eval() 执行时创建的</li><li>属性：undefined, NaN, Infinity 等等</li><li>window 对象</li></ul><h4 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h4><ul><li>属性：Math.E, Math.LN10 等等</li><li>方法：Math.min(), Math.max()</li><li>舍入方法：Math.ceil(), Math.floor(), Math.round()</li><li>随机：Math.rondom()</li><li>其他方法：Math.abs(), Math.log() 等等</li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><hr><h2 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h2><h3 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h3><h4 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h4><p>ECMAScript 中有两种属性：数据属性和访问器属性</p><ul><li>数据属性：[[Configurable]], [[Enumerable]], [[Writtable]], [[Value]]。如要修改，需要使用 Object.defineProperty() 方法，接收三个参数：属性所在对象、属性名以及一个描述符对象</li><li>访问器属性：访问器属性不包含数据值，包含 getter 函数以及 setter 函数。有四个特征：[[Configurable]], [[Enumerable]], [[Get]], [[Set]]</li></ul><h4 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h4><p>利用 Object.defineProperties() 方法一次定义多个属性</p><h4 id="读取属性的特征"><a href="#读取属性的特征" class="headerlink" title="读取属性的特征"></a>读取属性的特征</h4><p>利用 Object.getOwnPropertyDescriptor() 方法，接收两个参数，分别为属性所在对象及要读取描述符的属性名</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>抽象创建具体对象的过程。解决了创建多个相似对象的问题，却没解决对象识别的问题（即怎么知道一个对象的类型）</p><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><ul><li>与工厂模式三点不同：不显式的创建对象，直接将属性和方法赋给 this 对象，没有 return 语句</li><li>constructor 属性：指向构造函数</li><li>与工厂模式相比：优点是——可以将自定义的构造函数的实例标识为特定类型；缺点——每个方法都要在每个实例上重新创建一遍</li><li>可以将同种方法提取放在全局解决上述缺点，但是又形成另一个缺点：如果对象需要定义的方法太多，则全局函数过多，那么就毫无封装性可言了</li></ul><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>prototype 属性是一个指针，指向的对象包含了由特定类型的所有实例共享的属性和方法</p><ul><li>理解原型对象：prototype 属性。 [[Prototype]]是实例中指向构造函数原型对象的指针，虽无法访问，但可以通过 isPrototypeOf() 来确定这种关系。ES5 中可以通过 Object.getPrototypeOf() 来返回这个指针所指向的对象。不能通过对象实例重写原型对象中的属性，重新创建会屏蔽查找原型对象中的属性。hasOwnProperty() 用于判断属性存在实例中还是原型中。</li><li>原型与 in 操作符：单独使用时，只要能访问到的属性（不管是实例中还是原型对象中），都返回 true，因此可结合 hasOwnProperty() 判断属性。在 for-in 循环中使用时略有不同。获得所有可枚举的实例属性：Object.keys()，返回属性字符串数组。如果想获得所有实例属性，用 Object.getOwnPropertyNames() 方法。</li><li>更简单的原型语法：用对象字面量重写原型对象，但结果就是 constructor 属性不在指向当前构造函数，而是 Object 构造函数</li><li>原型的动态性</li><li>原生对象的原型</li><li>原型对象的问题：最大的问题是由共享的本性导致的。</li></ul><h4 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h4><p>构造函数模式定义实例属性，原型模式定义方法和共享属性</p><h4 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h4><p>将原型放在构造函数里面，通过 if 判断达到只执行一次的效果</p><h4 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h4><p>和工厂模式基本一样，区别在于使用 new 操作符。。。</p><h4 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h4><ul><li>稳妥对象：没有公共属性，其方法也不引用 this 的对象</li><li>与寄生模式不同之处：不使用 new 操作符，不引用 this</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>OO 语言支持两种继承方式：接口继承及实现继承。前者继承方法签名，后者继承方法本身。由于在 ECMAScript 中函数无签名，所以只能实现继承，主要通过原型链来实现。</p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>基本思想是利用原型链让一个引用类型继承另一个引用类型的属性和方法。让一个原型对象等于另一个类型的实例</p><ul><li>别忘记默认简单原型：所有的对象都继承自 Object 对象</li><li>确定原型和实例的关系：instanceof —— 只要构造函数在实例的原型链上出现过即返回 true；isPrototypeOf() 同样，只要原型链上出现过的原型都返回 true</li><li>谨慎的定义方法：先定义再添加，且添加的时候不能为对象字面量</li><li>原型链的问题：其一来自于包含引用类型值的原型；其二不能向超类型的构造函数传参</li></ul><h4 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h4><p>借用构造函数的基本思想是在子类型构造函数的内部调用超类型构造函数</p><ul><li>传递参数：可以向超类型构造函数传参</li><li>借用构造函数的问题：函数复用性差</li></ul><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>有时候也叫作伪经典继承，结合原型链继承和借用构造函数继承。使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承。最大的问题是无论什么情况下都会两次调用超类型的构造函数：一次是在创建子类型原型的时候，一次是在子类型构造函数的内部</p><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>借助原型可以基于已有对象创建新对象。 ES5 中的 Object.create() 方法用于规范原型式继承</p><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><p>思路与寄生构造函数和工厂模式类似</p><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><p>这种方式可以解决在组合继承模式下的问题。寄生组合式继承通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。普遍认为这种方式是引用类型最理想的继承方式。</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><hr><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>定义函数的两种方式：函数声明及函数表达式</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归函数是一个函数调用自身的情况下构成的。递归的时候，用 arguments.callee 比直接用函数名保险</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是指有权访问另外一个函数作用域的函数。<br>[[Scope]] 属性保存全局变量对象的作用域链<br>作用域链本质上是一个指向变量对象的指针列表，只引用但不包含实际的变量对象<br>闭包会携带包含函数的活动对象，所以比一般函数更占内存，所以使用的时候需要注意</p><h4 id="闭包与变量"><a href="#闭包与变量" class="headerlink" title="闭包与变量"></a>闭包与变量</h4><p>闭包只能取得包含函数中任何变量的最后一个值</p><h4 id="关于-this-对象"><a href="#关于-this-对象" class="headerlink" title="关于 this 对象"></a>关于 this 对象</h4><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p>闭包中引用了包含函数的活动对象</p><h3 id="模仿块级作用域"><a href="#模仿块级作用域" class="headerlink" title="模仿块级作用域"></a>模仿块级作用域</h3><p>将函数声明包含在一对圆括号中，表示它实际上是一个函数表达式。函数声明后面不能加圆括号，函数表达式可以。自执行匿名函数可以减少闭包占用内存的问题，因为执行完即销毁，没有指向匿名函数的引用了</p><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><p>任何函数中定义的变量，都可以认为是私有变量，因为不能在函数外部访问这些变量。<br>特权方法：指的是有权访问私有变量和私有函数的公用方法<br>缺点：针对每个实例都会创建同样一组新方法</p><h4 id="静态私有变量"><a href="#静态私有变量" class="headerlink" title="静态私有变量"></a>静态私有变量</h4><p>在私有作用域中封装构造函数并将公有方法添加到构造函数的原型中。这样每个通过这个构造函数创建的实例都会共享同样的方法。好处是有利于代码复用，坏处是每个实例都没有了自己的私有变量</p><h4 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h4><p>模块模式：为单例创建私有变量和特权方法。单例指的是只有一个实例的对象。JavaScript 中一般利用对象字面量的方式创建单例</p><h4 id="增强的模块模式"><a href="#增强的模块模式" class="headerlink" title="增强的模块模式"></a>增强的模块模式</h4><p>（不知所云）</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><hr><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h2 id="客户端检测"><a href="#客户端检测" class="headerlink" title="客户端检测"></a>客户端检测</h2><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h2 id="DOM-扩展"><a href="#DOM-扩展" class="headerlink" title="DOM 扩展"></a>DOM 扩展</h2><h2 id="DOM2-和-DOM3"><a href="#DOM2-和-DOM3" class="headerlink" title="DOM2 和 DOM3"></a>DOM2 和 DOM3</h2><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>事件流：描述从页面接收事件的顺序。一种是冒泡流（IE），一种是事件捕获流（网景）。</p><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p>从具体发生的元素到不具体的上层节点。<br>现代浏览器都支持事件冒泡</p><h4 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h4><p>接收事件的顺序和事件冒泡相反<br>老版本浏览器不支持，建议放心使用事件冒泡，有特殊需要时再使用事件捕获</p><h4 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h4><p>“DOM2 级事件” 中规定 的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段</p><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><p>事件是用户或者浏览器自身执行的某种动作，而响应这个动作的函数就叫做事件处理程序   </p><h4 id="HTML-事件处理程序"><a href="#HTML-事件处理程序" class="headerlink" title="HTML 事件处理程序"></a>HTML 事件处理程序</h4><ul><li>event 变量</li><li>利用 with 扩展作用域</li><li>缺点：其一是存在时差问题，其二是这样扩展事件处理程序的作用域链在不同浏览器中会导致不同结果，其三是 HTML 代码和 JavaScript 代码紧密耦合</li></ul><h4 id="DOM0-级事件处理程序"><a href="#DOM0-级事件处理程序" class="headerlink" title="DOM0 级事件处理程序"></a>DOM0 级事件处理程序</h4><h4 id="DOM2-级事件处理程序"><a href="#DOM2-级事件处理程序" class="headerlink" title="DOM2 级事件处理程序"></a>DOM2 级事件处理程序</h4><p>定义了两个方法：addEventListener() 以及 removeEventListener()，都接收三个参数：要处理的事件名，事件处理函数以及布尔值<br>通过 addEventListener()　添加的事件处理程序只能通过 removeEventListener() 来移除   </p><h4 id="IE-事件处理程序"><a href="#IE-事件处理程序" class="headerlink" title="IE 事件处理程序"></a>IE 事件处理程序</h4><p>定义了两个方法：attachEvent() 以及 detachEvent()，都接收两个参数：事件处理程序名及处理函数，事件会添加到冒泡阶段<br>和 DOM0 级处理程序的差异：DOM0 级中事件处理程序在元素的作用域作用域中运行，而 IE 则在全局作用域，因此 this 值不同<br>有多个处理程序时，后添加的先执行</p><h4 id="跨浏览器的事件处理程序"><a href="#跨浏览器的事件处理程序" class="headerlink" title="跨浏览器的事件处理程序"></a>跨浏览器的事件处理程序</h4><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>触发 DOM 上的事件时会产生一个事件对象 event，这个对像包含所有与事件相关的信息</p><h4 id="DOM-中的事件对象"><a href="#DOM-中的事件对象" class="headerlink" title="DOM 中的事件对象"></a>DOM 中的事件对象</h4><ul><li>在事件处理程序内部，对象 this 始终等于 currentTarget 的值，而 target 则只包含事件的实际目标  </li><li>enent 的 type 属性</li><li>阻止特定事件的默认行为，可使用 preventDefault() 方法。注意，只有 cancelable 属性设置为 true 的事件才可以使用此方法来取消其默认行为</li><li>stopPropagation() 方法用于立即停止事件处理程序在 DOM 层次中的传播</li><li>eventPhase 属性</li><li>event 对象只存在于事件处理程序执行期间，执行完后即被销毁</li></ul><h4 id="IE-中的事件对象"><a href="#IE-中的事件对象" class="headerlink" title="IE 中的事件对象"></a>IE 中的事件对象</h4><h4 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h4><p>将所有的情况封装到一个函数中，根据不同的情况判断后执行（其实主要是 IE 和其他浏览器）</p><hr><blockquote><p>后面的内容之后再来复习</p></blockquote><h2 id="表单脚本"><a href="#表单脚本" class="headerlink" title="表单脚本"></a>表单脚本</h2><h2 id="使用-Canvas-绘图"><a href="#使用-Canvas-绘图" class="headerlink" title="使用 Canvas 绘图"></a>使用 Canvas 绘图</h2><h2 id="HTML5-脚本编程"><a href="#HTML5-脚本编程" class="headerlink" title="HTML5 脚本编程"></a>HTML5 脚本编程</h2><h2 id="错误处理及调试"><a href="#错误处理及调试" class="headerlink" title="错误处理及调试"></a>错误处理及调试</h2><h2 id="JavaScript-和-XML"><a href="#JavaScript-和-XML" class="headerlink" title="JavaScript 和 XML"></a>JavaScript 和 XML</h2><h2 id="E4X"><a href="#E4X" class="headerlink" title="E4X"></a>E4X</h2><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h2 id="Ajax-与-Comet"><a href="#Ajax-与-Comet" class="headerlink" title="Ajax 与 Comet"></a>Ajax 与 Comet</h2><p>Ajax 指的是 Asynchronous JavaScript XML，技术的核心是 XMLHttpRequest 对象（简称 XHR）</p><h3 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h3><h4 id="XHR-的用法"><a href="#XHR-的用法" class="headerlink" title="XHR 的用法"></a>XHR 的用法</h4><ul><li>open() 方法</li><li>send() 方法</li><li>响应后的 XHR 对象属性：responseText, responseXML, status, statusText, readyState(0, 1, 2, 3, 4)(异步请求时的属性)</li><li>readystatechange 事件</li><li>abort() 方法</li></ul><h4 id="HTTP-头部信息"><a href="#HTTP-头部信息" class="headerlink" title="HTTP 头部信息"></a>HTTP 头部信息</h4><ul><li>setRequestHeader()：设置自定义头部信息，需要在 open() 方法之后，sent() 方法之前调用</li><li>getResponseHeader(): 取得特定响应头部信息</li><li>getAllResponseHeaders(): 返回多个头部信息</li></ul><h4 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h4><p>常用于向服务器查询某些信息<br>查询字符串的参数名和值都需要使用 encodeURIComponent() 编码后才能放在 URL 末尾</p><h4 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h4><p>向服务器发送应该被保存的数据<br>模仿表单提交来发送数据</p><h3 id="XMLHttpRequest-2-级"><a href="#XMLHttpRequest-2-级" class="headerlink" title="XMLHttpRequest 2 级"></a>XMLHttpRequest 2 级</h3><p>并非所有浏览器都完整的实现了 2 级规范，但所有的浏览器都实现了它规定的部分内容</p><h4 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h4><p>FormData 为序列化表单及创建与表单格式相同的数据（用于通过 XHR 传输）提供了便利<br>方便之处体现在不需要明确的在 XHR 对象上设置请求头部</p><h4 id="超时设定"><a href="#超时设定" class="headerlink" title="超时设定"></a>超时设定</h4><p>IE8 是唯一支持 timeout 属性的浏览器</p><h4 id="overrideMimeType-方法"><a href="#overrideMimeType-方法" class="headerlink" title="overrideMimeType() 方法"></a>overrideMimeType() 方法</h4><h3 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h3><p>6个进度事件：loadstart, progress, error, abort, load, loadend。目前大部分支持前面五个事件，目前还没有浏览器支持 loadend 事件。</p><h4 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h4><h4 id="progress-事件"><a href="#progress-事件" class="headerlink" title="progress 事件"></a>progress 事件</h4><p>三个属性：lengthComputable, position, totalSize<br>可以根据这个属性为用户创建一个进度指示器</p><h3 id="跨域源资源共享"><a href="#跨域源资源共享" class="headerlink" title="跨域源资源共享"></a>跨域源资源共享</h3><p>CORS(Cross-Origin Resource Sharing) 跨域源资源共享<br>基本思想：使用自定义的 http 头部让浏览器与服务器进行沟通，从而决定请求或者响应是否成功</p><h4 id="IE-对-CORS-的实现"><a href="#IE-对-CORS-的实现" class="headerlink" title="IE 对 CORS 的实现"></a>IE 对 CORS 的实现</h4><p>在 IE8 中引入了 XDR(XDomainRequest) 类型，与 XHR 类似，但能实现安全可靠的跨域通信。<br>所有 XDR 请求都是异步执行的，不能用它来创建同步请求</p><h4 id="其他浏览器对-CORS-的实现"><a href="#其他浏览器对-CORS-的实现" class="headerlink" title="其他浏览器对 CORS 的实现"></a>其他浏览器对 CORS 的实现</h4><p>其他浏览器都通过 XMLHttpRequest 对象实现了对 CORS 的原生支持</p><h4 id="Preflighted-Reqeusts"><a href="#Preflighted-Reqeusts" class="headerlink" title="Preflighted Reqeusts"></a>Preflighted Reqeusts</h4><h4 id="带凭据的请求"><a href="#带凭据的请求" class="headerlink" title="带凭据的请求"></a>带凭据的请求</h4><p>withCredentials 属性</p><h4 id="跨浏览器的-CORS"><a href="#跨浏览器的-CORS" class="headerlink" title="跨浏览器的 CORS"></a>跨浏览器的 CORS</h4><p>条件判断浏览器，主要区别在于 XDR 和 XHR</p><h3 id="其他跨域技术"><a href="#其他跨域技术" class="headerlink" title="其他跨域技术"></a>其他跨域技术</h3><h4 id="图像-Ping"><a href="#图像-Ping" class="headerlink" title="图像 Ping"></a>图像 Ping</h4><p>图像 Ping 是与服务器进行简单、单向的跨域通信的一种方式<br>常用于跟踪用户点击页面或动态广告曝光次数。缺点有二：其一是只能发送 GET 请求，其二是无法访问服务器的响应文本。<br>图像 Ping 只能用于浏览器与服务器间的单向通讯</p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>JSONP 是 JSON with padding 的简写，由回调函数及数据组成。<br>极为流行，因为简单易用。与图像 Ping 相比，优点在于可以直接访问响应文本，而且支持浏览器和服务器之间双通信。两点不足：从其他域加载涉及到安全问题，要确定请求失败并不容易。</p><h4 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h4><p>Comet 是一种服务器向页面推送数据的技术。（由 Alex Russell 发明）<br>两种实现 Comet 方式：长轮询和流<br>长轮询是传统轮询（也称为短轮询）的翻版：页面发起一个服务器请求，然后服务器一直保持打开，直到有数据可发送<br>HTTP 流：浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性的向服务器发送数据</p><h4 id="服务器发送事件"><a href="#服务器发送事件" class="headerlink" title="服务器发送事件"></a>服务器发送事件</h4><p>SSE（服务器发送事件）：围绕只读 Comet 交互推出的 API 或者模式。支持短轮询、长轮询和 HTTP 流，而且在断开时能够自动确定何时重新连接。   </p><ul><li>EventSource 对象</li></ul><h4 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h4><p>目标是在一个单独的持久连接上提供双工、双向通信<br>好处：能够在客户端和服务器之间发送非常少的数据，适合移动应用<br>坏处：制定协议的时间比制定 JavaScript API 的时间还要长，而且可能存在一致性和安全性的问题</p><h4 id="SSE-与-Web-Sockets"><a href="#SSE-与-Web-Sockets" class="headerlink" title="SSE 与 Web Sockets"></a>SSE 与 Web Sockets</h4><p>考虑两点：其一是否有自由度建立和维护 Web Sockets 服务器；其二是否需要双向通信</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>CSRF(Cross-Site Reqeust Forgery)：跨站点请求伪造</p><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><hr><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h3><h4 id="安全的类型检测"><a href="#安全的类型检测" class="headerlink" title="安全的类型检测"></a>安全的类型检测</h4><p>利用 Object.prototype.toString.call(name) 对变量名为 name 的对象进行检测，返回的结果形式 [object NativeConstructorName] 就显示了其构造函数名。注意这种方法不能检测非原生构造函数的构造函数名。</p><h4 id="作用域安全的构造函数"><a href="#作用域安全的构造函数" class="headerlink" title="作用域安全的构造函数"></a>作用域安全的构造函数</h4><h4 id="惰性载入函数"><a href="#惰性载入函数" class="headerlink" title="惰性载入函数"></a>惰性载入函数</h4><p>惰性载入表示函数执行的分支仅会发生一次。<br>实现方式：其一是在函数被调用时再处理函数，其二是在声明时就指定适当的函数    </p><h4 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h4><p>主要用于事件处理程序及定时器中</p><h4 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h4><p>基本方法：使用闭包返回一个函数</p><h3 id="防篡改对象"><a href="#防篡改对象" class="headerlink" title="防篡改对象"></a>防篡改对象</h3><p>一旦把对象定义为防篡改，就无法撤销了。</p><h4 id="不可扩展对象"><a href="#不可扩展对象" class="headerlink" title="不可扩展对象"></a>不可扩展对象</h4><p>Object.preventExtensions() 以及 Object.isExtensible()<br>不可扩展，但已有成员可以修改和删除</p><h4 id="密封的对象"><a href="#密封的对象" class="headerlink" title="密封的对象"></a>密封的对象</h4><p>密封对象不可扩展而且已有成员不能被删除<br>通过 Object.seal() 来密封，也可以通过 Object.isSealed() 来检测是否被密封</p><h4 id="冻结的对象"><a href="#冻结的对象" class="headerlink" title="冻结的对象"></a>冻结的对象</h4><p>最严格的防篡改级别是冻结对象，既不可扩展，又是密封的，而且数据属性的 [[Writtable]] 特性会被设置为 false。如果定义 [[Set]] 函数，访问器属性仍然是可写的。<br>Object.freeze()   </p><h3 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h3><p>关于定时器要记住的最重要的事情是：指定的时间间隔表示何时将定时器的代码添加到队列，而不是何时实际执行代码。</p><h4 id="重复的定时器"><a href="#重复的定时器" class="headerlink" title="重复的定时器"></a>重复的定时器</h4><p>主要的问题是某些间隔可能会被跳过，而且多个定时器的代码执行之间的间隔可能会比预期小。解决办法是链式调用延时定时器。</p><hr><h2 id="离线应用与客户端存储"><a href="#离线应用与客户端存储" class="headerlink" title="离线应用与客户端存储"></a>离线应用与客户端存储</h2><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h2 id="新兴的-API"><a href="#新兴的-API" class="headerlink" title="新兴的 API"></a>新兴的 API</h2><hr><h2 id="ECMAScript-6-入门"><a href="#ECMAScript-6-入门" class="headerlink" title="ECMAScript 6 入门"></a>ECMAScript 6 入门</h2><h3 id="ECMAScript-6-简介"><a href="#ECMAScript-6-简介" class="headerlink" title="ECMAScript 6 简介"></a>ECMAScript 6 简介</h3><p>###</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇博客为 JavaScript 基础知识总结，长期更新。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="总结" scheme="http://detachment.club/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="基础" scheme="http://detachment.club/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://detachment.club/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建 《vue-hackernews-2.0》</title>
    <link href="http://detachment.club/2017/03/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%20Vue-HackerNews-2.0%20%E9%A1%B9%E7%9B%AE/"/>
    <id>http://detachment.club/2017/03/11/从零开始构建 Vue-HackerNews-2.0 项目/</id>
    <published>2017-03-10T16:00:00.000Z</published>
    <updated>2017-03-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎大家来到我的第一个程序搭建教程: <strong>从零开始搭建 《vue-hackernews-2.0》</strong>。</p><blockquote><p>项目源码地址: <a href="https://github.com/Detachment/Build-vue-hackernews-2.0-from-scratch" target="_blank" rel="noopener">Bulid vue-hackernews-2.0 from Scratch</a>   </p></blockquote><p>作为一个前端开发的初学者，在接触学习到 Vue.js 的时候，我发现官方提供并极力推荐的项目《vue-hackernews-2.0》对于新手而言比较难理解。但同时我又被这种高度工业化的项目所吸引，所以我决定花一段时间来弄清楚这个项目到底是怎么运行起来的。 在这个教程中我将会通过利用不同的版本的迭代的方式来逐步重建这个项目。</p><a id="more"></a><p><strong>这个项目是面向初学者的。</strong> 整个教程中，我逐步实现了这个项目的四个版本，每一个版本之间有一定的递进关系。为了方便理解掌握每个版本的内容，在每个版本的说明中，我会尽量把在相应版本中所需要掌握的知识点列出来。</p><blockquote><p>注明：简便起见，如未特别说明，在之后的所有章节中我会用 Vue-HN 来代替 vue-hackernews-2.0 项目。 项目运行的系统是 Windows 7，因条件限制未在其他系统上测试，请见谅。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="0-Vue-js-Vuex-Vue-router-HN-API-Firebase-ES6"><a href="#0-Vue-js-Vuex-Vue-router-HN-API-Firebase-ES6" class="headerlink" title="0. Vue.js, Vuex, Vue-router, HN API, Firebase, ES6"></a>0. Vue.js, Vuex, Vue-router, HN API, Firebase, ES6</h3><h4 id="章节前言"><a href="#章节前言" class="headerlink" title="章节前言"></a>章节前言</h4><p>作为一个前端初学者，我对最原始的页面构造比较熟悉，也就是页面只由 HTML、CSS 以及 JavaScript 构成。所以自从我开始学习 Vue-HN 这个项目我就想是不是可以用最原始的方法来实现这个项目（当然，不考虑用户体验及性能等方面）。在经过多次失败的尝试之后，我终于只利用 Vue.js 及其生态中的一些库实现了这个版本。下面这两个动图就分别是我这个版本和官方版本。</p><p align="center"><br>    <img src="http://o9ybnkuir.bkt.clouddn.com/vue-hackernews/0-edition/Anthor.gif" width="700px" alt="Origin Website"><br>    [ 我的版本 ]<br>    <br><br>    <img src="http://o9ybnkuir.bkt.clouddn.com/vue-hackernews/0-edition/Mine.gif" width="700px" alt="Plane Vue.js"><br>    [ 官方版本 ]<br></p><p>从上面的动图我们可以清楚的看到，基本上官方给出例子中的所有功能在我这个版本中都被实现出来了，而且仅仅只依赖于 Vue.js 以及其生态中的一些库。在开始搭建这个版本的项目之前，你应该对下面所列的链接中的知识点有所了解。了解完之后开始看代码才会有初步的认识。（了解每个链接对应的知识点即可，链接仅供参考。比如要了解 ES2015 的知识，就很推荐阮一峰老师的教程）</p><ul><li><a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js 2.0: The Progressive JavaScript Framework</a></li><li><a href="https://router.vuejs.org/en/" target="_blank" rel="noopener">Vue-router 2.0: A Simple Router for Vue.js</a></li><li><a href="http://vuex.vuejs.org/en/" target="_blank" rel="noopener">Vuex 2.0: State Management Patter and Library for Vue.js Application </a></li><li><a href="https://github.com/HackerNews/API" target="_blank" rel="noopener">Hacker News API: HackerNews API Works with Firebase</a></li><li><a href="https://babeljs.io/learn-es2015/" target="_blank" rel="noopener">Learn ES2015: A detailed overview of ECMAScript 2015 features</a></li><li><a href="https://firebase.google.com/docs/web/setup" target="_blank" rel="noopener">Firebase: App success made simple</a></li></ul><p>一眨眼看到需要了解这么多资料，你可能会被吓到。其实你不用担心，因为列出来的这些链接中除了 Vue.js 及其生态需要花较多时间来深入了解之外，其与的只需要稍微了解就行。比如 ES6 的内容，你暂时只需要了解箭头函数、 Promise 异步操作、扩展运算符等一些基本知识。另外两个链接则是 API，在用到的时候稍微花一点点时间浏览官方文档就行。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>搭建这个版本的时候，有几个关键的技术难点需要解决：</p><ul><li><p>怎样在不安装 Firebase 包的情况下通过 HackerNews 提供的 API 获取所需要的数据？<br><strong>Answer :</strong> 通过阅读 Firebase 的官方文档，我发现可以通过在文件中通过连接引入的方式来获取 Firebase 包的内容。除此之外，本地只需要针对项目稍加配置就行。下面是通过与不通过安装包的两种本地配置代码：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// without installing firebase package:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    databaseURL: <span class="string">"https://hacker-news.firebaseio.com"</span></span><br><span class="line">&#125;;</span><br><span class="line">firebase.initializeApp(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> api = firebase.database().ref(<span class="string">'/v0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// with firebase package:</span></span><br><span class="line"><span class="keyword">import</span> Firebase <span class="keyword">from</span> <span class="string">'firebase'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = inBrowser</span><br><span class="line">  ? <span class="keyword">new</span> Firebase(<span class="string">'https://hacker-news.firebaseio.com/v0'</span>)</span><br><span class="line">  : (process.__API__ || (process.__API__ = createServerSideAPI()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createServerSideAPI</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> api = <span class="keyword">new</span> Firebase(<span class="string">'https://hacker-news.firebaseio.com/v0'</span>)</span><br></pre></td></tr></table></figure></li><li><p>怎么实现 vuex 和 router 之间的通讯？<br><strong>Answer :</strong> 保证通讯需要注意以下两点:</p><ul><li>在同一个 Vue 实例里面注册这两个插件;</li><li>通过一个叫做 “vuex-router-sync” 的插件实现通讯.  <blockquote><p>注意: 因为我们这个版本中并没有引入包管理工具，所以我们需要手动将这个插件包的 index.js 文件中的代码提取出来，稍作更改后通过链接的形式引入到主页面*    </p></blockquote></li></ul></li><li><p>怎么转换各个单文件组件（也就是 .vue 文件）？<br><strong>Answer :</strong> 每个单文件组件都包含三个部分： HTML 模板， JavaScript 脚本以及 CSS 样式。模板部分我们通过 “x-template” 来替换， JavaScript 脚本我们通过 “Vue.extend” 来替换， CSS 样式则直接写在样式表中就可以了。如果你想知道详细的信息，那就需要下载源码来瞧瞧了。</p></li></ul><p>在攻克这些难点，又加上对于 Vue.js 及其生态有较深入的了解之后，你应该也能自己完成这个版本的项目搭建过程了！（虽然不能用于生产，没有什么实际意义，但是实现的过程我认为还是很有意思的。）</p><blockquote><p>注意：因为文件之间的依赖原因，所以浏览器对于主页面文件头中的链接加载顺序直接影响到这个版本的成败。经测试，在 Firefox 和 IE 中都会优先加载本地文件然后加载外链，这并不是我所希望的顺序，所以在这两个浏览器中测试失败（可以通过将本地文件上传云存储，然后替换成外链解决）。在 Chrome 中测试成功。</p></blockquote><h4 id="后续版本"><a href="#后续版本" class="headerlink" title="后续版本"></a>后续版本</h4><p>目前一切顺利。但是如果我们更耐心些，重新审视这个版本的项目，我们会发现存在一些致命的缺陷。比如所有的文件都很混乱，项目的结构非常的脆弱，而且没有任何措施用于提高访问速度、优化用户体验。这些都会造成很高的维护成本。<br>在下一个版本中，我们将针对这些作出一些改进。  </p><hr><h3 id="1-Webpack-Vue-js-Vue-router-Vuex-and-Hackernews-API"><a href="#1-Webpack-Vue-js-Vue-router-Vuex-and-Hackernews-API" class="headerlink" title="1. Webpack, Vue.js, Vue-router, Vuex and Hackernews API"></a>1. Webpack, Vue.js, Vue-router, Vuex and Hackernews API</h3><h4 id="章节前言-1"><a href="#章节前言-1" class="headerlink" title="章节前言"></a>章节前言</h4><p>经过第一个版本后，我们对这个项目有了初步的了解。在这个版本中，我们会使用一些工具，使得我们这个项目初步模块化，同时也更加便于维护。在这个版本中我们将会使用到一些基本的插件和包，并通过 webpack 来实现功能。我们只需要简单的配置一下 webpack 就行，不会涉及到服务器端的内容，不会涉及缓存也不会涉及生产模式及开发模式的不同配置。下面的动图就是这个版本的成品，同时这个动图里面还包含了对整个项目的简单解构。</p><p align="center"><br>    <img src="http://o9ybnkuir.bkt.clouddn.com/vue-hackernews/1-edition/first_edition.gif" width="700px" alt="Basic functions and simple deconstruction"><br>    [ 基本功能及简单解构 ]<br></p><p>为了更好的理解这个版本的内容，下面会列出一些需要了解的工具、插件和库的链接，你只需要对这些有基本的了解就行。（如果前面版本中已经列出来了，那么本节将不再重复。比如 Vue.js 及其生态、ES6 等等）：</p><ul><li><a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack 2.0: Moudle Bundler</a></li><li><a href="https://www.npmjs.com/package/es6-promise" target="_blank" rel="noopener">Package: es6-promise</a></li><li><a href="https://www.npmjs.com/package/firebase" target="_blank" rel="noopener">Package: firebase</a></li><li><a href="https://www.npmjs.com/package/vuex-router-sync" target="_blank" rel="noopener">Package: vuex-router-sync </a></li><li><a href="https://www.npmjs.com/package/buble" target="_blank" rel="noopener">Package: buble</a></li><li><a href="https://www.npmjs.com/package/buble-loader" target="_blank" rel="noopener">Package: buble-loader</a></li><li><a href="https://www.npmjs.com/package/css-loader" target="_blank" rel="noopener">Package: css-loader</a></li><li><a href="https://www.npmjs.com/package/file-loader" target="_blank" rel="noopener">Package: file-loader</a></li><li><a href="https://www.npmjs.com/package/rimraf" target="_blank" rel="noopener">Package: rimraf</a></li><li><a href="https://www.npmjs.com/package/stylus" target="_blank" rel="noopener">Package: stylus</a></li><li><a href="https://www.npmjs.com/package/autoprefixer" target="_blank" rel="noopener">Package: autoprefixer</a></li><li><a href="https://www.npmjs.com/package/stylus-loader" target="_blank" rel="noopener">Package: stylus-loader</a></li><li><a href="https://www.npmjs.com/package/url-loader" target="_blank" rel="noopener">Package: url-loader</a></li><li><a href="https://www.npmjs.com/package/vue-loader" target="_blank" rel="noopener">Package: vue-loader</a></li></ul><p>上面的清单好像有点过长，很容易唬到人，不过完全不用担心。因为对于这些工具、插件和库，我们目前所需要了解的仅仅是它们的用途是什么以及怎么正确的使用它们。相信我，这些对于所有人来说都是没有什么难度的。（英语不好的可以借助各种翻译工具，问题也不大）</p><h4 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h4><p>搭建这个版本有几个比较重要的步骤，下面将分别对每一步进行简单的介绍。</p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p><strong>项目结构分析。</strong> 其实这一步应该是写在上一个版本中的，因为每当我们开始做一个新的项目的时候，不可避免的需要先去考虑项目的整体结构、功能、风格以及通过怎样是手段来实现这些。分析完以后再来动手代码搭建整个项目才是正确的方式。这个项目的简单解构在上面的动图中已经展示出来了（解构在动图的后半部分，耐心看完）。<br>简单归纳，项目的结构还是比较简单的，主要由几个不同的页面组成，每个页面又由几个相同或者不同的组件组成。  </p><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p><strong>获取数据。</strong> 把获取数据作为第二步是因为它和项目的整体结构是独立的。在这一步我们需要利用到由 HackerNews 官方提供的 API（这个 API 利用 Firebase 制作）。然后定义一些获取数据的函数，形成 api.js 文件。然后在 Vuex 中调用这些函数，达到数据集中管理的目的。完成这一步后，项目的目录大概是这样子的：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> -- src</span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- store</span></span><br><span class="line">|<span class="string">           </span>|<span class="string"> -- api.js    </span></span><br><span class="line">|<span class="string">           </span>|<span class="string"> -- index.js</span></span><br></pre></td></tr></table></figure></p><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p><strong>搭建组件及页面。</strong> 基于第一步中对于项目的结构分析，我们开始编写组件及页面的代码。先编写组件的代码，然后将组件引入到页面中，再来构建页面。组件直接可以通过 <code>components option</code> 来相互引入，父子组件之间的数据传递可以利用 <code>props</code> 特性。完成这一步之后，项目结构大概是这样子的：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> -- src</span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- store</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- api.js    </span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- index.js</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">        </span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- components</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- Item.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- ItemList.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- Comment.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- Spinner.vue</span></span><br><span class="line">|<span class="string">    </span>|</span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- views</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- ItemView.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- UserView.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- CreateListView.js</span></span><br></pre></td></tr></table></figure></p><h5 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h5><p><strong>完成项目剩下部分。</strong> 在这一步中，我们会引入 Vue.js 的路由系统：Vue-router。引入后，我们就可以将组件中的链接替换成路由中的路径。然后利用前文提到过的 <code>vuex-router-sync</code> 插件来同步路由和数据中心。除此之后，我们还需要定义几个全局筛选函数，并且注册在同一个 Vue 实例中。其他还有一些小的工作，比如引入 logo 图片，新建入口文件（为下一步 webpack 打包做准备）等等。完成这一步之后的项目目录大概如下所示：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">-- public</span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- logo-48.png</span></span><br><span class="line">|</span><br><span class="line">|<span class="string">-- src</span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- store</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- api.js    </span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- index.js</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">        </span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- components</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- Item.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- ItemList.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- Comment.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- Spinner.vue</span></span><br><span class="line">|<span class="string">    </span>|</span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- views</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- ItemView.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- UserView.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- CreateListView.js</span></span><br><span class="line">|<span class="string">    </span>|</span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- filters</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string"> -- index.js</span></span><br><span class="line">|<span class="string">    </span>|</span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- router</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">       </span>|<span class="string">-- index.js</span></span><br><span class="line">|<span class="string">    </span>|</span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- app.js</span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- App.vue</span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- entry.js</span></span><br><span class="line">|<span class="string">    </span>|<span class="string"> -- index.html</span></span><br></pre></td></tr></table></figure></p><h5 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h5><p><strong>终于要用上 webpack 啦！</strong> 如果你对于 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> , <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 以及 <a href="https://docs.npmjs.com/getting-started/what-is-npm" target="_blank" rel="noopener">npm</a> 这些内容完全不知道，那么你就需要在开始这一步之前花几个小时的时间来了解一下。 在这个版本中，我们利用包管理工具 <code>npm</code> 来安装或者卸载插件。在初始化我们的项目的时候，我们既可以通过在命令行中输入 <code>npm init</code> （自动新建 node 配置文件，默认文件名为 <code>package.json</code> ）又可以自己手动新建一个名为 <code>package.json</code> 的配置文件。安装完各种插件后，我们可以开始配置 webpack 了。为了方便起见，我们会新建一个配置文件，默认文件名为 <code>webpack.config.js</code> ，在这个文件里面我们将会对项目进行简单配置。具体的配置情况可以去看原文件。   </p><blockquote><p>注意：在使用 <code>npm</code> 之前，你必须先安装最新版本的 <code>node.js</code>，否则无法运行成功。</p></blockquote><h4 id="后续版本-1"><a href="#后续版本-1" class="headerlink" title="后续版本"></a>后续版本</h4><p>对比上一个版本，我们在这个版本已经有点取得了一点进步，因为这个版本开始初步模块化了，也更加的易于维护。由于文件依赖及链接加载顺序的的关系，上一个版本只支持在 Chrome 浏览器中运行，而这个版本则不存在这个问题。因为我们在组件化的过程中已将所需要的对应依赖通过模块引入了。<br>然而，这个版本的项目还远远不够完美。在下一个版本中，我们将会将更多的因素考虑在内，而这些因素都会对用户体验产生很重要的影响。</p><hr><h3 id="2-Server-Packages-and-Plugins-for-Better-Performance"><a href="#2-Server-Packages-and-Plugins-for-Better-Performance" class="headerlink" title="2. Server, Packages and Plugins for Better Performance"></a>2. Server, Packages and Plugins for Better Performance</h3><h4 id="章节前言-2"><a href="#章节前言-2" class="headerlink" title="章节前言"></a>章节前言</h4><p>于我而言，这个版本是整个项目中最难的一个版本。为了优化用户体验，原作者将很多因素考虑在内，这就会带来很多需要了解的新知识，比如 node.js 中的 express 框架以及各种插件。服务器端及客户端、生产模式及调试模式的不同配置是这个版本的重点。在接下来的片段中，我会将我所理解的部分分享给大家。<br>由于这个版本和<a href="https://vue-hn.now.sh/top" target="_blank" rel="noopener">官网</a>的一样，我就不上效果图了。</p><h4 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h4><ol><li><p><strong>开启 Node server 之路： <code>server.js</code></strong><br><a href="https://vuejs.org/v2/guide/ssr.html" target="_blank" rel="noopener">在一些情况下</a> 你可能会需要在你的项目中使用到 SSR (Server-Side Rendering) ，以此来优化网页。在这个版本中，我们即将这个功能考虑在内。<br>既然是服务器端渲染，那么我们首先需要一个服务器。在这个版本中，我们采用的目前非常流行的运行在 Node.js 环境下的 express 框架。通过阅读官方提供的文档，很快我们就可以对此框架有一个初步的了解，知道其主要的用途及使用方法。（中文教程可参考阮一峰老师的 Node.js 入门。）<br><a href="http://expressjs.com/" target="_blank" rel="noopener">Express: Fast, unopinionated, minimalist web framework for Node.js</a><br>除此之外，我们还需要了解一些 Node.js 相关知识，比如 Path 模块、文件系统、系统变量等等。其实对于目前而言，这些内容也只是需要知道它们代表什么意思，以及怎么使用它们就够了。而这也是非常简单的。下面的链接是一些相关的需要了解的内容：<br><a href="https://nodejs.org/api/" target="_blank" rel="noopener">Node.js v7.7.2 Documentation</a><br>如果你之前不了解 SSR，那么点击下面的链接：<br><a href="https://www.npmjs.com/package/vue-server-renderer#api" target="_blank" rel="noopener">vue-server-renderer</a><br>除了上面的以外，下面这些插件和包能够使项目性能更加优化：<br><a href="https://www.npmjs.com/package/serve-favicon" target="_blank" rel="noopener">serve-favicon: Node.js middleware for serving a favicon</a><br><a href="https://www.npmjs.com/package/compression" target="_blank" rel="noopener">compression: Node.js compression middleware.</a><br><a href="https://www.npmjs.com/package/serialize-javascript" target="_blank" rel="noopener">serialize-javascript: Serialize JavaScript to a superset of JSON</a><br>浏览过上述文档后，我们就具备了理解 <code>server.js</code> 文件的知识储备。这很关键，因为这个文件直通服务器之门。</p></li><li><p><strong>生产模式及开发模式</strong><br>这两种模式 <strong>最大</strong> 的区别就是是否具有热替换及热更新功能。在生产模式下， webpack 不会监控文件的更新，在开发模式下是会的。相对于生产模式而言，开发模式更复杂一些（因为会使用到一些中间件），所以我们先来讨论一下开发模式吧。<br>正如名字所说，我们只会在开发过程中使用开发模式。所以在这个模式下，我们不是特别关心所加载的文件大小、文件数量以及访问速度等。这些都会导致在两种不同模式下的 webpack 配置文件有部分差异。为了实现热替换及热更新功能，我们可以使用 webpack 提供的 <code>webpack-hot-middleware</code> 和 <code>webpack-dev-middleware</code> 中间件。实现热更新的原理是调用 webpack 的 HMR API 来监测服务器变化。相关文档如下：<br><a href="https://www.npmjs.com/package/webpack-hot-middleware" target="_blank" rel="noopener">webpack-hot-middleware</a><br>除了上面的中间件，还需要了解下面链接中所包含的内容，这会使得我们能更好的的理解开发模式下服务器配置文件，也就是 <code>setup-dev-server.js</code> ：<br><a href="https://webpack.js.org/api/node/" target="_blank" rel="noopener">webpack node API</a><br><a href="https://webpack.js.org/api/node/#stats-object" target="_blank" rel="noopener">webpack API: stats-object</a><br>在生产模式下，服务器端会渲染经过 webpack 打包处理过的打包文件，然后客户端接收相关页面。在这个模式下为了提高访问速度，优化用户体验，我们会会使用一些其他的插件。比如下面列出来的两个插件就只是应用在生产模式下：<br><a href="https://www.npmjs.com/package/extract-text-webpack-plugin" target="_blank" rel="noopener">extract-text-webpack-plugin</a><br><a href="https://www.npmjs.com/package/sw-precache-webpack-plugin" target="_blank" rel="noopener">sw-precache-webpack-plugin</a><br>如果你想知道这两种模式在 webpack 配置上的详细差别，可以去看 <code>webpack.client.config.js</code> 和  <code>webpack.base.config.js</code> 配置文件。</p></li><li><p><strong>服务器端和客户端</strong><br>在配置 webpack、获取页面数据的时候，我们既需要配置客户端，也需要配置服务器端，并且要保证它们之间不产生冲突。至于在 Vue.js 中使用 SSR 功能时应该怎样在 webpack 中配置，官方文档有详细说明，可以点击下面的链接：<br><a href="https://www.npmjs.com/package/vue-server-renderer" target="_blank" rel="noopener">vue-server-renderer</a>。保证两端协调工作的一个关键点是在加载初始页面时怎样保证初始数据一致，想了解这点可以去阅读 <code>server-entry.js</code> 和 <code>client-entry.js</code> 文件。     </p></li><li><p><strong>当在命令行中输入 <code>npm run dev</code> 时，具体会发生什么？</strong><br>未完待续。  </p></li></ol><h4 id="后续版本-2"><a href="#后续版本-2" class="headerlink" title="后续版本"></a>后续版本</h4><p>基本上这就是我对这个项目的理解了。有一些不懂的地方没有说明，也有一些懂的地方没有说到。之后对整个项目有更深入、更高层次的理解再来补充这一章。在下一个版本中，我将会根据我自己的喜好对整个项目进行一些改造（主要是外在的页面）。下个版本再见。  </p><hr><h3 id="3-Change-the-Project-as-I-like"><a href="#3-Change-the-Project-as-I-like" class="headerlink" title="3. Change the Project as I like"></a>3. Change the Project as I like</h3><h4 id="章节前言-3"><a href="#章节前言-3" class="headerlink" title="章节前言"></a>章节前言</h4><p>在这个版本中，我将会根据自己的喜好对整个网页进行一些改造，使得网页整体更具有 Vue.js 风格，至少从视觉上来说更加的 Vue.js。下面的动图可以预览到我这个版本的成品，为了对照官方例子，你可以去<a href="https://vue-hn.now.sh/top" target="_blank" rel="noopener">官网</a>查看原网页。对于所添加及更改的部分，本节的下半部分将会详细介绍。</p><p align="center"><br>    <img src="http://o9ybnkuir.bkt.clouddn.com/vue-hackernews/3-edition/last-edition-resize.gif" width="700px" alt="Last Edition of Vue-HackerNews"><br>    [ Vue-HackerNews 最后版本 ]<br></p><h4 id="开发过程-1"><a href="#开发过程-1" class="headerlink" title="开发过程"></a>开发过程</h4><ol><li><p><strong>使网页更具 Vue.js 风格</strong><br>打开这个版本（或者看上面的动图），一个最明显的变化就是网页的主色调发生了改变。我将页面中所有的橘黄色（<code>#ff6600</code>）都替换成了浅绿色（<code>#41b883</code>）。主色调是一个网站风格的重要组成部分，比如 HackerNews 的橘黄、知乎的深蓝、github 的墨黑以及 Vue.js 的浅绿。<br>至少从视觉上，我觉得这更加的 Vue.js 了，嘿嘿。</p></li><li><p><strong>增加根据评论数量、时间以及得分排序功能</strong><br>排序功能在很多网站上都能见到，能够方便大家快速找到自己想找的内容。所以我认为在这个项目上加上这个功能会比较酷（虽然不确定在这个网页上有没有实际意义）。为了增加这个功能，我新增了如下代码（部分）：   </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line">getters: &#123;</span><br><span class="line">    <span class="comment">// Add this function to getters. This function is uesd</span></span><br><span class="line">    <span class="comment">// to change the order of items in activeItems.</span></span><br><span class="line">    activeItemsSort(state, getters)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getters.activeItems.sort(<span class="function">(<span class="params">A, B</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> A[m] - B[m]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 除此之外在 <code>ItemList.vue</code> 文件中也增加了一些代码，如果你对此感兴趣的话，那么可以把源文件看一下，也挺简单的。 样式上的改动也挺大的，感兴趣也可以去了解下。</p></li><li><p><strong>保持在不同设备上的自适应</strong><br>为了能和上一个版本一样，仍然能够自适应各种尺寸的设备，我在改变页面布局之后，对相关 CSS 样式进行了设置。从上面的动图可以看到，为了配合排序，主页面的布局发生的变化还是挺大了。在自适应设备的时候，为了使页面看起来更优雅一些，我将部分不太重要的信息给省略了。具体的设置可以看源文件。  </p></li></ol><ol start="4"><li><strong>在 <code>ItemView.vue</code> 页面增加 <code>toTop</code> 按钮</strong><br>返回顶部按钮也是很多网站的常见功能。由于首页只有20条信息，所以在首页上我没有加上这个。但是在评论页面，动辄上百条，我认为加上这个按钮应该会方便一些。反正都是根据我自己的喜好来加的，有没有实际意义我也不知道，哈哈。</li></ol><h4 id="章节结尾"><a href="#章节结尾" class="headerlink" title="章节结尾"></a>章节结尾</h4><p>到目前为止，这个项目的所有版本都已经完成了。在完成这些版本的过程中，我感受到了思考和创造带来的乐趣。这就是生活啊，希望大家也能感受到。<br>最后，衷心感谢原作者 <a href="https://github.com/yyx990803" target="_blank" rel="noopener">尤雨溪前辈</a> 给我们提供了一个这么好用的框架以及这么精彩的官方示例！</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>从开始接触这个项目到现在已经过去好几个月了，一直想通过学习这个项目来巩固 Vue.js 的知识点，但很长一段时间都没有什么收获。因为知识储备不够，很多内容都看不懂。碰壁碰多了就知道转弯。然后去学习 ES6 以及 Node.js 相关知识，再来看的时候，很多地方就豁然开朗了。在这之后，对这个项目的理解速度就远超过之前了。    </p><p>一天晚上睡不着，就思考着这种情况对于前端新手应该是挺常见的，我为什么不把自己的经验教训分享出来给大家？然后就有了这个项目。<br>项目实现的过程遇到各种困难，特别是第一个版本和第三个版本。第一个版本所遇到的关键点在上面已经说过了，不断的阅读各种文档然后尝试，最后终于在 Chrome 中跑了起来。挫败感是常态，成就感是偶尔才有的。第三个版本是官方完整版，自认为直到现在对其的理解程度都只有十之七八。但也暂时不纠结了，没有工作经验，很多在工程中需要考虑的因素对我而言还比较捉摸不透。很多问题在经验丰富的开发者来看是一种常识，但对于新手而言却会感到无比的困惑。“书读百遍，其义自见” 就是这个意思吧。  </p><p>现在项目完成了，再来回顾整个项目，有点感慨。最开始对这个项目的想法是从简到繁一步一步和大家一起重建这个项目，整个过程会非常详细。现在项目完成了，由于精力和知识层次的限制，却并没有完全达到这种效果，还是有点遗憾。不过除此之外，项目覆盖的还是比较全面的。<br>最后，希望看过我这个教程的小伙伴能够有所收获；如果有小伙伴或者前辈发现文中出现错误，也请不吝赐教，先谢谢大家了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;欢迎大家来到我的第一个程序搭建教程: &lt;strong&gt;从零开始搭建 《vue-hackernews-2.0》&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目源码地址: &lt;a href=&quot;https://github.com/Detachment/Build-vue-hackernews-2.0-from-scratch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bulid vue-hackernews-2.0 from Scratch&lt;/a&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个前端开发的初学者，在接触学习到 Vue.js 的时候，我发现官方提供并极力推荐的项目《vue-hackernews-2.0》对于新手而言比较难理解。但同时我又被这种高度工业化的项目所吸引，所以我决定花一段时间来弄清楚这个项目到底是怎么运行起来的。 在这个教程中我将会通过利用不同的版本的迭代的方式来逐步重建这个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://detachment.club/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue.js" scheme="http://detachment.club/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>博客构建笔记(更新：增加排序功能)</title>
    <link href="http://detachment.club/2016/12/28/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
    <id>http://detachment.club/2016/12/28/博客构建笔记/</id>
    <published>2016-12-27T16:00:00.000Z</published>
    <updated>2018-05-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;记录总结学习过程的重要性不言自明。博客正好就是这一过程的体现平台，所以构建并完善这个平台就显得尤为重要了。由于周期性的懒癌发作，所以可惜的是构建此博客的前期并未记录下来，这两天因为开始写年终总结了，所以连续为博客增加了两项功能，至此我认为应该记录一下。</p><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;一直都知道很多博客有订阅 rss 的功能，但是从来没有使用过，所以前期构建的时候并没有将这个功能作为博客的核心功能。直到邮件订阅了一些网站之后，只要有更新就会自动推送邮件，并且在邮件中就能看到更新的内容。这才感受到这个功能的便捷性，然后决定我也要给我的博客增加这个功能。<br>&nbsp;&nbsp;&nbsp;&nbsp;经过一番探索，经过以下步骤可以实现 rss 及邮件订阅的功能：</p><ol><li>利用 npm 下载安装 hexo-generator-feed 插件，命令如下：<br><code>$ npm install --save hexo-generator-feed</code></li><li><p>在主题配置文件 <code>_config.yml</code> 中增加以下内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#Feed configuration</span></span><br><span class="line"><span class="symbol">plugin:</span></span><br><span class="line">- hexo-generator-feed</span><br><span class="line"></span><br><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">  type:</span> atom      <span class="comment">// Feed type. (atom/rss2)</span></span><br><span class="line"><span class="symbol">  path:</span> atom.xml  <span class="comment">// Feed path. (Default: atom.xml/rss2.xml)</span></span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">20</span>       <span class="comment">// Maximum number of posts in the feed.</span></span><br><span class="line"><span class="symbol">  hub:</span>            <span class="comment">// URL of the PubSubHubbub hubs (Leave it empty if you don't use it)</span></span><br><span class="line"><span class="symbol">  content:</span> true   <span class="comment">// (optional) set to 'true' to include the contents of the entire post in the feed.</span></span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件 <code>_config.yml</code> 中设置 rss 项：<br><code>rss: &quot;/atom.xml&quot;</code></p></li><li>至此，更新部署博客就能看到有 rss 订阅功能了，需要邮件订阅功能则需要从下面一步开始；</li><li>利用 feedbuner 来制作一个feed（如果没有账号可以注册一个或者用谷歌账号登录）：<br><img src="http://o9ybnkuir.bkt.clouddn.com/imgs/feedbuner1.JPG" alt="第一张图"></li><li>在上图中填入你的博客订阅地址，如下所示：<br><img src="http://o9ybnkuir.bkt.clouddn.com/imgs/feedbuner2.JPG" alt="第二张图"></li><li>之后直接点击 next 就成功制作了一个feed：<br><img src="http://o9ybnkuir.bkt.clouddn.com/imgs/feedbuner3.JPG" alt="第三张图"></li><li>制作完之后在种子信息面板开启邮件订阅的功能：<br><img src="http://o9ybnkuir.bkt.clouddn.com/imgs/feedbuner4.JPG" alt="第四张图"></li><li>至此，你已经得到了两种形式的代码了，根据自己的需要使用到自己的网站上，我使用的是超链接的形式。</li><li>时光荏苒，岁月如梭，一年的时间又飞快的离我们而去。与去年情况不同的是，在引入两个强而有力的产品同事后，今年的工作变得更加复杂和具有挑战性了。为了有条理的总结今年这一年的工作情况，下面就按时间顺序一一道来。</li></ol><hr><h3 id="置顶"><a href="#置顶" class="headerlink" title="置顶"></a>置顶</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;这也是一个一直想要的功能，因为很有可能有些博客的重要性比其他的更高，但是由于默认按照时间来排序导致翻页之后才能看到这些文章。正好这两天在捣鼓博客，索性将这个功能也做出来。最开始的时候准备将博客的源码文件捋清楚后自己修改代码，但是打开hexo文件夹一看，打了个哆嗦就把文件夹关了：我是不是傻，为啥不先去搜索一番？<br>&nbsp;&nbsp;&nbsp;&nbsp;果然，一搜就发现有很多人多有这个需求: <a href="https://github.com/iissnan/hexo-theme-next/issues/415" target="_blank" rel="noopener">如何置顶post？</a>。整个帖子看下来的结论是：各种尝试的结果都或多或少有bug，所以此暂时暂时搁置，日后再来开发。不过里面倒是有个链接指出了通用配置方法，这也是目前我所采用的方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">原文写的比较详细</a>，我也就不再多费口舌了，总的来说就是更改排序规则，并将新的变量（top）增加到post的开头部分。经测试，效果不错。</p><hr><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;对于某些涉及隐私，或者只希望分享给有限人群的博客，加密功能就非常实用了。之前一直没有将这个功能加上来，因为需求没这么迫切。最近准备开始投简历，里面会涉及一些个人信息，但是又希望公司能够通过博客的形式看到简历，这个功能就必不可少了。通过搜索，找到这个一个帖子，基本能满足需求：  </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://edolphin.site/2016/05/31/encrypt-post/" target="_blank" rel="noopener">加密博客内容，使用密码访问</a>  </p><p>&nbsp;&nbsp;&nbsp;&nbsp;仔细看了一下这篇博客及对应项目的 GitHub 文档，满足基本需求不成问题，但是有两点不足：第一，官方文档写的不是太好，有些地方不好理解；第二，对于基于 GitHub page 的博客基本无效。然后在 GitHub 上顺藤摸瓜，找出了下面这个项目：   </p><p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a>    </p><p>&nbsp;&nbsp;&nbsp;&nbsp;文档清晰易懂，开发者响应迅速，最重要的是能够完整加密。如果非要提不足的地方，那就是解密后目录栏不会自动更新。和开发者沟通过，这个需要根据不同的 Hexo 主题进行对应的更改，经过一番尝试后测试失败。由于时间问题，暂时我就不去管它了。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以，如果你也需要为博客设置密码，推荐第二种方式。<br>&nbsp;&nbsp;&nbsp;&nbsp;非常感谢两位开发者做出的探索。</p><hr><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><pre><code>换电脑后写博客没有以前那么方便了，加上懒癌晚期，一直拖着没有把以前电脑上的资源迁移过来，所以大半年都没有写博客了。昨天晚上不知道哪根筋搭错了，终于决定将很久都没有做的事情完成下。看了几篇博客，有些挺难理解的，一步一步尝试做下来总会失败。可能是没有理解其中缘由，也可能是时过境迁，以前的方法不再适用。最终成功的方法来自知乎用户@[skycrown](https://www.zhihu.com/people/skycrown)：[使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)</code></pre><blockquote><p>不知道题主是不是换了新电脑，需要在新电脑上进行部署，如果是，可以参考下面的方法：<br>1、从官网<a href="https://link.zhihu.com/?target=https%3A//git-scm.com/" target="_blank" rel="noopener">Git**</a>下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建：<br>（1）打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“ 把其中的邮件地址换成自己的邮件地址，然后一路回车<br>（2）最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。<br>（3）登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。<br><strong>注意</strong>：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。<br>2、下载<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/" target="_blank" rel="noopener">Node.js**</a>，并安装<br>3、打开git bash客户端，输入 npm install hexo-cli -g，开始安装hexo<br>4、下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。<br>（1）讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置_config.yml，theme文件夹里面的主题，以及source里面自己写的博客文件，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是scaffolds文件夹（文章的模板）、package.json（说明使用哪些包）和.gitignore（限定在提交的时候哪些文件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。<strong>总结：</strong>_config.yml，theme/，source/，scaffolds/，package.json，.gitignore，是需要拷贝的。<br>（2）再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是.git文件，无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。然后是文件夹node_modules（在用npm install会重新生成），public（这个在用hexo g时会重新生成），.deploy_git文件夹（在使用hexo d时也会重新生成），db.json文件。其实上面这些文件也就是.gitignore文件里面记载的可以忽略的内容。<strong>总结：</strong>.git/，node_modules/，public/，.deploy_git/，db.json文件需要删除。<br>5、在git bash中切换目录到新拷贝的文件夹里，使用 npm install 命令，进行模块安装。很明显我们这里没用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。<br>6、安装其他的一些必要组件，如果在node_modules里面有的，就不要重复安装了：<br>（1）为了使用hexo d来部署到git上，需要安装<br>npm install hexo-deployer-git –save<br>（2）为了建立RSS订阅，需要安装<br>npm install hexo-generator-feed –save<br>（3）为了建立站点地图，需要安装<br>npm install hexo-generator-sitemap –save<br>插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明<br>7、使用hexo g，然后使用hexo d进行部署，如果都没有出错，就转移成功了！</p></blockquote><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre><code>之前已经写过了置顶的功能，逻辑是如果 post 中有 top 字段，那么先比较 top 字段值的大小，然后根据发布时间来进行排序。但是有些文章是在不断修改的，所以我认为按照修改时间来排序是一种更好的策略。对于从来不修改的文章而言，发布时间和更新时间一致，所以都可以满足。因为 Next 默认主题是不显示修改时间的，所以如果需要按照修改时间排序，首先得显示修改时间，这个需求可以在这个问题下找到答案：[如何将首页和归档页的博文按照更新时间排序？](https://github.com/iissnan/hexo-theme-next/issues/1895) 在将修改时间添加到配置文件之后，每篇博客开始的时候就需要将 updated 字段加进去，这块有个坑：**date 和 updated 的值不能一样，否则不会显示。**修改的策略其实和置顶一致，只需要把 `node_modules/hexo-generator-index/lib/generator.js` 中以下部分的 date 改成 update 就行：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码引用自： <a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">解决Hexo置顶问题</a></p></blockquote><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>略</p><h3 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h3><p>略</p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>最近又收到七牛云的邮件了，说是之前的测试域名马上就要到期了，到期后会收回。为了避免到时候所有的图片都看不到，开始准备把图片迁移，有两种方案，其一：绑定自己的域名；其二，找其他图床。本来想着绑定就绑定吧，也没啥影响，然后发现绑定之前必须要备案才行，也就是说你所有的实名信息都需要提交到工信部，这我就不开心了。虽说也不准备做什么违法乱纪的事情，但总是不想处于这种监管的状态的。所以开始找第二种方案。然后发现了 sm.ms 图床，有很好的 api 支持，找到一篇文章有相关记录，里面很详细的记录了整个配置的过程：<a href="https://spencerwoo.com/2018/01/28/SM-MS/" target="_blank" rel="noopener">SM.MS: 一名优秀的图床的艺术之旅。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;记录总结学习过程的重要性不言自明。博客正好就是这一过程的体现平台，所以构建并完善这个平台就显得尤为重要了。由于周期性的懒癌发作，所以可惜的是构建此博客的前期并未记录下来，这两天因为开始写年终总结了，所以连续为博客增加了两项功能，至此我认为应该记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://detachment.club/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://detachment.club/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="置顶" scheme="http://detachment.club/tags/%E7%BD%AE%E9%A1%B6/"/>
    
      <category term="订阅" scheme="http://detachment.club/tags/%E8%AE%A2%E9%98%85/"/>
    
      <category term="加密" scheme="http://detachment.club/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="迁移" scheme="http://detachment.club/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="排序" scheme="http://detachment.club/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="版权" scheme="http://detachment.club/tags/%E7%89%88%E6%9D%83/"/>
    
      <category term="打赏" scheme="http://detachment.club/tags/%E6%89%93%E8%B5%8F/"/>
    
      <category term="图床" scheme="http://detachment.club/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>写在2016年的尾巴</title>
    <link href="http://detachment.club/2016/12/27/%E5%86%99%E5%9C%A82016%E5%B9%B4%E7%9A%84%E5%B0%BE%E5%B7%B4/"/>
    <id>http://detachment.club/2016/12/27/写在2016年的尾巴/</id>
    <published>2016-12-26T16:00:00.000Z</published>
    <updated>2016-12-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一年的时间过得太快，但足以发生很多很多的事情，这也造成了提笔难言的窘境。如果要叙述一个复杂的故事，最简单的办法就是利用时间作为线索，采用顺序的叙述结构。这种结构同样非常适合年终总结。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;在前言中，我就简单的以时间为线来简单的流水一遍我这一年：</p><ul><li>1-3月：设计制作最后三套轮胎自动搬运设备，3月底辞职；</li><li>4-5月：在w3school上学习html，css，JavaScript的相关知识；重新使用github；</li><li>6-7月：利用视频教程学习JavaScript；搭建博客并将整个学习过程总结到博客上；</li><li>8-9月：学习jQuery，BootStrap并利用所学模仿制作了简历；开始投简历、面试、得到offer并放弃；学习《JavaScript编程精解》；初步接触vue.js；</li><li>10月：学习vue.js及相关工具（router、vuex、loader）；学习webpack的使用；学习git；投简历被拒；</li><li>11月：学习《JavaScript高级程序设计》；尝试利用vue.js制作完整项目遇阻；</li><li>12月：重新学习vue.js并准备做完整的项目，遇阻；学习ES6语法；利用xmind总结vue.js；年终总结。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;上面所提到的虽不全面，但也大体覆盖了这近一年所做的主要努力。下面的正文还将从各个方面来进行总结，从另一个角度来更加全面的回顾这一年所发生的的事情。</p><hr><script src="https://use.fontawesome.com/e4cb940bf3.js"></script><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下面将从这两个方面来总结：学习工作与生活娱乐。</p><h3 id="学习工作"><a href="#学习工作" class="headerlink" title="学习工作"></a>学习工作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;前端学习的内容无外乎语言本身（HTML，CSS 及 JavaScript）的学习及辅助工具应用方面（框架、模块化工具等）的学习，那么就从这两方面来说说目前的情况吧。</p><ul><li><strong>语言本身</strong><ol><li><strong>HTML</strong>：主要从w3s上学习，项目中碰到问题靠搜索解决。对于 HTML5 中新加入的新特征了解但没达到熟悉的程度；   </li><li><strong>CSS</strong>：主要从w3s上学习，了解在 CSS3 中新加入的特征但实践不够；</li><li><strong>JavaScript</strong>：<ul><li><strong>前期</strong>：w3s上学习了一阵子，摸不着头脑。转而到网易云课堂学习了《精通JavaScript开发》，当时自觉已经大概了解了这门语言，现在看来还是 too young，too simple。之后在准备面试的时候看到各种 JavaScript 方面的考题都不会做，然后又开始在网上找资源来学习知识，这时候找到《JavaScript秘密花园》以及汤姆大叔的JS总结博客，如获至宝。又一次 be naive。总结是个升华的过程，而学习基础知识则是升温过程。其实当时也懂得这个道理，只是在希望能尽快找到工作的心态影响下变得浮躁。</li><li><strong>中期</strong>：开始看书，第一本看的是 《JavaScript 编程精解》。书如其名，处处体现一个精字，导致看完一遍之后和朋友切磋的时候被暴虐。因为本书中对很多基础性的概念并没有做出详尽的介绍，所以我看了一遍之后对这些都是一知半解。但不可否认的是，这本书里面的编程技巧让我大开眼界。总而言之：新手不推荐这本书。看的第二本书是《JavaScript高级程序设计》，它为我打开了新世界的大门。这本书深入浅出的为初学者介绍了所需要了解的绝大部分关于 JavaScript 的知识点，看完后我受益匪浅，值得反复阅读、总结。在学 vue.js 做项目的时候发现有大量的 ES6 新增的特性在发挥作用，所以后期也学习了 ES6 规范。学习 ES6 的途径是阮一峰老师的博客。总体而言，对于我这种水平的新手来说，教程难度适中，看过一遍之后能够理解大概80%左右的知识点。所以，对于希望能初步掌握 ES6 规范的学习者来说，我还是很推荐这份教程的。</li><li><strong>后期</strong>：JS 语言的学习将在很长一段时间处于中期阶段，因为很多知识点都需要通过在实践中慢慢的掌握，而这也是目前我所严重欠缺的方面。虽然此阶段的到来还很遥远，不过总体方针还是有的：关注了解与前端相关的知识如服务器端（node.js）以及网络协议等；关心语言的发展趋势，如果可能的话，甚至去影响趋势。</li></ul></li></ol></li></ul><ul><li><p><strong>框架工具学习</strong></p><ol><li><strong>jQuery</strong>：主要通过 w3s 来学习，掌握基本用法，未深究；</li><li><strong>BootStrap</strong>：通过视频及官方文档来学习。有独立项目，其中个人简历即在此阶段完成的；</li><li><p><strong>Vue.js</strong>：仔细看过几遍官方文档并有总结，对基本用法了熟于心。同时也了解关于 Vue.js 的一些辅助插件，如 vuex、vue-router 以及 vue-loader。在很快的一段时间内将会利用这些来完成一个复杂程度较高的完整前端项目。附简单的总结图如下（利用 xMind 制作，如有需要源文件的可以给我发邮件）：<br><img src="http://o9ybnkuir.bkt.clouddn.com/imgs/vuex.png" alt="vue.js"></p><p><img src="http://o9ybnkuir.bkt.clouddn.com/imgs/Vue.png" alt="vue.js"></p></li><li><strong>webpack</strong>：完整的看了一遍文档，并翻译发布了一篇博客，有过少许实践经验。在这个过程中接触到 npm，yarn，gitbook等等；</li><li><strong>git</strong>：熟练使用 git 的基本操作，写过一篇相关博客。</li><li><strong>其他</strong>：了解（基本能看懂代码） bower、gulp、sass、karma、eslint 等，但都没有实践经验。这也是之后需要加强的方面。</li></ol></li></ul><ul><li><strong>博客写作</strong><br>  &nbsp;&nbsp;&nbsp;&nbsp;自从6月份开通到现在为止，一共发布了10篇博客，除了两篇为翻译文档，其余全为原创。有一篇访问量超过2500pv，对自己来说也是一个鼓励。以此同时，有多位朋友看过博客后通过邮件和我联系并给于肯定，在此对他们表示感谢，也希望大家在前端学习的路上大家都能越走越远。下面附上一些简单的博客流量图：<br>  <img src="http://o9ybnkuir.bkt.clouddn.com/imgs/tongji1.JPG" alt="tongji"><br>  <img src="http://o9ybnkuir.bkt.clouddn.com/imgs/tongji2.JPG" alt="tongji"><br>  <img src="http://o9ybnkuir.bkt.clouddn.com/imgs/tongji3.JPG" alt="tongji"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;至此，学习工作方面的内容基本上也已经总结的差不多了，接下来继续总结生活娱乐方面。</p><h3 id="生活娱乐"><a href="#生活娱乐" class="headerlink" title="生活娱乐"></a>生活娱乐</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;All work and no play makes Jack a dull boy. 从以下两个方面来总结吧：精神建设以及生活质量。</p><ul><li><p><strong>精神建设</strong></p><ol><li><p><strong>电影</strong>：看电影是一个终生爱好，可能和小时候的经历有关。按照时间顺序简单的总结下今年看过的影片（包括电影和剧集，数据来自豆瓣记录以及下载记录），根据个人喜好推荐加粗部分的电影：</p><ul><li>一月份： <strong>《老炮儿》</strong>《黑金》《我的少女时代》《机械姬》<strong>《走到尽头》</strong>《为了N》（剧集）;</li><li>二月份：<strong>《守望者》</strong>《美国狙击手》《史蒂夫·乔布斯》<strong>《夜行者》</strong>《暗杀》<strong>《视觉》</strong>；</li><li>三月份：《八恶人》《饥饿游戏3：嘲笑鸟》<strong>《聚焦》</strong> <strong>《荒野猎人》</strong>《蝙蝠侠大战超人：正义黎明》<strong>《控方证人》</strong>《功夫熊猫3》；</li><li>四月份：<strong>《纸牌屋 第四季》</strong>；</li><li>五月份：<strong>《危楼愚夫》《成长系列》《盗梦空间》</strong>，其中<a href="https://movie.douban.com/subject/10748226/" target="_blank" rel="noopener">《成长系列》</a>极力推荐；</li><li>六月份：无记录。（可能在 B 站上有看，但是记录不可查）；</li><li>七月份：《危机13小时》《奇幻森林》《人间世》《知无涯者》《行尸走肉》；</li><li>八月份：<strong>《一个叫欧维的男人决定去死》</strong>《红眼航班》<strong>《云图》</strong>；</li><li>九月份：《惊天盗魔团》《寒战2》<strong>《黑客军团2》《心迷宫》</strong>《你眼中的世界》<strong>《杀死一只知更鸟》《阿凡达》</strong>；</li><li>十月份：<strong>《荒野生存》</strong>《黑镜3》《西部世界》《冰血暴2》《毕业生》<strong>《追梦赤子心》</strong></li><li>十一月份：<strong>《我们这一天》</strong>《斯诺登》<strong>《头脑特工队》</strong>《逃避虽可耻但有用》<strong>《七武士》《双峰 第一季》</strong>《双峰 第二季》</li><li>十二月份：<strong>《行星地球2》</strong>《萨利机长》<strong>《梦之安魂曲》《驴得水》《疯狂的麦克斯4》</strong>《豪勇七蛟龙》<strong>《夜班经理》</strong></li></ul><blockquote><p>由于有部分电影在 B 站上看的，导致没有任何记录，所以可能有 10%-20% 左右的电影没有归纳出来。</p></blockquote></li><li><p><strong>书籍</strong>：除了专业书籍之外，还看了一些其他方面的书，以下大概按照时间来排序：</p><ul><li><p><strong>《无声告白》</strong>：这是一本关于家庭教育的书，我认为每个身为人父（母）的人都应该看一看这本书。文章中的心理描写非常精彩，比如下面这一段：</p><blockquote><p>多年来对爱的渴望让她变得敏感，她就像一条饥饿的狗，不停的翕动鼻孔，捕捉着哪怕是最微弱的食物的香气。她不会弄错的。她一看到就认出了它。那是爱，是一厢情愿的深切渴慕，只有付出，得不到回报；是小心翼翼而安静的爱恋，却无所畏惧，无论如何，都会执着的进行下去。  </p></blockquote></li><li><p><strong>《黑客与画家》</strong>：讨论了很多关于计算机以及互联网行业的问题，比如编程语言发展趋势。对我影响不大，看完之后很多内容多忘记了。摘取一段作者对于怎么致富的方法的看法：</p><blockquote><p>要致富，你需要有两样东西：可测量性和可放大性。你的职位产生的业绩，应该是可测量的，否则你做的再多，也不会得到更多的报酬。此外，你还必须有可放大性，也就是说你做的决定能够产生巨大的效应。</p></blockquote></li><li><p><strong>《月亮与六便士》</strong>：什么是信仰？什么又是真正的幸福？</p><blockquote><p>难道做自己最想做的事，生活在让你感到舒服的环境里，让你的内心得到安宁是糟践自己吗？难道成为年入上万英镑的外科医生、娶得如花美眷就算是成功吗？我想这取决于你如何看待生活的意义，取决于你认为你应该对社会做出什么贡献，应该对自己有什么要求。</p></blockquote></li><li><p><strong>《自控力》</strong>：这本书通过一系列的实验给我们展示了关于自控力种种方面的研究成果。对于有严重拖延症的人来说，值得一看。摘抄部分结论：</p><blockquote><p>人脑像一个求知欲很强的学生，对经验有着超乎大家想象的反应。如果你每天都让大脑学习数学，他就会越来越擅长数学。如果你让他忧虑，他就会越来越忧虑。如果你让他专注，他就会越来越专注。</p></blockquote></li><li><p><strong>《三体全集》</strong>：佩服作者的想象力和知识面，不过不符合个人口味，看了40%左右，弃坑。摘录部分笔记：</p><blockquote><p>也许，人类和邪恶的关系，就是大洋与漂浮于其上的冰山的关系，它们其实是同一物质组成的巨大水体。冰山之所以被醒目的认出来，只是由于其形态不同而已，而它实质上只不过是这整个巨大水体中较小的一部分……人类真正的道德自觉是不可能的，就像他们不可能自己把着自己的头发离开大陆。</p></blockquote></li><li><p><strong>《一个人的朝圣》</strong>：我只是想安安静静的去拜访个老朋友而已，你们这帮记者除了弄个大新闻还会啥？</p><blockquote><p>他发现正是这些普通人的渺小与孤独使他诧异，牵动他内心的温柔。在这个世界上有多少人每天做的事就是不断将一只脚放到另一只脚前面，日子久了，生活便显得平淡无奇。哈罗德无法再否认其实一路上见过的每个陌生人虽然是独特的，却又是一样的，这就是人生的两难。</p></blockquote></li><li><p><strong>《阿城精选集》</strong>：阿城先生的《棋王》《树王》以及《孩子王》都写的非常精彩，其中又以《棋王》最为精彩：</p><blockquote><p>王一生孤身一人坐在大屋子中央，瞪眼看着我们，双手支在膝盖上，铁铸一个细树桩，似无所见，似无所闻。高高的一盏电灯，暗暗地照在他脸上，眼睛深陷进去，黑黑的似俯视大千世界，茫茫宇宙。那生命像聚在一头乱发中，久久不散，又慢慢弥散开来，灼的人脸热。</p></blockquote></li><li><p><strong>《人类简史》</strong>：跳出人类的设定来看人类的发展。不同心态的人看完会有不同的结论，在这个思考的过程会刷新自己的认知。于我而言，这本书让我看问题多了一个角度：上帝视角。摘取《奢侈生活的骗局》中的一段：</p><blockquote><p>有多少年轻的大学毕业生投身大企业、从事各种劳心劳力的工作，发誓要努力赚钱，好在35岁就退休，去从事他们真正有兴趣的事业？但等他们到了35岁，却发现自己背负着巨额贷款，要支付子女的学费，要养在高级住宅区的豪宅，每家得有两部车，而且生活里面不能没有高级红酒和国外假期。他们该怎么做？他们会放下一切，回去野外挖树根？当然不可能，而是加倍努力，继续把自己累的半死。</p></blockquote></li><li><p><strong>《杀死一只知更鸟》</strong>：先看的书，再看的电影，足见我很喜欢这部作品。从种族歧视的角度探讨何为正义的作品不少，但这本书有着其独特的味道，比如书中的家庭教育。如果我有一个女儿，那么我希望她能够像斯考特一样纯真、勇敢而又具有独立而思辨的灵魂。</p><blockquote><p>勇敢是：当你还未开始就已知道自己会输，可你依然要去做，而且无论如何你都要把它坚持到底。你很少能赢，但有时也会。</p></blockquote></li><li><p><strong>《沉默的大多数》</strong>：这是一本王小波的杂文集，讨论的范围非常广，阅读的过程中能感受到一种思辨的快乐。这本书对我最大的影响是它让我相信一个有智慧的实诚人是可爱的。</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恕我直言，能够带来思想快乐的东西，只能是人类智慧至高的产物。比这再低一级的东西，只会给人带来痛苦；而这种低档货，就是出于功利的种种想法。  –《思维的乐趣  第二章》<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我现在当然有自己的善恶标准，而且我现在并不比别人表现的坏。我认为低智、偏执、思想贫乏是最大的邪恶。按照这个标准，别人说我最善良，就是我最邪恶时；别人说我最邪恶时，就是我最善良时。当然，我不想把这个标准推荐给别人，但我认为，聪明、达观、多知的人，比之别样的人更堪信任。  –《思维的乐趣 第四章》<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果说贫穷是种生活方式，捡垃圾和挑大粪只是这种方式的契机。生活方式像是一个曲折漫长的故事，或者使人迷失的迷宫。很不幸的是，任何一种负面的生活都能产生很多乱七八糟的细节，使得他变得有趣；人就在这种趣味中沉沦下去，从根本上忘记了这种生活需要改进。用文化人类学的观点来看，这些细节加在一起，就叫做“文化”。  –《有关贫穷》</p></blockquote></li></ul><p>上面这些书都是看完了的，现在正在看小波的《黄金时代》、张纯如的《南京大屠杀》，已经购买计划要看的有《情人》《菊与刀》《江村经济》《唐吉坷德》等等。</p></li></ol></li><li><p><strong>生活质量</strong></p><ul><li><strong>做饭水平</strong>：经过一年的锻炼，做饭经验丰富；</li><li><strong>健身进展</strong>：对比去年，背阔肌和三头肌有明显进步；最近也加强了对大腿、肩部的锻炼，目前效果不明显；俄式挺身还是没有学会，核心力量太弱；训练的不够系统，整体进步趋于平缓；</li><li><strong>摄影水平</strong>：原地踏步；</li><li><strong>游戏水平</strong>：效率上涨100点，但是浪费太多时间和精力，已决定afk。</li></ul></li></ul><hr><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;2016年还有两天就过完了。这一年，我彻底的改变了自己的职业发展方向，一切从头开始。这一年，虽然过得还不够充实，但每一天都是按照自己的意愿来生活。这一年，胜过了很多年。<br>&nbsp;&nbsp;&nbsp;&nbsp;2017年希望自己和周围的人身体都健健康康。除此之外，也希望自己能够找到一份适合自己的工作，实现自己的价值。<br>&nbsp;&nbsp;&nbsp;&nbsp;最后套用一句小波的话来结束整篇文章：虽然人生在世会有种种不如意，但你仍可以在幸福与不幸中做出选择。<br>&nbsp;&nbsp;&nbsp;&nbsp;新年快乐~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一年的时间过得太快，但足以发生很多很多的事情，这也造成了提笔难言的窘境。如果要叙述一个复杂的故事，最简单的办法就是利用时间作为线索，采用顺序的叙述结构。这种结构同样非常适合年终总结。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://detachment.club/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端" scheme="http://detachment.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://detachment.club/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://detachment.club/tags/Vue-js/"/>
    
      <category term="ES6" scheme="http://detachment.club/tags/ES6/"/>
    
      <category term="2016" scheme="http://detachment.club/tags/2016/"/>
    
  </entry>
  
  <entry>
    <title>怎样利用 git 撤销操作</title>
    <link href="http://detachment.club/2016/10/29/%E6%80%8E%E6%A0%B7%E5%88%A9%E7%94%A8%20git%20%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://detachment.club/2016/10/29/怎样利用 git 撤销操作/</id>
    <published>2016-10-28T16:00:00.000Z</published>
    <updated>2016-10-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;对于版本管理系统而言，最重要的一个特性之一就是能够撤销错误的操作。在 git 中，撤销有很多种可能的意思。<br>&nbsp;&nbsp;&nbsp;&nbsp;每当你做出一个 提交 的时候，git 都会立即在你的 repository 保存一个快照，之后你就可以通过 git 来恢复到这个项目的前一个版本了。<br>&nbsp;&nbsp;&nbsp;&nbsp;这下面这篇文章中，我将会就几种常见的情景来讨论怎样通过 git 来完美的撤销这些操作。</p><a id="more"></a><h2 id="不同情况"><a href="#不同情况" class="headerlink" title="不同情况"></a>不同情况</h2><h3 id="撤销已发布"><a href="#撤销已发布" class="headerlink" title="撤销已发布"></a>撤销已发布</h3><p><strong>情景</strong>：你刚按下 <code>git push</code> ，将修改推送到了 github ，然后就发现在你的提交中存在一些问题。这时候那就会想撤销操作。</p><p><strong>解决</strong>： <code>git revert &lt;SHA&gt;</code></p><p><strong>原理</strong>： <code>git revert &lt;SHA&gt;</code> 这个操作会生成一个新的 commit，这个提交和 提供的 SHA 是相反的：如果之前的提交是 “matter”，那么这个提交就是 “anti-matter”，也就是说之前操作中新增的内容将会被删除，之前操作中被删除的内容也将会被增加。</p><p>这是 git 中最基础也最安全的撤销操作情景，因为它不会 <em>改动</em> 变更历史——你可以放心的使用 <code>git push</code> “相反的”提交来撤销你错误的操作。</p><hr><h3 id="修改提交信息"><a href="#修改提交信息" class="headerlink" title="修改提交信息"></a>修改提交信息</h3><p><strong>情景</strong>：你把提交信息的最后一个字打完：<code>git commit -m &quot;Fxies bug #42</code>，提交之后推送之前，你发现你的提交信息出错了，应该是：<code>Fixes bug #42</code>。这时候你也会想到撤销操作。</p><p><strong>解决</strong>：<code>git commit --amend or git commit --amend -m &quot;Fixes bug #42&quot;</code></p><p><strong>原理</strong>：<code>git commit --amend</code> 操作会用一个新的提交来更新、替换上一个提交。如果新提交的内容中有已处于可提交状态的修改，那么也会一并提交；如果没有，那么只需要重写上一次的提交信息即可。</p><hr><h3 id="撤销本地操作"><a href="#撤销本地操作" class="headerlink" title="撤销本地操作"></a>撤销本地操作</h3><p><strong>情景</strong>：一只喵从键盘上走过，不小心保存了修改，然后很巧的是 IDE 此时崩溃退出了。这时候你还没有提交，你希望能够将这个文件中所有的修改都撤销——直到恢复成上一次提交的状态。</p><p><strong>解决</strong>：<code>git checkout -- &lt;bad filename&gt;</code></p><p><strong>原理</strong>：<code>git checkout</code> 指令会将工作文件夹中的这个文件恢复成在 Git 中上一次保存的状态。你可以提供一个确切的分支名，或者是需要恢复到的 SHA。如果都省略，Git 就默认是恢复到 HEAD ——也就是目前分支的上一次提交状态。</p><p><strong>注意</strong>：利用这种方法所做的任何撤销都是真的撤销了。因为没有提交操作，所以 Git 之后也没办法来恢复了。用这种方法的时候一定要确定你所需要撤销的到底是什么！（你可以利用 <code>git diff</code> 来确认提交信息）</p><hr><h3 id="重置本地操作"><a href="#重置本地操作" class="headerlink" title="重置本地操作"></a>重置本地操作</h3><p><strong>情景</strong>：你在本地提交过几次（但还没有推送），然后你发现这些都是垃圾，然后你想撤销最近三次的提交——就好像它们从来没发生过一样。</p><p><strong>解决</strong>：<code>git reset &lt;last good SHA&gt; or git reset --hard &lt;last good SHA&gt;</code></p><p><strong>原理</strong>：<code>git reset</code> 操作会让你的项目历史记录回滚到指定的 SHA，就像这些提交从来没有发生过一样。默认状态下，这个操作会将工作目录保存下来，这时候提交虽然没有了，但是这些提交的内容还是存在硬盘上的。这是最安全的做法，但是很多时候，你需要同时撤销提交并同时删除这些文件——这时候就需要加上 <code>--hard</code> 了。</p><hr><h3 id="重置本地操作后恢复"><a href="#重置本地操作后恢复" class="headerlink" title="重置本地操作后恢复"></a>重置本地操作后恢复</h3><p><strong>情景</strong>：你已经提交了一些修改，然后发现不对，就利用上面的方法撤销了提交。这时候你又发现：我要撤销刚刚的撤销！</p><p><strong>解决</strong>：<code>git reflog and git reset or git checkout</code></p><p><strong>原理</strong>：<code>git reflog</code> 是一种非常好的用于恢复项目历史记录的办法。通过这个办法，几乎可以恢复任何已经提交过的修改。</p><p>你可能对用于显示不同提交的 <code>git log</code> 指令比较熟悉，而 <code>git reflog</code> 也是类似的，区别在于，它显示的是 <code>HEAD</code> 的修改情况列表。</p><p>注意点：</p><ul><li>只有 .HEAD 文件被修改时 HEAD 才会修改，这些情况包括：切换分支、通过 <code>git commit</code> 提交、通过 <code>git-reset</code> 恢复。需要注意的是通过 <code>git checkout --&lt;bad filename&gt;</code> 操作并不会修改 HEAD（上面的方法中提到过这个操作不会被提交），所以 reflog 方法这时候不适用。</li><li><code>git reflog</code> 不会被永久保存。Git 内部每隔一段时间就好清理一些无法识别的对象。所以不要指望几个月前的提交记录能够永远在 reflog 中找到。</li><li>你的 <code>reflog</code> 仅仅只能你自己使用。你无法通过这个指令来恢复其他开发者尚未推送的提交。</li></ul><p><img src="https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png" alt=""></p><p>那么，回到正题，怎样通过 <code>git reflog</code> 来达到撤销已撤销的目的呢？这还得根据不同的情况讨论：</p><ul><li>如果你想将项目历史恢复成特定时候的状态，使用 <code>get reset -hard &lt;SHA&gt;</code></li><li>如果你想在你的工作目录下重新创造一些和之前一样的文件，同时不更改项目记录，那么就用 <code>git checkout &lt;SHA&gt; --&lt;filename&gt;</code></li><li>如果你想重新提交一个确切的操作到你的项目，那就是用 <code>git cherry-pick &lt;SHA&gt;</code></li></ul><hr><h3 id="修改合并分支"><a href="#修改合并分支" class="headerlink" title="修改合并分支"></a>修改合并分支</h3><p><strong>情景</strong>：你提交了一些修改，然后发现提交到了 master 分支，而你本来是想提交到一个叫做 feature 的分支上。</p><p><strong>解决</strong>：<code>git branch feature, git reset --hard origin/master, and git checkout feature</code></p><p><strong>原理</strong>：你可能比较习惯使用 <code>git checkout -b &lt;name&gt;</code> 来建立并切换到新建立的分支上——然而，有时候你并不希望立刻切换到新建立的分支。通过 <code>git branck feature</code> 创建了一个叫做 feature 的分支，这也是你将要合并提交的分支，而且这样操作，目前所在的分支还在 master 上（并没有切换到 feature）。<br>然后，通过 <code>git reset --hard</code> 将 master 分支回滚到之前 origi/master 未提交的状态。不过不要担心，在 feature 分支上，这些提交还是有的。<br>最后，通过 <code>git checkout</code> 指令将分支切换至 feature，然后你就可以开心的进行提交了。</p><hr><h3 id="同步更新分支"><a href="#同步更新分支" class="headerlink" title="同步更新分支"></a>同步更新分支</h3><p><strong>情景</strong>：你在本地分支 master 的基础上新建了一个叫做 feature 的分支，但是这时候的本地分支 master 比远程主机上的 origin/master 分支落后几个版本。然后你将本地 master 分支同步至 origin/master，然后你希望这时候提交到 feature 分支上的修改能够在现在这个状态的基础上，而不是之前落后几个版本的状态。</p><p><strong>解决</strong>：<code>git checkout feature and git rebase master</code></p><p><strong>原理</strong>：你本来可以这样做：首先利用 <code>git reset</code>（后面故意不加 –hard，这样的话 master 虽然回滚到上个版本但是硬盘上这些可提交的修改并没有删除），然后通过 <code>git checkout &lt;branch name&gt;</code> 切换至 feature 分支，最后在这个分支上重新提交（以达到和之前 master 分支一样的状态）。通过这种办法可以达到目的，但是你会失去提交历史。下面有一个更好的方法。</p><p><code>get rebase master</code> 操作会执行很多事情：</p><ul><li>首先在目前所在分支和本地 master 分支之间确定谁是谁的父级；</li><li>然后将目前所在分支的状态重置成父级的状态，并把之后的提交都暂时保存在一个区域；</li><li>最后更新升级到和 master 分支最新状态一样，然后重新操作暂时保存区域的提交。</li></ul><hr><h3 id="大量的撤销-恢复操作"><a href="#大量的撤销-恢复操作" class="headerlink" title="大量的撤销/恢复操作"></a>大量的撤销/恢复操作</h3><p><strong>情景</strong>：你从某个方向来开始了一项研究，研究到一半，你发现另一种方法会更好。这时候你已经提交了几次了，而你其实并不完全需要它们。所以你希望其中的一些提交完全消失。</p><p><strong>解决</strong>：<code>git rebase -i &lt;earlier SHA&gt;</code></p><p><strong>原理</strong>：-i 指令将 rebase 指令转入一种可交互模式。rebase 指令的作用前几步和上面都一样，唯一不一样的是在合并提交的时候，它会暂停然后让你选择需要合并的提交。</p><p><code>rebase -i</code> 会打开默认文本编辑器，文本中会列出可合并的提交，如下：<br><img src="https://cloud.githubusercontent.com/assets/2077/6953863/f6b1ab88-d891-11e4-97c1-e0630ac74e74.png" alt=""></p><p>前面两列是包含着关键信息：第一个是用来提交操作的指令，第二个是提交操作的 SHA 的值。利用 <code>rebase -i</code> 合并操作的默认指令是 <code>pick</code>。</p><p>对于不想要的提交，你只需要在文本编辑器中删除对应的内容。如上面这张图，如果你不想要错误的提交，那就删除1、3、4这三行。</p><p>如果你想保持提交的内容但是想修改提交的提交信息，那你可以使用 <code>reword</code> 命令。只需要在第一列中替代 <code>pick</code>。虽然立即就改写提交信息听起来很爽，但是实际上并没有用，因为 <code>rebase -i</code> 会将 SHA 后面的信息都无视掉。这个文本只是用来提醒我们这个提交的内容是什么，在执行完 <code>rebase -i</code> 命令之后，就可以改写任意的提交信息了。</p><p>如果你想将两个提交合并，你可以使用 <code>squash</code> 或者 <code>fixup</code> 指令，如下：<br><img src="https://cloud.githubusercontent.com/assets/2077/6953865/f6b605ca-d891-11e4-98cf-d567ca9f4edc.png" alt=""></p><p>这两个指令都会使得对应的提交和它之前的提交结合成一个提交。在上面的例子中，第一个和第二个会结合成一个提交，然后第三个和第四个也会结合成一个提交。</p><p>当使用 <code>squash</code> 时， Git 会让我们给新合并的提交一个新的提交信息；当使用 <code>fixup</code> 的时候，Git 会自动将列表中将合并的提交的最开始的提交信息作为新的提交信息。拿上图为例，前两个合并时需要输入一个新的合并提交的信息，而后两个合并时，会自动将第三个提交信息作为合并后的提交信息。</p><p>当你保存然后关闭文本编辑器的时候， Git就会依次执行编辑器中的内容。如果你希望更改合并的顺序，只需要在文本编辑器中改动。拿上图为例，如果你想合并 <code>af67f82</code> 和 <code>0835fe2</code> ，你只需要这样更换顺序：<br><img src="https://cloud.githubusercontent.com/assets/2077/6953864/f6b4a9d2-d891-11e4-9ac9-10039c031d06.png" alt=""></p><hr><h3 id="更改早先的提交"><a href="#更改早先的提交" class="headerlink" title="更改早先的提交"></a>更改早先的提交</h3><p><strong>情景</strong>：你突然想起来，如果在之前的一次提交中加入某一个文件效果会更好。这时候你还没有推送这个提交，而这个提交并不是最近的一次，所以不能用 <code>commit --amend</code></p><p><strong>解决</strong>：<code>git commit --squash &lt;SHA of the earlier commit&gt; and git rebase --autosquash -i &lt;even earlier SHA&gt;</code></p><p><strong>原理</strong>：利用 <code>git commit --squash</code> 可以创建一个新的提交并有类似这样的提交信息 <code>squash! Earlier commit</code>(你可以手动输入像这样的提交信息，但是使用 <code>commit --squash</code> 可以让你少打一些字 。)</p><p>你也可以使用 <code>git commit --fixup</code> 指令来操作，利用这个指令不需要手动输入提交信息。这上面这个情境中，利用这个指令更好一些，因为不需要更改提交信息。</p><p>利用 <code>rebase --autosquash -i</code> 指令，然后会打开默认的文本编辑器，而且里面已经包含了提交信息，如下图：<br><img src="https://cloud.githubusercontent.com/assets/2077/6953862/f6a7a1d8-d891-11e4-8784-c32262ff54da.png" alt=""></p><p>当你使用 <code>squash</code> 或者 <code>fixup</code> 指令的时候，你可能不知道你需要合并的提交的 SHA —— 你只记得是一次还是五次之前。这时候操作符 <code>^</code> 和 <code>~</code> 就很方便了。<code>HEAD^</code> 表示 HEAD 之前的一次， <code>HEAD~4</code> 表示的是 HEAD 的前四个提交，也就是倒数第五次提交（因为 HEAD 本身是倒数第一次）。</p><hr><h3 id="停止对已监测文件的监测"><a href="#停止对已监测文件的监测" class="headerlink" title="停止对已监测文件的监测"></a>停止对已监测文件的监测</h3><p><strong>情景</strong>：你最近将 <code>application.log</code> 加入到了仓库中，然后现在每次运行这个程序， Git 就会提示在这个文件中有未处于提交状态的修改。虽然你将 <code>*.log</code> 写入了 <code>.gitignore</code> 文件，但是情况并没有变化。要怎么才能让 git 放弃监测这个文件的变化呢？</p><p><strong>解决</strong>：<code>git rm --cached application.log</code></p><p><strong>原理</strong>：<code>.gitignore</code> 会使得 Git不去监测文件的变化，对于之前没有检测过的文件，它甚至会无视文件的存在。只要文件被提交了， Git 就会持续监测它的变化。类似的，如果利用 <code>git add -f</code> 或者覆盖 <code>.gitignore</code> 文件，那么 Git 也会监测这些文件的变化。</p><p>如果你想使得那些本不应该被监测的文件脱离监测，那么你可以使用 <code>git rm --cached</code> 指令。利用这个指令会停止 Git 对它的监测，同时这个文件在硬盘上不受影响。由于这个文件现在不被监测了，所以利用 <code>git status</code> 不能看到这个文件了。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这是一篇译文，原文地址为： <a href="https://github.com/blog/2019-how-to-undo-almost-anything-with-git" target="_blank" rel="noopener">How to undo (almost) anything with Git</a>。由于自己碰到了这方面的问题，然后搜索过程中发现了这片文章，写的很全面，所以就翻译了一下。翻译的过程中可能会有一些理解上的偏差，欢迎盆友们指正。</p><blockquote><p><strong>commit：</strong>  在文中被翻译为 提交<br>  <strong>push：</strong> 在文中被译为 推送</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对于版本管理系统而言，最重要的一个特性之一就是能够撤销错误的操作。在 git 中，撤销有很多种可能的意思。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;每当你做出一个 提交 的时候，git 都会立即在你的 repository 保存一个快照，之后你就可以通过 git 来恢复到这个项目的前一个版本了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这下面这篇文章中，我将会就几种常见的情景来讨论怎样通过 git 来完美的撤销这些操作。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://detachment.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="git" scheme="http://detachment.club/tags/git/"/>
    
      <category term="工具" scheme="http://detachment.club/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="github" scheme="http://detachment.club/tags/github/"/>
    
  </entry>
  
</feed>
